[
    {
        "reqid": "FUN26",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PSV mode the expiration phase shall start when the inspiratory flow drops below a setable fraction of the peak flow (Expiratory Trigger Setting) \n\nRationale: Dropping inspiratory flow indicates the end of the inspiration\n\nAssuming that \"inspiratory flow\" is measured by Fl1 in figure 2.2",
        "comments": "Ois√≠n, v0.3: renamed \"ExpiratoryTrigger\" to \"ExpiratoryTriggerSensitivity\" for consistency",
        "fulltext": "in PSVMode when Fl1 < ExpiratoryTriggerSensitivity System shall satisfy expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "Fl1",
                "ExpiratoryTriggerSensitivity",
                "expirationPhaseStart"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "conditionTextRange": [
                11,
                49
            ],
            "component_name": "System",
            "componentTextRange": [
                51,
                56
            ],
            "post_condition": "(expirationPhaseStart)",
            "responseTextRange": [
                64,
                91
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(Fl1 < ExpiratoryTriggerSensitivity)</i></b>, Response = <b><i>(expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(Fl1 < ExpiratoryTriggerSensitivity)</i></b> is true and any point in the interval where <b><i>(Fl1 < ExpiratoryTriggerSensitivity)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_unexp_ft": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_SMV_pt": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_SMV_ft": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_coco_smv": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_coco": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "post_condition_unexp_pt": "expirationPhaseStart",
            "post_condition_unexp_ft": "expirationPhaseStart",
            "post_condition_SMV_pt": "expirationPhaseStart",
            "post_condition_SMV_ft": "expirationPhaseStart",
            "post_condition_coco_smv": "expirationPhaseStart",
            "post_condition_coco": "expirationPhaseStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)) & (! (Lin_PSVMode | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)) & (! (Lin_PSVMode | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & Fin_PSVMode)) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & Fin_PSVMode)) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & (PSVMode & (Z (! PSVMode))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & (PSVMode & (Z (! PSVMode))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (Fl1 < ExpiratoryTriggerSensitivity)) )) or ( not (SI( ((Fl1 < ExpiratoryTriggerSensitivity) and ((YtoPre( not (Fl1 < ExpiratoryTriggerSensitivity))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not expirationPhaseStart) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (Fl1 < ExpiratoryTriggerSensitivity)) )) or ( not (SI( ((Fl1 < ExpiratoryTriggerSensitivity) and ((YtoPre( not (Fl1 < ExpiratoryTriggerSensitivity))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not expirationPhaseStart) ))))))",
            "component": "System"
        },
        "_id": "103378d0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_12",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall log user-set ventilation and alarm parameters as well as the current calibration parameters. \n\nRationale: user-set ventilation and alarm parameters need to be able for the resumption of ventilation in case the system has to be briefly turned off.",
        "comments": "",
        "fulltext": "System shall satisfy logVentilationParams & logAlarmParams & logCalibrationParams",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "logVentilationParams",
                "logAlarmParams",
                "logCalibrationParams"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(logVentilationParams & logAlarmParams & logCalibrationParams)",
            "responseTextRange": [
                13,
                80
            ],
            "diagramVariables": "Response = <b><i>(logVentilationParams & logAlarmParams & logCalibrationParams)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_unexp_ft": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_SMV_pt": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_SMV_ft": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_coco_smv": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_coco": "((logVentilationParams and logAlarmParams) and logCalibrationParams)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((logVentilationParams and logAlarmParams) and logCalibrationParams)))",
            "component": "System"
        },
        "_id": "1033c6f0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN30",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The high-level operation sequence shall follow the scheme shown in Figure 2.1",
        "comments": "This is an activity diagram that shows the high-level mode changes. This should really be several requirements, this feels messy\n\nMatt, v0.4: Updating to match Fig 2.1 (updated in v1.3 of the natural language specification). Adding startPCV and startPSV, adding runSelfTest.",
        "fulltext": "System shall satisfy if StartUpMode then (if newPatient then SelfTestMode & if !newPatient then StandByMode) & if SelfTestMode then (if selfTestPassed then StandByMode) & if StandByMode then (if startPCV then PCVMode & if startPSV then PSVMode & if runSelfTest then SelfTestMode) & if error then FailSafeMode & if (powerOff & (StartUpMode | SelfTestMode | StandByMode)) then off",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "newPatient",
                "SelfTestMode",
                "StandByMode",
                "selfTestPassed",
                "startPCV",
                "PCVMode",
                "startPSV",
                "PSVMode",
                "runSelfTest",
                "error",
                "FailSafeMode",
                "powerOff",
                "off"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(StartUpMode => ( newPatient => SelfTestMode & ! newPatient => StandByMode ) & SelfTestMode => ( selfTestPassed => StandByMode ) & StandByMode => ( startPCV => PCVMode & startPSV => PSVMode & runSelfTest => SelfTestMode ) & error => FailSafeMode & ( powerOff & ( StartUpMode | SelfTestMode | StandByMode ) ) => off)",
            "responseTextRange": [
                13,
                377
            ],
            "diagramVariables": "Response = <b><i>(StartUpMode => ( newPatient => SelfTestMode & ! newPatient => StandByMode ) & SelfTestMode => ( selfTestPassed => StandByMode ) & StandByMode => ( startPCV => PCVMode & startPSV => PSVMode & runSelfTest => SelfTestMode ) & error => FailSafeMode & ( powerOff & ( StartUpMode | SelfTestMode | StandByMode ) ) => off)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off)))))",
            "post_condition_unexp_ft": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off)))))",
            "post_condition_SMV_pt": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off)))))",
            "post_condition_SMV_ft": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off)))))",
            "post_condition_coco_smv": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off)))))",
            "post_condition_coco": "(StartUpMode => (((newPatient => ((SelfTestMode and ( not newPatient)) => StandByMode)) and SelfTestMode) => (((selfTestPassed => StandByMode) and StandByMode) => (((startPCV => ((PCVMode and startPSV) => ((PSVMode and runSelfTest) => SelfTestMode))) and error) => ((FailSafeMode and (powerOff and ((StartUpMode or SelfTestMode) or StandByMode))) => off)))))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandByMode)) & SelfTestMode) -> (((selfTestPassed -> StandByMode) & StandByMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & (powerOff & ((StartUpMode | SelfTestMode) | StandByMode))) -> off))))))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((StartUpMode => (((newPatient => ((SelfTestMode and ( not newPatient)) => StandByMode)) and SelfTestMode) => (((selfTestPassed => StandByMode) and StandByMode) => (((startPCV => ((PCVMode and startPSV) => ((PSVMode and runSelfTest) => SelfTestMode))) and error) => ((FailSafeMode and (powerOff and ((StartUpMode or SelfTestMode) or StandByMode))) => off)))))))",
            "component": "System"
        },
        "_id": "1033ee00-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN23_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "When a PCV-to-PSV switch is initiated by the user the  system shall ask the user for confirmation/setting of PSV parameters to be used",
        "comments": "",
        "fulltext": "in PCVMode when PSVModeSelected System shall satisfy confirmPSVParameters",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVModeSelected",
                "confirmPSVParameters"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                11,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(confirmPSVParameters)",
            "responseTextRange": [
                45,
                72
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(confirmPSVParameters)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "confirmPSVParameters",
            "post_condition_unexp_ft": "confirmPSVParameters",
            "post_condition_SMV_pt": "confirmPSVParameters",
            "post_condition_SMV_ft": "confirmPSVParameters",
            "post_condition_coco_smv": "confirmPSVParameters",
            "post_condition_coco": "confirmPSVParameters",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not confirmPSVParameters) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not confirmPSVParameters) ))))))",
            "component": "System"
        },
        "_id": "10341510-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN40",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall react to the inspiratory airway pressure at the patient being exceeded (Max P insp alarm SAV.4) (e.g. by coughing) by truncating the inspiratory phase and immediately transitioning to expiration, quickly relieving the pressure. \n\nRationale: need to avoid excessive pressure in the lungs",
        "comments": "Matt, v0.4: Separating the subscripts with underscores.",
        "fulltext": "if P_insp > MaxP_insp System shall satisfy inspiratoryPhaseEnd & expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "P_insp",
                "MaxP_insp",
                "inspiratoryPhaseEnd",
                "expirationPhaseStart"
            ],
            "qualifier_word": "if",
            "pre_condition": "(P_insp > MaxP_insp)",
            "regular_condition": "(P_insp > MaxP_insp)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "post_condition": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "responseTextRange": [
                35,
                84
            ],
            "diagramVariables": "TC = <b><i>(P_insp > MaxP_insp)</i></b>, Response = <b><i>(inspiratoryPhaseEnd & expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P_insp > MaxP_insp)</i></b> is true and any point in the interval where <b><i>(P_insp > MaxP_insp)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(P_insp > MaxP_insp)",
            "regular_condition_unexp_ft": "(P_insp > MaxP_insp)",
            "regular_condition_SMV_pt": "(P_insp > MaxP_insp)",
            "regular_condition_SMV_ft": "(P_insp > MaxP_insp)",
            "regular_condition_coco_smv": "(P_insp > MaxP_insp)",
            "regular_condition_coco": "(P_insp > MaxP_insp)",
            "post_condition_unexp_pt": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_unexp_ft": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_SMV_pt": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_SMV_ft": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_coco_smv": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_coco": "(inspiratoryPhaseEnd and expirationPhaseStart)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (P_insp > MaxP_insp)) & (X (P_insp > MaxP_insp))) -> (X (F (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> (F (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (P_insp > MaxP_insp)) & (X (P_insp > MaxP_insp))) -> (X (F (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> (F (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (P_insp > MaxP_insp))) or ( not (SI( ((P_insp > MaxP_insp) and ((YtoPre( not (P_insp > MaxP_insp))) or FTP)), ( not (inspiratoryPhaseEnd and expirationPhaseStart)) ))))",
            "component": "System"
        },
        "_id": "10343c20-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_4",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall not lose the contents of the alarm system log during a loss of power for less than 7 d unless erased by authorized personnel of the hospital.",
        "comments": "Not sure how to formalise this.",
        "fulltext": "",
        "semantics": {},
        "_id": "10346330-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN38_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall raise an alarm when a parameter value goes outside the range defined for its associated alarm.",
        "comments": "",
        "fulltext": "if param_V > paramMax_V | param_V < paramMin_V System shall satisfy paramAlarm_V",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "param_V",
                "paramMax_V",
                "paramMin_V",
                "paramAlarm_V"
            ],
            "qualifier_word": "if",
            "pre_condition": "(param_V > paramMax_V | param_V < paramMin_V)",
            "regular_condition": "(param_V > paramMax_V | param_V < paramMin_V)",
            "conditionTextRange": [
                0,
                45
            ],
            "component_name": "System",
            "componentTextRange": [
                47,
                52
            ],
            "post_condition": "(paramAlarm_V)",
            "responseTextRange": [
                60,
                79
            ],
            "diagramVariables": "TC = <b><i>(param_V > paramMax_V | param_V < paramMin_V)</i></b>, Response = <b><i>(paramAlarm_V)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(param_V > paramMax_V | param_V < paramMin_V)</i></b> is true and any point in the interval where <b><i>(param_V > paramMax_V | param_V < paramMin_V)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_unexp_ft": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_SMV_pt": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_SMV_ft": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_coco_smv": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_coco": "((param_V > paramMax_V) or (param_V < paramMin_V))",
            "post_condition_unexp_pt": "paramAlarm_V",
            "post_condition_unexp_ft": "paramAlarm_V",
            "post_condition_SMV_pt": "paramAlarm_V",
            "post_condition_SMV_ft": "paramAlarm_V",
            "post_condition_coco_smv": "paramAlarm_V",
            "post_condition_coco": "paramAlarm_V",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & ((! LAST) & (X ((param_V > paramMax_V) | (param_V < paramMin_V))))) -> (X ((! LAST) U paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> ((! LAST) U paramAlarm_V)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! ((! paramAlarm_V) S ((! paramAlarm_V) & (((param_V > paramMax_V) | (param_V < paramMin_V)) & ((Y (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! ((! paramAlarm_V) S ((! paramAlarm_V) & (((param_V > paramMax_V) | (param_V < paramMin_V)) & ((Y (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! ((! paramAlarm_V) S ((! paramAlarm_V) & (((param_V > paramMax_V) | (param_V < paramMin_V)) & ((Y (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & ((! LAST) & (X ((param_V > paramMax_V) | (param_V < paramMin_V))))) -> (X ((! LAST) U paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> ((! LAST) U paramAlarm_V)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & (X ((param_V > paramMax_V) | (param_V < paramMin_V)))) -> (X (F paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> (F paramAlarm_V)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & (X ((param_V > paramMax_V) | (param_V < paramMin_V)))) -> (X (F paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> (F paramAlarm_V)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & ((! LAST) & (X ((param_V > paramMax_V) | (param_V < paramMin_V))))) -> (X ((! LAST) U paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> ((! LAST) U paramAlarm_V)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not ((param_V > paramMax_V) or (param_V < paramMin_V)))) or ( not (SI( (((param_V > paramMax_V) or (param_V < paramMin_V)) and ((YtoPre( not ((param_V > paramMax_V) or (param_V < paramMin_V)))) or FTP)), ( not paramAlarm_V) ))))",
            "component": "System"
        },
        "_id": "10348a40-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6_3",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The self-test procedure shall confirm the FI2 flow meter in the patient breathing circuit is connected in the right direction and is calibrated.",
        "comments": "Ois√≠n, v0.3.1: Changed the response from just \"satisfy testFl2\" to \"satisfy testFl2Pass | testFl2Fail | testFl2Skip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testFl2Pass | testFl2Fail | testFl2Skip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testFl2Pass",
                "testFl2Fail",
                "testFl2Skip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testFl2Pass | testFl2Fail | testFl2Skip)",
            "responseTextRange": [
                29,
                75
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testFl2Pass | testFl2Fail | testFl2Skip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_unexp_ft": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_SMV_pt": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_SMV_ft": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_coco_smv": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_coco": "((testFl2Pass or testFl2Fail) or testFl2Skip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testFl2Pass or testFl2Fail) or testFl2Skip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testFl2Pass or testFl2Fail) or testFl2Skip)) )))))",
            "component": "System"
        },
        "_id": "1034b150-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN15",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall measure the Ventilatorv0.2 pressure at/near the inlet to the patient. \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function\n\nAssuming that \"Ventilatorv0.2 pressure at/near the inlet to the patient\" is the same as PSins (pressure in the entrance to the patient) in Figure 2.2",
        "comments": "",
        "fulltext": "System shall satisfy measurePSins",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measurePSins"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measurePSins)",
            "responseTextRange": [
                13,
                32
            ],
            "diagramVariables": "Response = <b><i>(measurePSins)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "measurePSins",
            "post_condition_unexp_ft": "measurePSins",
            "post_condition_SMV_pt": "measurePSins",
            "post_condition_SMV_ft": "measurePSins",
            "post_condition_coco_smv": "measurePSins",
            "post_condition_coco": "measurePSins",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U measurePSins)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O measurePSins)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O measurePSins)",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O measurePSins)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U measurePSins)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F measurePSins)",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F measurePSins)",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U measurePSins)",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(measurePSins))",
            "component": "System"
        },
        "_id": "1034d860-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN5_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Upon initiation of the Start-up Mode, the system shall go through an initialization process that loads default parameters and checks the system memory and the communication of the controller with the sensors and valves, as well as between the controller and the GUI. \n\nRationale: Need to ensure that the system properly started.",
        "comments": "Oisin, v.0.3: changed \"shall satisfy initDone\" to \"shall satisfy initStart\", since I think that more accurately captures what's happening. The NL requirement has more detail on the initialisation process, maybe that could be a further child requirement? Or just included here",
        "fulltext": "in StartUpMode System shall satisfy initStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "initStart"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(initStart)",
            "responseTextRange": [
                28,
                44
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(initStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "initStart",
            "post_condition_unexp_ft": "initStart",
            "post_condition_SMV_pt": "initStart",
            "post_condition_SMV_ft": "initStart",
            "post_condition_coco_smv": "initStart",
            "post_condition_coco": "initStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U initStart)))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U initStart)))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! initStart) S ((! initStart) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! initStart) S ((! initStart) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! initStart) S ((! initStart) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! initStart) S ((! initStart) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! initStart) S ((! initStart) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U initStart)))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U initStart)))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U initStart)))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U initStart)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U initStart))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U initStart))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U initStart))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U initStart))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not initStart) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not initStart) )))))",
            "component": "System"
        },
        "_id": "1034ff70-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN41",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "A failure of the GUI (e.g. GUI freezes) or a loss of communication between the GUI and the Controller shall raise a high-priority alarm and any ongoing ventilation process shall not be interrupted. \n\nRationale: in order to keep the patient safe, the ventilation needs to continue even if there is no connection between the controller and the GUI",
        "comments": "",
        "fulltext": "if GUIFailue | !GUIConnected System shall satisfy ventilating & highPriorityAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "GUIFailue",
                "GUIConnected",
                "ventilating",
                "highPriorityAlarm"
            ],
            "qualifier_word": "if",
            "pre_condition": "(GUIFailue | ! GUIConnected)",
            "regular_condition": "(GUIFailue | ! GUIConnected)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "post_condition": "(ventilating & highPriorityAlarm)",
            "responseTextRange": [
                42,
                80
            ],
            "diagramVariables": "TC = <b><i>(GUIFailue | ! GUIConnected)</i></b>, Response = <b><i>(ventilating & highPriorityAlarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(GUIFailue | ! GUIConnected)</i></b> is true and any point in the interval where <b><i>(GUIFailue | ! GUIConnected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(GUIFailue | (! GUIConnected))",
            "regular_condition_unexp_ft": "(GUIFailue | (! GUIConnected))",
            "regular_condition_SMV_pt": "(GUIFailue | (! GUIConnected))",
            "regular_condition_SMV_ft": "(GUIFailue | (! GUIConnected))",
            "regular_condition_coco_smv": "(GUIFailue | (! GUIConnected))",
            "regular_condition_coco": "(GUIFailue or ( not GUIConnected))",
            "post_condition_unexp_pt": "(ventilating & highPriorityAlarm)",
            "post_condition_unexp_ft": "(ventilating & highPriorityAlarm)",
            "post_condition_SMV_pt": "(ventilating & highPriorityAlarm)",
            "post_condition_SMV_ft": "(ventilating & highPriorityAlarm)",
            "post_condition_coco_smv": "(ventilating & highPriorityAlarm)",
            "post_condition_coco": "(ventilating and highPriorityAlarm)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (GUIFailue | (! GUIConnected))) & ((! LAST) & (X (GUIFailue | (! GUIConnected))))) -> (X ((! LAST) U (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> ((! LAST) U (ventilating & highPriorityAlarm))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (GUIFailue | (! GUIConnected)))) | (! ((! (ventilating & highPriorityAlarm)) S ((! (ventilating & highPriorityAlarm)) & ((GUIFailue | (! GUIConnected)) & ((Y (! (GUIFailue | (! GUIConnected)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (GUIFailue | (! GUIConnected)))) | (! ((! (ventilating & highPriorityAlarm)) S ((! (ventilating & highPriorityAlarm)) & ((GUIFailue | (! GUIConnected)) & ((Y (! (GUIFailue | (! GUIConnected)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (GUIFailue | (! GUIConnected)))) | (! ((! (ventilating & highPriorityAlarm)) S ((! (ventilating & highPriorityAlarm)) & ((GUIFailue | (! GUIConnected)) & ((Y (! (GUIFailue | (! GUIConnected)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (GUIFailue | (! GUIConnected))) & ((! LAST) & (X (GUIFailue | (! GUIConnected))))) -> (X ((! LAST) U (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> ((! LAST) U (ventilating & highPriorityAlarm))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (GUIFailue | (! GUIConnected))) & (X (GUIFailue | (! GUIConnected)))) -> (X (F (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> (F (ventilating & highPriorityAlarm))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (GUIFailue | (! GUIConnected))) & (X (GUIFailue | (! GUIConnected)))) -> (X (F (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> (F (ventilating & highPriorityAlarm))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (GUIFailue | (! GUIConnected))) & ((! LAST) & (X (GUIFailue | (! GUIConnected))))) -> (X ((! LAST) U (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> ((! LAST) U (ventilating & highPriorityAlarm))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (GUIFailue or ( not GUIConnected)))) or ( not (SI( ((GUIFailue or ( not GUIConnected)) and ((YtoPre( not (GUIFailue or ( not GUIConnected)))) or FTP)), ( not (ventilating and highPriorityAlarm)) ))))",
            "component": "System"
        },
        "_id": "10352680-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN9",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Once the self-test has been completed successfully and configurations have been loaded properly the system shall start monitoring and reporting health parameters.\n\nRationale: At this point the monitoring module is able to carry out its assigned functionality.",
        "comments": "Oisin, v0.3: Changed \"selfTestDone\" to \"selfTestPassed\"\nMatt, v0.4: Added transition to Standby Mode (as per Fig 2.1 and via conversation with Angelo Garagantini on github); SelfTestPass -> SelfTestPassed (as per Fig 2.1 since v1.3 of the natural language specification)\n",
        "fulltext": "when selfTestPassed System shall satisfy startMonitoring & startReportingHealthParams & StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "selfTestPassed",
                "startMonitoring",
                "startReportingHealthParams",
                "StandbyMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(selfTestPassed)",
            "regular_condition": "(selfTestPassed)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(startMonitoring & startReportingHealthParams & StandbyMode)",
            "responseTextRange": [
                33,
                98
            ],
            "diagramVariables": "TC = <b><i>(selfTestPassed)</i></b>, Response = <b><i>(startMonitoring & startReportingHealthParams & StandbyMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(selfTestPassed)</i></b> is true and any point in the interval where <b><i>(selfTestPassed)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "selfTestPassed",
            "regular_condition_unexp_ft": "selfTestPassed",
            "regular_condition_SMV_pt": "selfTestPassed",
            "regular_condition_SMV_ft": "selfTestPassed",
            "regular_condition_coco_smv": "selfTestPassed",
            "regular_condition_coco": "selfTestPassed",
            "post_condition_unexp_pt": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_unexp_ft": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_SMV_pt": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_SMV_ft": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_coco_smv": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_coco": "((startMonitoring and startReportingHealthParams) and StandbyMode)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! selfTestPassed)) | (! ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) S ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) & (selfTestPassed & ((Y (! selfTestPassed)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! selfTestPassed)) | (! ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) S ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! selfTestPassed)) | (! ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) S ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not selfTestPassed)) or ( not (SI( (selfTestPassed and ((YtoPre( not selfTestPassed)) or FTP)), ( not ((startMonitoring and startReportingHealthParams) and StandbyMode)) ))))",
            "component": "System"
        },
        "_id": "10354d90-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN31",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Any normal operating mode or identified failure mode of the system and its components shall always result in a state of the system that is safe for the patient. \n\nRationale: patient safety is primary concern",
        "comments": "",
        "fulltext": "System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "patientSafe"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                13,
                31
            ],
            "diagramVariables": "Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U patientSafe)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O patientSafe)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O patientSafe)",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O patientSafe)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U patientSafe)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F patientSafe)",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F patientSafe)",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U patientSafe)",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(patientSafe))",
            "component": "System"
        },
        "_id": "103574a0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN19",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have a pressure control ventilation (PCV) mode, as characterized by the following plots of pressure and flow versus time. [Plots are on page 10 of the spec] \n\nRationale: this is the most appropriate procedure for COVID-19 patients as it allows the immediate reopening of the alveoli and is strongly recommended by the doctors and nurses in the COVID-19 wards of Lombardy, rather than the constant flow procedure. These characteristics of the Ventilatorv0.2 pressure transient during the inspiratory cycle are crucial to avoid barotrauma and to minimise long term fatigue of muscles and alveoli induced by forced mechanical ventilation.",
        "comments": "Not sure that this one can be formalised",
        "fulltext": "",
        "semantics": {},
        "_id": "10359bb0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10_3",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "If ‚ÄúResume Ventilation‚Äù is selected, every step of the self-test procedure FUN.6 can be skipped or optionally rerun individually.",
        "comments": " Original version: \"when resumeVentilation System shall satisfy skipSelfTest | rerunIndividualSelfTests\"\nOis√≠n, v0.3.1: Changed to specify the transition to SelfTestMode and to include the definition of 'selfTestPass' to allow for tests to be skipped\nMatt, v0.4: SelfTestPass -> SelfTestPassed (as per Fig 2.1 since v1.3 of the natural language specification). Leaving the individual tests as \"pass\" because they're not mentioned in Fig 2.1.\n",
        "fulltext": "when resumeVentilation System shall satisfy SelfTestMode & (( (testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip) & (testFl2Pass | testFl2Skip) & (testPSExpPass | testPSExpSkip) & (testOxygenSensorPass | testOxygenSensorSkip) & (testAlarmsPass | testAlarmsSkip) ) => selfTestPassed)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "resumeVentilation",
                "SelfTestMode",
                "testPowerSwitchPass",
                "testPowerSwitchSkip",
                "testLeaksPass",
                "testLeaksSkip",
                "testFl2Pass",
                "testFl2Skip",
                "testPSExpPass",
                "testPSExpSkip",
                "testOxygenSensorPass",
                "testOxygenSensorSkip",
                "testAlarmsPass",
                "testAlarmsSkip",
                "selfTestPassed"
            ],
            "qualifier_word": "when",
            "pre_condition": "(resumeVentilation)",
            "regular_condition": "(resumeVentilation)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "post_condition": "(SelfTestMode & ( ( ( testPowerSwitchPass | testPowerSwitchSkip ) & ( testLeaksPass | testLeaksSkip ) & ( testFl2Pass | testFl2Skip ) & ( testPSExpPass | testPSExpSkip ) & ( testOxygenSensorPass | testOxygenSensorSkip ) & ( testAlarmsPass | testAlarmsSkip ) ) => selfTestPassed ))",
            "responseTextRange": [
                36,
                307
            ],
            "diagramVariables": "TC = <b><i>(resumeVentilation)</i></b>, Response = <b><i>(SelfTestMode & ( ( ( testPowerSwitchPass | testPowerSwitchSkip ) & ( testLeaksPass | testLeaksSkip ) & ( testFl2Pass | testFl2Skip ) & ( testPSExpPass | testPSExpSkip ) & ( testOxygenSensorPass | testOxygenSensorSkip ) & ( testAlarmsPass | testAlarmsSkip ) ) => selfTestPassed ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(resumeVentilation)</i></b> is true and any point in the interval where <b><i>(resumeVentilation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "resumeVentilation",
            "regular_condition_unexp_ft": "resumeVentilation",
            "regular_condition_SMV_pt": "resumeVentilation",
            "regular_condition_SMV_ft": "resumeVentilation",
            "regular_condition_coco_smv": "resumeVentilation",
            "regular_condition_coco": "resumeVentilation",
            "post_condition_unexp_pt": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_unexp_ft": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_SMV_pt": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_SMV_ft": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_coco_smv": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_coco": "(SelfTestMode and (((((((testPowerSwitchPass or testPowerSwitchSkip) and (testLeaksPass or testLeaksSkip)) and (testFl2Pass or testFl2Skip)) and (testPSExpPass or testPSExpSkip)) and (testOxygenSensorPass or testOxygenSensorSkip)) and (testAlarmsPass or testAlarmsSkip)) => selfTestPassed))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! resumeVentilation)) | (! ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) S ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) & (resumeVentilation & ((Y (! resumeVentilation)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! resumeVentilation)) | (! ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) S ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! resumeVentilation)) | (! ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) S ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not resumeVentilation)) or ( not (SI( (resumeVentilation and ((YtoPre( not resumeVentilation)) or FTP)), ( not (SelfTestMode and (((((((testPowerSwitchPass or testPowerSwitchSkip) and (testLeaksPass or testLeaksSkip)) and (testFl2Pass or testFl2Skip)) and (testPSExpPass or testPSExpSkip)) and (testOxygenSensorPass or testOxygenSensorSkip)) and (testAlarmsPass or testAlarmsSkip)) => selfTestPassed))) ))))",
            "component": "System"
        },
        "_id": "1035c2c0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN27",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PSV mode the system shall check for the presence of apnea, which occurs when a patient does not take new breath within the allowable apnea lag time. \n\nRationale: In case the patient stops breathing (apnea) the system needs to be able to ensure that the patient continues to be ventilated.",
        "comments": "",
        "fulltext": "in PSVMode when breathingTime >= apneaLagTime System shall satisfy apnea",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "breathingTime",
                "apneaLagTime",
                "apnea"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(breathingTime >= apneaLagTime)",
            "regular_condition": "(breathingTime >= apneaLagTime)",
            "conditionTextRange": [
                11,
                44
            ],
            "component_name": "System",
            "componentTextRange": [
                46,
                51
            ],
            "post_condition": "(apnea)",
            "responseTextRange": [
                59,
                71
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(breathingTime >= apneaLagTime)</i></b>, Response = <b><i>(apnea)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(breathingTime >= apneaLagTime)</i></b> is true and any point in the interval where <b><i>(breathingTime >= apneaLagTime)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(breathingTime >= apneaLagTime)",
            "regular_condition_unexp_ft": "(breathingTime >= apneaLagTime)",
            "regular_condition_SMV_pt": "(breathingTime >= apneaLagTime)",
            "regular_condition_SMV_ft": "(breathingTime >= apneaLagTime)",
            "regular_condition_coco_smv": "(breathingTime >= apneaLagTime)",
            "regular_condition_coco": "(breathingTime >= apneaLagTime)",
            "post_condition_unexp_pt": "apnea",
            "post_condition_unexp_ft": "apnea",
            "post_condition_SMV_pt": "apnea",
            "post_condition_SMV_ft": "apnea",
            "post_condition_coco_smv": "apnea",
            "post_condition_coco": "apnea",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U apnea)) & (! (Lin_PSVMode | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U apnea)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U apnea)) & (! (Lin_PSVMode | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U apnea)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & Fin_PSVMode)) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & Fin_PSVMode)) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (breathingTime >= apneaLagTime)) )) or ( not (SI( ((breathingTime >= apneaLagTime) and ((YtoPre( not (breathingTime >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not apnea) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (breathingTime >= apneaLagTime)) )) or ( not (SI( ((breathingTime >= apneaLagTime) and ((YtoPre( not (breathingTime >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not apnea) ))))))",
            "component": "System"
        },
        "_id": "1035e9d0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_5",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall not permit the healthcare professional operator to erase the contents of the alarm system log.",
        "comments": "",
        "fulltext": "System shall satisfy if user = operator then !eraseLog",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "user",
                "operator",
                "eraseLog"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(user = operator => ! eraseLog)",
            "responseTextRange": [
                13,
                53
            ],
            "diagramVariables": "Response = <b><i>(user = operator => ! eraseLog)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((user = operator) -> (! eraseLog))",
            "post_condition_unexp_ft": "((user = operator) -> (! eraseLog))",
            "post_condition_SMV_pt": "((user = operator) -> (! eraseLog))",
            "post_condition_SMV_ft": "((user = operator) -> (! eraseLog))",
            "post_condition_coco_smv": "((user = operator) -> (! eraseLog))",
            "post_condition_coco": "((user = operator) => ( not eraseLog))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((user = operator) -> (! eraseLog)))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((user = operator) -> (! eraseLog)))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((user = operator) -> (! eraseLog)))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((user = operator) -> (! eraseLog)))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((user = operator) -> (! eraseLog)))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((user = operator) -> (! eraseLog)))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((user = operator) -> (! eraseLog)))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((user = operator) -> (! eraseLog)))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((user = operator) => ( not eraseLog))))",
            "component": "System"
        },
        "_id": "103610e0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN16",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall measure and display the volume of gas delivered to the patient per breathing cycle (tidal volume). \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function",
        "comments": "TV = Tidal Volume",
        "fulltext": "System shall satisfy measureTV & displayTV",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureTV",
                "displayTV"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureTV & displayTV)",
            "responseTextRange": [
                13,
                41
            ],
            "diagramVariables": "Response = <b><i>(measureTV & displayTV)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureTV & displayTV)",
            "post_condition_unexp_ft": "(measureTV & displayTV)",
            "post_condition_SMV_pt": "(measureTV & displayTV)",
            "post_condition_SMV_ft": "(measureTV & displayTV)",
            "post_condition_coco_smv": "(measureTV & displayTV)",
            "post_condition_coco": "(measureTV and displayTV)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureTV & displayTV))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureTV & displayTV))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureTV & displayTV))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureTV & displayTV))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureTV & displayTV))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureTV & displayTV))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureTV & displayTV))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureTV & displayTV))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureTV and displayTV)))",
            "component": "System"
        },
        "_id": "103637f0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN18",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have a leak compensation feature for leaks in the patient breathing circuit which shall be disabled by default. Rationale: regulatory requirement",
        "comments": "Ois√≠n, v0.3: Added brackets for clarity, and renamed first variable for consistency",
        "fulltext": "System shall satisfy (if enableLeakCompensation then leakCompensation) | !leakCompensation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "enableLeakCompensation",
                "leakCompensation"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(( enableLeakCompensation => leakCompensation ) | ! leakCompensation)",
            "responseTextRange": [
                13,
                89
            ],
            "diagramVariables": "Response = <b><i>(( enableLeakCompensation => leakCompensation ) | ! leakCompensation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_unexp_ft": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_SMV_pt": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_SMV_ft": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_coco_smv": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_coco": "((enableLeakCompensation => leakCompensation) or ( not leakCompensation))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((enableLeakCompensation => leakCompensation) or ( not leakCompensation))))",
            "component": "System"
        },
        "_id": "10365f00-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN5_3",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The patient shall not be connected to the breathing circuit when the system is powered on and through start-up and self-test.",
        "comments": "",
        "fulltext": "System shall satisfy  (StartUpMode | SelfTestMode) -> !patientConnected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "SelfTestMode",
                "patientConnected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(( StartUpMode | SelfTestMode ) -> ! patientConnected)",
            "responseTextRange": [
                13,
                70
            ],
            "diagramVariables": "Response = <b><i>(( StartUpMode | SelfTestMode ) -> ! patientConnected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_unexp_ft": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_SMV_pt": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_SMV_ft": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_coco_smv": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_coco": "((StartUpMode or SelfTestMode) => ( not patientConnected))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((StartUpMode or SelfTestMode) => ( not patientConnected))))",
            "component": "System"
        },
        "_id": "10368610-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN42",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The communication between Controller and GUI shall be reliable.",
        "comments": "Unsure how to formalise this wishful thinking.",
        "fulltext": "",
        "semantics": {},
        "_id": "1036ad20-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN28",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PCV and PSV mode there shall be the possibility to press a single button to initiate an Expiratory Pause that closes both inspiratory and expiratory valve at the end of the expiration phase as long as the operator holds the button but no longer than 60 sec \n\nRationale: The expiratory pause allows the determination of the residual pressure above the PEEP level, the residual value being PEEP + AutoPEEP. AutoPEEP level for the patient, providing information on the level of obstruction in the exhalation channel. AutoPEEP may be zero for most patients or significantly different from zero for patients that have obstructions in the exhalation channel, as possibly generated by secretions. In this case, the small flow during exhalation may result in an incomplete drain of the alveoli during the expiration phase.",
        "comments": "This is a messy timing property, but I can't see a clean way to do this in one FRETISH requirement.\n\nOis√≠n, v0.3: added a condition that this happens at the end of the expiratory phase. I've left in the boolean in the responses for discussion purposes but I think having it in the conditions makes more sense. And yeah this is hard to do in a way that feels satisfying",
        "fulltext": "when expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd) System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "expiratoryPauseButton",
                "PCVExpiratoryPhaseEnd",
                "PSVExpiratoryPhaseEnd",
                "buttonUnPressOr60Seconds",
                "expirationPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPauseButton & ( PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd ))",
            "regular_condition": "(expiratoryPauseButton & ( PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd ))",
            "conditionTextRange": [
                0,
                75
            ],
            "component_name": "System",
            "componentTextRange": [
                77,
                82
            ],
            "stop_condition": "(buttonUnPressOr60Seconds)",
            "timingTextRange": [
                90,
                119
            ],
            "post_condition": "(expirationPhaseEnd & inValveClose & outValveClose)",
            "responseTextRange": [
                121,
                177
            ],
            "diagramVariables": "TC = <b><i>(expiratoryPauseButton & ( PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd ))</i></b>, SC = <b><i>(buttonUnPressOr60Seconds)</i></b>, Response = <b><i>(expirationPhaseEnd & inValveClose & outValveClose)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(expiratoryPauseButton & ( PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd ))</i></b> is true and any point in the interval where <b><i>(expiratoryPauseButton & ( PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))",
            "regular_condition_unexp_ft": "(expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))",
            "regular_condition_SMV_pt": "(expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))",
            "regular_condition_SMV_ft": "(expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))",
            "regular_condition_coco_smv": "(expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))",
            "regular_condition_coco": "(expiratoryPauseButton and (PCVExpiratoryPhaseEnd or PSVExpiratoryPhaseEnd))",
            "post_condition_unexp_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_unexp_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco_smv": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco": "((expirationPhaseEnd and inValveClose) and outValveClose)",
            "stop_condition_unexp_pt": "buttonUnPressOr60Seconds",
            "stop_condition_unexp_ft": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_pt": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_ft": "buttonUnPressOr60Seconds",
            "stop_condition_coco_smv": "buttonUnPressOr60Seconds",
            "stop_condition_coco": "buttonUnPressOr60Seconds",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))) & ((! LAST) & (X (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) -> $post_condition_unexp_pt$)))",
            "pt": "(H ((H (! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) & ((Y (! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) | FTP)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))))",
            "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))))) -> $post_condition_SMV_pt$)))",
            "ptExpanded": "(H ((H (! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) & ((Y (! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) | (! (Y TRUE)))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))))",
            "ptFinBtwExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))))) -> $post_condition_SMV_pt$)))",
            "ptFinBtwExpanded": "(H ((H (! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) & ((Y (! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) | (! (Y TRUE)))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))) & ((! LAST) & (X (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))) & (X (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))) & (X (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))) & ((! LAST) & (X (expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd))))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "CoCoSpecCode_fetched": "(H((H( not $regular_condition_coco$)) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $stop_condition_coco$) )) => $post_condition_coco$)))",
            "CoCoSpecCode": "(H((H( not (expiratoryPauseButton and (PCVExpiratoryPhaseEnd or PSVExpiratoryPhaseEnd)))) or ((SI( ((expiratoryPauseButton and (PCVExpiratoryPhaseEnd or PSVExpiratoryPhaseEnd)) and ((YtoPre( not (expiratoryPauseButton and (PCVExpiratoryPhaseEnd or PSVExpiratoryPhaseEnd)))) or FTP)), ( not buttonUnPressOr60Seconds) )) => ((expirationPhaseEnd and inValveClose) and outValveClose))))",
            "component": "System"
        },
        "_id": "10372250-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN39",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall prompt the user before ventilation is started to enter user-controlled alarm thresholds for SAV.3- SAV.9 \n\nRationale: alarm thresholds may vary from patient to patient",
        "comments": "",
        "fulltext": "before PSVMode | PCVMode System shall satisfy enterAlarmThresholds",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "PCVMode",
                "enterAlarmThresholds"
            ],
            "scope_mode": "(PSVMode | PCVMode)",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "System",
            "componentTextRange": [
                25,
                30
            ],
            "post_condition": "(enterAlarmThresholds)",
            "responseTextRange": [
                38,
                65
            ],
            "diagramVariables": "M = <b><i>(PSVMode | PCVMode)</i></b>,, Response = <b><i>(enterAlarmThresholds)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and exclusive of) the first point where <b><i>(PSVMode | PCVMode)</i></b> holds. In the interval defined by the entire execution, if <b><i>(PSVMode | PCVMode)</i></b> never holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/before_null_null_satisfaction.svg",
            "scope_mode_pt": "(PSVMode | PCVMode)",
            "scope_mode_coco": "(PSVMode or PCVMode)",
            "scope_mode_ft": "(PSVMode | PCVMode)",
            "post_condition_unexp_pt": "enterAlarmThresholds",
            "post_condition_unexp_ft": "enterAlarmThresholds",
            "post_condition_SMV_pt": "enterAlarmThresholds",
            "post_condition_SMV_ft": "enterAlarmThresholds",
            "post_condition_coco_smv": "enterAlarmThresholds",
            "post_condition_coco": "enterAlarmThresholds",
            "ft_fetched": "(((! (FFin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$) | $scope_mode_ft$)",
            "ft": "(((! (FFin_(PSVMode | PCVMode) | LAST)) U enterAlarmThresholds) | (PSVMode | PCVMode))",
            "pt_fetched": "((H ((FFin_$scope_mode_pt$ & (! FTP)) -> (Y (O $post_condition_unexp_pt$)))) & ((H (! FFin_$scope_mode_pt$)) -> (O $post_condition_unexp_pt$)))",
            "pt": "((H ((FFin_(PSVMode | PCVMode) & (! FTP)) -> (Y (O enterAlarmThresholds)))) & ((H (! FFin_(PSVMode | PCVMode))) -> (O enterAlarmThresholds)))",
            "ptExpanded_fetched": "((H (((($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) & ((Y (H (! $scope_mode_pt$))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O $post_condition_SMV_pt$)))) & ((H (! (($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) & ((Y (H (! $scope_mode_pt$))) | (! (Y TRUE)))))) -> (O $post_condition_SMV_pt$)))",
            "ptExpanded": "((H (((((PSVMode | PCVMode) & (Z (! (PSVMode | PCVMode)))) & ((Y (H (! (PSVMode | PCVMode)))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O enterAlarmThresholds)))) & ((H (! (((PSVMode | PCVMode) & (Z (! (PSVMode | PCVMode)))) & ((Y (H (! (PSVMode | PCVMode)))) | (! (Y TRUE)))))) -> (O enterAlarmThresholds)))",
            "ptFinBtwExpanded_fetched": "(H (((($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) & ((Y (H (! $scope_mode_pt$))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O $post_condition_SMV_pt$))))",
            "ptFinBtwExpanded": "(H (((((PSVMode | PCVMode) & ((! (Y TRUE)) | (Y (! (PSVMode | PCVMode))))) & ((Y (H (! (PSVMode | PCVMode)))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O enterAlarmThresholds))))",
            "ftExpanded_fetched": "(((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) | LAST)) U $post_condition_SMV_ft$) | $scope_mode_ft$)",
            "ftExpanded": "(((! ((((! (PSVMode | PCVMode)) & (! LAST)) & (X (PSVMode | PCVMode))) | LAST)) U enterAlarmThresholds) | (PSVMode | PCVMode))",
            "ftInfAUExpanded_fetched": "(((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) U $post_condition_SMV_ft$) | $scope_mode_ft$)",
            "ftInfAUExpanded": "(((! (((! (PSVMode | PCVMode)) ) & (X (PSVMode | PCVMode)))) U enterAlarmThresholds) | (PSVMode | PCVMode))",
            "ftInfBtwExpanded_fetched": "(((F (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) -> ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) U $post_condition_SMV_ft$)) | $scope_mode_ft$)",
            "ftInfBtwExpanded": "(((F (((! (PSVMode | PCVMode)) ) & (X (PSVMode | PCVMode)))) -> ((! (((! (PSVMode | PCVMode)) ) & (X (PSVMode | PCVMode)))) U enterAlarmThresholds)) | (PSVMode | PCVMode))",
            "ftFinBtwExpanded_fetched": "((((! LAST) U (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) -> ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) U $post_condition_SMV_ft$)) | $scope_mode_ft$)",
            "ftFinBtwExpanded": "((((! LAST) U (((! (PSVMode | PCVMode)) & (! LAST)) & (X (PSVMode | PCVMode)))) -> ((! (((! (PSVMode | PCVMode)) & (! LAST)) & (X (PSVMode | PCVMode)))) U enterAlarmThresholds)) | (PSVMode | PCVMode))",
            "CoCoSpecCode_fetched": "((H(((($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))) and ((YtoPre(H( not $scope_mode_coco$))) or FTP)) and ( not FTP)) => (YtoPre(O($post_condition_coco$))))) and ((H( not (($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))) and ((YtoPre(H( not $scope_mode_coco$))) or FTP)))) => (O($post_condition_coco$))))",
            "CoCoSpecCode": "((H(((((PSVMode or PCVMode) and (FTP or (YtoPre( not (PSVMode or PCVMode))))) and ((YtoPre(H( not (PSVMode or PCVMode)))) or FTP)) and ( not FTP)) => (YtoPre(O(enterAlarmThresholds))))) and ((H( not (((PSVMode or PCVMode) and (FTP or (YtoPre( not (PSVMode or PCVMode))))) and ((YtoPre(H( not (PSVMode or PCVMode)))) or FTP)))) => (O(enterAlarmThresholds))))",
            "component": "System"
        },
        "_id": "10374960-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN21",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PCV mode, a new breathing cycle shall be initiated either after a breathing cycle is over, or by patient request during expiration. \n\nRationale: while the main mode of PCV is the control of the breathing cycle timing by the Ventilatorv0.2, the patient has to have the ability to trigger a breath on his own",
        "comments": "",
        "fulltext": "in PCVMode System shall satisfy (breathingCycleDone | patientBreathingRequest) => breathingCycleStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "breathingCycleDone",
                "patientBreathingRequest",
                "breathingCycleStart"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(( breathingCycleDone | patientBreathingRequest ) => breathingCycleStart)",
            "responseTextRange": [
                24,
                100
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(( breathingCycleDone | patientBreathingRequest ) => breathingCycleStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_unexp_ft": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_SMV_pt": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_SMV_ft": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_coco_smv": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_coco": "((breathingCycleDone or patientBreathingRequest) => breathingCycleStart)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleDone or patientBreathingRequest) => breathingCycleStart)) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleDone or patientBreathingRequest) => breathingCycleStart)) )))))",
            "component": "System"
        },
        "_id": "10377070-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN27_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "If apnea is detected, the system shall automatically switch from PSV to PCV mode with pre-determined apnea backup settings for RR AP , PinspAP , I:E AP . RRAP and PinspAP shall be set by the user. I:E AP will be fixed at 1:2 \n\nRationale: in case of apnea the Ventilatorv0.2 needs to take over and ensure that ventilation continues to assure patient safety",
        "comments": "Matt, v0.4: \"I:E\" -> \"ItoE\" to fix a silent FRET error. Changing ItoE = 1:2 to ItoE = ItoE_Ap to fix the same error. Separating the subscripts with underscores.",
        "fulltext": "if apnea System shall satisfy PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "apnea",
                "PCVMode",
                "RR",
                "RR_AP",
                "P_insp",
                "P_inspAP",
                "ItoE",
                "ItoE_AP"
            ],
            "qualifier_word": "if",
            "pre_condition": "(apnea)",
            "regular_condition": "(apnea)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "post_condition": "(PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)",
            "responseTextRange": [
                22,
                86
            ],
            "diagramVariables": "TC = <b><i>(apnea)</i></b>, Response = <b><i>(PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(apnea)</i></b> is true and any point in the interval where <b><i>(apnea)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "apnea",
            "regular_condition_unexp_ft": "apnea",
            "regular_condition_SMV_pt": "apnea",
            "regular_condition_SMV_ft": "apnea",
            "regular_condition_coco_smv": "apnea",
            "regular_condition_coco": "apnea",
            "post_condition_unexp_pt": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_unexp_ft": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_pt": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_ft": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco_smv": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco": "(((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! apnea)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & (apnea & ((Y (! apnea)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! apnea)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! apnea)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! apnea) & (X apnea)) -> (X (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! apnea) & (X apnea)) -> (X (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not apnea)) or ( not (SI( (apnea and ((YtoPre( not apnea)) or FTP)), ( not (((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))) ))))",
            "component": "System"
        },
        "_id": "10379780-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6_4",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The self-test procedure shall confirm the expiratory valve is functional.\n\nAssuming \"expiratory valve\" is \"PS Exp\" in Figure 2.2",
        "comments": "Ois√≠n, v0.3.1: Changed the response from just \"satisfy testPSExp\" to \"satisfy testPSExpPass | testPSExpFail | testPSExpSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testPSExpPass | testPSExpFail | testPSExpSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testPSExpPass",
                "testPSExpFail",
                "testPSExpSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testPSExpPass | testPSExpFail | testPSExpSkip)",
            "responseTextRange": [
                29,
                81
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testPSExpPass | testPSExpFail | testPSExpSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_unexp_ft": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_SMV_pt": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_SMV_ft": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_coco_smv": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_coco": "((testPSExpPass or testPSExpFail) or testPSExpSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPSExpPass or testPSExpFail) or testPSExpSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPSExpPass or testPSExpFail) or testPSExpSkip)) )))))",
            "component": "System"
        },
        "_id": "1037be90-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN27_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "If apnea is detected, an apnea alarm shall be triggered. \n\nRationale: Clinician needs to be made aware of the fact that patient stops breathing",
        "comments": "Ois√≠n, v0.3.1: Noticed a typo, the response was \"shall satisfy anpeaAlarm\" instead of \"apneaAlarm\"",
        "fulltext": "if apnea System shall satisfy apneaAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "apnea",
                "apneaAlarm"
            ],
            "qualifier_word": "if",
            "pre_condition": "(apnea)",
            "regular_condition": "(apnea)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "post_condition": "(apneaAlarm)",
            "responseTextRange": [
                22,
                39
            ],
            "diagramVariables": "TC = <b><i>(apnea)</i></b>, Response = <b><i>(apneaAlarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(apnea)</i></b> is true and any point in the interval where <b><i>(apnea)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "apnea",
            "regular_condition_unexp_ft": "apnea",
            "regular_condition_SMV_pt": "apnea",
            "regular_condition_SMV_ft": "apnea",
            "regular_condition_coco_smv": "apnea",
            "regular_condition_coco": "apnea",
            "post_condition_unexp_pt": "apneaAlarm",
            "post_condition_unexp_ft": "apneaAlarm",
            "post_condition_SMV_pt": "apneaAlarm",
            "post_condition_SMV_ft": "apneaAlarm",
            "post_condition_coco_smv": "apneaAlarm",
            "post_condition_coco": "apneaAlarm",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U apneaAlarm)))) & (apnea -> ((! LAST) U apneaAlarm)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! apnea)) | (! ((! apneaAlarm) S ((! apneaAlarm) & (apnea & ((Y (! apnea)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! apnea)) | (! ((! apneaAlarm) S ((! apneaAlarm) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! apnea)) | (! ((! apneaAlarm) S ((! apneaAlarm) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U apneaAlarm)))) & (apnea -> ((! LAST) U apneaAlarm)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! apnea) & (X apnea)) -> (X (F apneaAlarm)))) & (apnea -> (F apneaAlarm)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! apnea) & (X apnea)) -> (X (F apneaAlarm)))) & (apnea -> (F apneaAlarm)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U apneaAlarm)))) & (apnea -> ((! LAST) U apneaAlarm)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not apnea)) or ( not (SI( (apnea and ((YtoPre( not apnea)) or FTP)), ( not apneaAlarm) ))))",
            "component": "System"
        },
        "_id": "1037e5a0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10_4",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Once all self-test steps have been completed successfully, it shall be possible to proceed to the Standby Mode.",
        "comments": "Ois√≠n, v0.3.1: changed \"when selfTestDone\" to \"when selfTestPass\". I must have missed this before, but with the changed this was the only use of selfTestDone left.",
        "fulltext": "when selfTestPassed System shall satisfy StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "selfTestPassed",
                "StandbyMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(selfTestPassed)",
            "regular_condition": "(selfTestPassed)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(StandbyMode)",
            "responseTextRange": [
                33,
                51
            ],
            "diagramVariables": "TC = <b><i>(selfTestPassed)</i></b>, Response = <b><i>(StandbyMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(selfTestPassed)</i></b> is true and any point in the interval where <b><i>(selfTestPassed)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "selfTestPassed",
            "regular_condition_unexp_ft": "selfTestPassed",
            "regular_condition_SMV_pt": "selfTestPassed",
            "regular_condition_SMV_ft": "selfTestPassed",
            "regular_condition_coco_smv": "selfTestPassed",
            "regular_condition_coco": "selfTestPassed",
            "post_condition_unexp_pt": "StandbyMode",
            "post_condition_unexp_ft": "StandbyMode",
            "post_condition_SMV_pt": "StandbyMode",
            "post_condition_SMV_ft": "StandbyMode",
            "post_condition_coco_smv": "StandbyMode",
            "post_condition_coco": "StandbyMode",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U StandbyMode)))) & (selfTestPassed -> ((! LAST) U StandbyMode)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! selfTestPassed)) | (! ((! StandbyMode) S ((! StandbyMode) & (selfTestPassed & ((Y (! selfTestPassed)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! selfTestPassed)) | (! ((! StandbyMode) S ((! StandbyMode) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! selfTestPassed)) | (! ((! StandbyMode) S ((! StandbyMode) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U StandbyMode)))) & (selfTestPassed -> ((! LAST) U StandbyMode)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F StandbyMode)))) & (selfTestPassed -> (F StandbyMode)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F StandbyMode)))) & (selfTestPassed -> (F StandbyMode)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U StandbyMode)))) & (selfTestPassed -> ((! LAST) U StandbyMode)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not selfTestPassed)) or ( not (SI( (selfTestPassed and ((YtoPre( not selfTestPassed)) or FTP)), ( not StandbyMode) ))))",
            "component": "System"
        },
        "_id": "10380cb0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_6",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide a log to include any change of Ventilatorv0.2 settings, including the value applied",
        "comments": "Ois√≠n: changed variables to specify that these are ventilator settings",
        "fulltext": "when ventilatorSettingsChanged System shall satisfy logVentilatorSettings",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "ventilatorSettingsChanged",
                "logVentilatorSettings"
            ],
            "qualifier_word": "when",
            "pre_condition": "(ventilatorSettingsChanged)",
            "regular_condition": "(ventilatorSettingsChanged)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "System",
            "componentTextRange": [
                31,
                36
            ],
            "post_condition": "(logVentilatorSettings)",
            "responseTextRange": [
                44,
                72
            ],
            "diagramVariables": "TC = <b><i>(ventilatorSettingsChanged)</i></b>, Response = <b><i>(logVentilatorSettings)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ventilatorSettingsChanged)</i></b> is true and any point in the interval where <b><i>(ventilatorSettingsChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ventilatorSettingsChanged",
            "regular_condition_unexp_ft": "ventilatorSettingsChanged",
            "regular_condition_SMV_pt": "ventilatorSettingsChanged",
            "regular_condition_SMV_ft": "ventilatorSettingsChanged",
            "regular_condition_coco_smv": "ventilatorSettingsChanged",
            "regular_condition_coco": "ventilatorSettingsChanged",
            "post_condition_unexp_pt": "logVentilatorSettings",
            "post_condition_unexp_ft": "logVentilatorSettings",
            "post_condition_SMV_pt": "logVentilatorSettings",
            "post_condition_SMV_ft": "logVentilatorSettings",
            "post_condition_coco_smv": "logVentilatorSettings",
            "post_condition_coco": "logVentilatorSettings",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! ventilatorSettingsChanged) & ((! LAST) & (X ventilatorSettingsChanged))) -> (X ((! LAST) U logVentilatorSettings)))) & (ventilatorSettingsChanged -> ((! LAST) U logVentilatorSettings)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! ventilatorSettingsChanged)) | (! ((! logVentilatorSettings) S ((! logVentilatorSettings) & (ventilatorSettingsChanged & ((Y (! ventilatorSettingsChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! ventilatorSettingsChanged)) | (! ((! logVentilatorSettings) S ((! logVentilatorSettings) & (ventilatorSettingsChanged & ((Y (! ventilatorSettingsChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! ventilatorSettingsChanged)) | (! ((! logVentilatorSettings) S ((! logVentilatorSettings) & (ventilatorSettingsChanged & ((Y (! ventilatorSettingsChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! ventilatorSettingsChanged) & ((! LAST) & (X ventilatorSettingsChanged))) -> (X ((! LAST) U logVentilatorSettings)))) & (ventilatorSettingsChanged -> ((! LAST) U logVentilatorSettings)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ventilatorSettingsChanged) & (X ventilatorSettingsChanged)) -> (X (F logVentilatorSettings)))) & (ventilatorSettingsChanged -> (F logVentilatorSettings)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! ventilatorSettingsChanged) & (X ventilatorSettingsChanged)) -> (X (F logVentilatorSettings)))) & (ventilatorSettingsChanged -> (F logVentilatorSettings)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! ventilatorSettingsChanged) & ((! LAST) & (X ventilatorSettingsChanged))) -> (X ((! LAST) U logVentilatorSettings)))) & (ventilatorSettingsChanged -> ((! LAST) U logVentilatorSettings)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not ventilatorSettingsChanged)) or ( not (SI( (ventilatorSettingsChanged and ((YtoPre( not ventilatorSettingsChanged)) or FTP)), ( not logVentilatorSettings) ))))",
            "component": "System"
        },
        "_id": "10385ad0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have a self-test procedure that ensures the system and its accessories are fully functional and the alarms work.\n\nISO80601-2-12201.7.9.2.8.101",
        "comments": "Oisin, v0.3: Changed \"shall satisfy selfTestDone\" to \"shall eventually satisfy selfTestPass | selfTestFail\". Adds some more detail and defines selfTestFail for FUN7. Maybe the eventually should instead be \"before standByMode\"?\nMatt, v0.4: \"SelfTestPass/Fail\" -> \"SelfTestPassed/Failed\" to be consistent with Fig 2.1 (from v1.3 onwards) and with each other's tenses. ",
        "fulltext": "in SelfTestMode System shall eventually satisfy selfTestPassed | selfTestFailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "selfTestPassed",
                "selfTestFailed"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "timingTextRange": [
                29,
                38
            ],
            "post_condition": "(selfTestPassed | selfTestFailed)",
            "responseTextRange": [
                40,
                78
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(selfTestPassed | selfTestFailed)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "(selfTestPassed | selfTestFailed)",
            "post_condition_unexp_ft": "(selfTestPassed | selfTestFailed)",
            "post_condition_SMV_pt": "(selfTestPassed | selfTestFailed)",
            "post_condition_SMV_ft": "(selfTestPassed | selfTestFailed)",
            "post_condition_coco_smv": "(selfTestPassed | selfTestFailed)",
            "post_condition_coco": "(selfTestPassed or selfTestFailed)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U (selfTestPassed | selfTestFailed))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (selfTestPassed | selfTestFailed))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or selfTestFailed)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or selfTestFailed)) )))))",
            "component": "System"
        },
        "_id": "103881e0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Once the start-up has been completed successfully the user must select ‚ÄúNew Patient‚Äù or ‚ÄúResume Ventilation‚Äù before the system transitions to self-test mode \n\nRationale: in order to quickly resume ventilation for the same patient in case the unit had to be powered down",
        "comments": "Oisin, v0.3: Added the transition to selfTestMode, since I think that aligns with the NL better. The NL is written more like a precondition on selfTestMode, but I'm not sure if we should translate it like that\n\nOis√≠n, v0.3.1: After discussion, reverted this change. The transition to selfTestMode is covered in the child requirements.",
        "fulltext": "when startUpDone System shall satisfy newPatient | resumeVentilation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "startUpDone",
                "newPatient",
                "resumeVentilation"
            ],
            "qualifier_word": "when",
            "pre_condition": "(startUpDone)",
            "regular_condition": "(startUpDone)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "System",
            "componentTextRange": [
                17,
                22
            ],
            "post_condition": "(newPatient | resumeVentilation)",
            "responseTextRange": [
                30,
                67
            ],
            "diagramVariables": "TC = <b><i>(startUpDone)</i></b>, Response = <b><i>(newPatient | resumeVentilation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(startUpDone)</i></b> is true and any point in the interval where <b><i>(startUpDone)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "startUpDone",
            "regular_condition_unexp_ft": "startUpDone",
            "regular_condition_SMV_pt": "startUpDone",
            "regular_condition_SMV_ft": "startUpDone",
            "regular_condition_coco_smv": "startUpDone",
            "regular_condition_coco": "startUpDone",
            "post_condition_unexp_pt": "(newPatient | resumeVentilation)",
            "post_condition_unexp_ft": "(newPatient | resumeVentilation)",
            "post_condition_SMV_pt": "(newPatient | resumeVentilation)",
            "post_condition_SMV_ft": "(newPatient | resumeVentilation)",
            "post_condition_coco_smv": "(newPatient | resumeVentilation)",
            "post_condition_coco": "(newPatient or resumeVentilation)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! startUpDone) & ((! LAST) & (X startUpDone))) -> (X ((! LAST) U (newPatient | resumeVentilation))))) & (startUpDone -> ((! LAST) U (newPatient | resumeVentilation))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! startUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (startUpDone & ((Y (! startUpDone)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! startUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (startUpDone & ((Y (! startUpDone)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! startUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (startUpDone & ((Y (! startUpDone)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! startUpDone) & ((! LAST) & (X startUpDone))) -> (X ((! LAST) U (newPatient | resumeVentilation))))) & (startUpDone -> ((! LAST) U (newPatient | resumeVentilation))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! startUpDone) & (X startUpDone)) -> (X (F (newPatient | resumeVentilation))))) & (startUpDone -> (F (newPatient | resumeVentilation))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! startUpDone) & (X startUpDone)) -> (X (F (newPatient | resumeVentilation))))) & (startUpDone -> (F (newPatient | resumeVentilation))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! startUpDone) & ((! LAST) & (X startUpDone))) -> (X ((! LAST) U (newPatient | resumeVentilation))))) & (startUpDone -> ((! LAST) U (newPatient | resumeVentilation))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not startUpDone)) or ( not (SI( (startUpDone and ((YtoPre( not startUpDone)) or FTP)), ( not (newPatient or resumeVentilation)) ))))",
            "component": "System"
        },
        "_id": "1038a8f0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN4",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall implement the following operating modes:\n\n1. Start-up Mode: The Start-up Mode initializes the system and is part of a start-up procedure to get the system ready to be used to ventilate a patient. \n\n2. Self-test Mode: The Self-test Mode ensures that the system is fully functional and is part of the start-up procedure to get the system ready to be used to ventilate a new patient\n\n3. Standby Mode: In the Standby Mode the ventilation is ready for ventilating a patient, ventilation is off, and ventilation parameters can be set.\n\n4. Pressure Controlled Ventilation Mode (PCV): Pressure Controlled Ventilation mode is a normal operating mode that is used when patients have no spontaneous respiration.\n\n5. Pressure Support Ventilation Mode (PSV): Pressure Support Ventilation is a normal operating mode that during which the patient initiates each breath and the Ventilator supports the breath at the appropriate pressure level.\n\n6. Fail-safe mode: the controller detects a severe condition that required an alarm to be raised and to bring the machine to a fail-safe mode (in valve closed and out valve open).\n\nRationale: Pressure Controlled and Pressure Support Ventilation are the two basic modes of pressure regulated support needed for COVID-19 patients. A Start-up mode is needed to properly ensure that the system is fully functional before starting the ventilation of a patient. Pressure Controlled Ventilation is needed for patients in respiratory failure or fully sedated. Pressure Support Ventilation is needed for patients able to breathe on their own, in particular during the weaning process.",
        "comments": "AlarmTestMode removed in v1.2 of the Natural Language specification",
        "fulltext": "System shall satisfy StartUpMode | SelfTestMode | StandbyMode | sPCVMode | PSVMode | FailSafeMode ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "SelfTestMode",
                "StandbyMode",
                "sPCVMode",
                "PSVMode",
                "FailSafeMode"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(StartUpMode | SelfTestMode | StandbyMode | sPCVMode | PSVMode | FailSafeMode)",
            "responseTextRange": [
                13,
                96
            ],
            "diagramVariables": "Response = <b><i>(StartUpMode | SelfTestMode | StandbyMode | sPCVMode | PSVMode | FailSafeMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_unexp_ft": "(((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_SMV_pt": "(((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_SMV_ft": "(((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_coco_smv": "(((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_coco": "(((((StartUpMode or SelfTestMode) or StandbyMode) or sPCVMode) or PSVMode) or FailSafeMode)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | sPCVMode) | PSVMode) | FailSafeMode))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((((((StartUpMode or SelfTestMode) or StandbyMode) or sPCVMode) or PSVMode) or FailSafeMode)))",
            "component": "System"
        },
        "_id": "1038d000-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN17",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall measure and display the flow of gas delivered to the patient per breathing cycle. \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function\n\n\nAssuming that the \"flow of gas...\" is the same as Fl1 in Figure 2.2",
        "comments": "",
        "fulltext": "System shall satisfy measureFl1 & display Fl1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureFl1",
                "display"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureFl1 & display)",
            "responseTextRange": [
                13,
                40
            ],
            "diagramVariables": "Response = <b><i>(measureFl1 & display)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureFl1 & display)",
            "post_condition_unexp_ft": "(measureFl1 & display)",
            "post_condition_SMV_pt": "(measureFl1 & display)",
            "post_condition_SMV_ft": "(measureFl1 & display)",
            "post_condition_coco_smv": "(measureFl1 & display)",
            "post_condition_coco": "(measureFl1 and display)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureFl1 & display))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureFl1 & display))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureFl1 & display))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureFl1 & display))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureFl1 & display))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureFl1 & display))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureFl1 & display))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureFl1 & display))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureFl1 and display)))",
            "component": "System"
        },
        "_id": "1038f710-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN32",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In a worst-case failure, the controller shall leave the system in a state that allows the patient to inhale and exhale unimpeded. \n\nRationale: patient safety is primary concern",
        "comments": "This seems to repeat part of FUN31. But also doesn't specify what patientSafe (my variable, obviously) means. ",
        "fulltext": "in FailSafeMode System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "FailSafeMode",
                "patientSafe"
            ],
            "scope_mode": "FailSafeMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                29,
                47
            ],
            "diagramVariables": "M = <b><i>FailSafeMode</i></b>,, Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>FailSafeMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "FailSafeMode",
            "scope_mode_coco": "FailSafeMode",
            "scope_mode_ft": "FailSafeMode",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_FailSafeMode & (! LAST))) | (X ((! (Lin_FailSafeMode | LAST)) U patientSafe)))) & (FailSafeMode -> ((! (Lin_FailSafeMode | LAST)) U patientSafe)))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_FailSafeMode -> (Y (! ((! patientSafe) S ((! patientSafe) & Fin_FailSafeMode)))))) & (((! Lin_FailSafeMode) S ((! Lin_FailSafeMode) & Fin_FailSafeMode)) -> (! ((! patientSafe) S ((! patientSafe) & Fin_FailSafeMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! FailSafeMode) & (Y FailSafeMode)) -> (Y (! ((! patientSafe) S ((! patientSafe) & (FailSafeMode & (Z (! FailSafeMode))))))))) & (((! ((! FailSafeMode) & (Y FailSafeMode))) S ((! ((! FailSafeMode) & (Y FailSafeMode))) & (FailSafeMode & (Z (! FailSafeMode))))) -> (! ((! patientSafe) S ((! patientSafe) & (FailSafeMode & (Z (! FailSafeMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! FailSafeMode) & (Y FailSafeMode)) -> (Y (! ((! patientSafe) S ((! patientSafe) & (FailSafeMode & ((! (Y TRUE)) | (Y (! FailSafeMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! FailSafeMode) & (! LAST)) & (X FailSafeMode)) & (! LAST))) | (X ((! (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) | LAST)) U patientSafe)))) & (FailSafeMode -> ((! (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) | LAST)) U patientSafe)))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! FailSafeMode) ) & (X FailSafeMode))) | (X ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe)))) & (FailSafeMode -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! FailSafeMode) ) & (X FailSafeMode))) | (X ((F ((FailSafeMode ) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe))))) & (FailSafeMode -> ((F ((FailSafeMode ) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! FailSafeMode) & (! LAST)) & (X FailSafeMode)) & (! LAST))) | (X (((! LAST) U ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U patientSafe))))) & (FailSafeMode -> (((! LAST) U ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U patientSafe))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not FailSafeMode) and (YtoPre(FailSafeMode))) => (YtoPre( not (SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not patientSafe) )))))) and ((SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not (( not FailSafeMode) and (YtoPre(FailSafeMode)))) )) => ( not (SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not patientSafe) )))))",
            "component": "System"
        },
        "_id": "10391e20-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN23_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The switch to PSV shall occur only after the PSV parameters have been confirmed and until that has happened the PCV ventilation shall continue",
        "comments": "",
        "fulltext": "in PCVMode System shall satisfy ( (confirmPSVParameters & PSVMode) | (!confirmPSVParamters & PCVMode) )& ventilating",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "confirmPSVParameters",
                "PSVMode",
                "confirmPSVParamters",
                "ventilating"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( confirmPSVParameters & PSVMode ) | ( ! confirmPSVParamters & PCVMode ) ) & ventilating)",
            "responseTextRange": [
                24,
                115
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(( ( confirmPSVParameters & PSVMode ) | ( ! confirmPSVParamters & PCVMode ) ) & ventilating)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)",
            "post_condition_unexp_ft": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)",
            "post_condition_SMV_pt": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)",
            "post_condition_SMV_ft": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)",
            "post_condition_coco_smv": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)",
            "post_condition_coco": "(((confirmPSVParameters and PSVMode) or (( not confirmPSVParamters) and PCVMode)) and ventilating)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParamters) & PCVMode)) & ventilating)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (((confirmPSVParameters and PSVMode) or (( not confirmPSVParamters) and PCVMode)) and ventilating)) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (((confirmPSVParameters and PSVMode) or (( not confirmPSVParamters) and PCVMode)) and ventilating)) )))))",
            "component": "System"
        },
        "_id": "10394530-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_7",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide a log to include any change of alarm settings, including the value applied",
        "comments": "",
        "fulltext": "when alarmSettingsChanged System shall satisfy logAlarmSettings",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "alarmSettingsChanged",
                "logAlarmSettings"
            ],
            "qualifier_word": "when",
            "pre_condition": "(alarmSettingsChanged)",
            "regular_condition": "(alarmSettingsChanged)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "post_condition": "(logAlarmSettings)",
            "responseTextRange": [
                39,
                62
            ],
            "diagramVariables": "TC = <b><i>(alarmSettingsChanged)</i></b>, Response = <b><i>(logAlarmSettings)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(alarmSettingsChanged)</i></b> is true and any point in the interval where <b><i>(alarmSettingsChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "alarmSettingsChanged",
            "regular_condition_unexp_ft": "alarmSettingsChanged",
            "regular_condition_SMV_pt": "alarmSettingsChanged",
            "regular_condition_SMV_ft": "alarmSettingsChanged",
            "regular_condition_coco_smv": "alarmSettingsChanged",
            "regular_condition_coco": "alarmSettingsChanged",
            "post_condition_unexp_pt": "logAlarmSettings",
            "post_condition_unexp_ft": "logAlarmSettings",
            "post_condition_SMV_pt": "logAlarmSettings",
            "post_condition_SMV_ft": "logAlarmSettings",
            "post_condition_coco_smv": "logAlarmSettings",
            "post_condition_coco": "logAlarmSettings",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! alarmSettingsChanged) & ((! LAST) & (X alarmSettingsChanged))) -> (X ((! LAST) U logAlarmSettings)))) & (alarmSettingsChanged -> ((! LAST) U logAlarmSettings)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! alarmSettingsChanged)) | (! ((! logAlarmSettings) S ((! logAlarmSettings) & (alarmSettingsChanged & ((Y (! alarmSettingsChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! alarmSettingsChanged)) | (! ((! logAlarmSettings) S ((! logAlarmSettings) & (alarmSettingsChanged & ((Y (! alarmSettingsChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! alarmSettingsChanged)) | (! ((! logAlarmSettings) S ((! logAlarmSettings) & (alarmSettingsChanged & ((Y (! alarmSettingsChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! alarmSettingsChanged) & ((! LAST) & (X alarmSettingsChanged))) -> (X ((! LAST) U logAlarmSettings)))) & (alarmSettingsChanged -> ((! LAST) U logAlarmSettings)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! alarmSettingsChanged) & (X alarmSettingsChanged)) -> (X (F logAlarmSettings)))) & (alarmSettingsChanged -> (F logAlarmSettings)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! alarmSettingsChanged) & (X alarmSettingsChanged)) -> (X (F logAlarmSettings)))) & (alarmSettingsChanged -> (F logAlarmSettings)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! alarmSettingsChanged) & ((! LAST) & (X alarmSettingsChanged))) -> (X ((! LAST) U logAlarmSettings)))) & (alarmSettingsChanged -> ((! LAST) U logAlarmSettings)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not alarmSettingsChanged)) or ( not (SI( (alarmSettingsChanged and ((YtoPre( not alarmSettingsChanged)) or FTP)), ( not logAlarmSettings) ))))",
            "component": "System"
        },
        "_id": "10396c40-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10_5",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In Standby Mode ventilation shall be off and it shall be possible to adjust all user-controlled parameters for ventilation and alarms before connecting to the patient and starting patient ventilation.",
        "comments": "",
        "fulltext": "in StandbyMode System shall satisfy ventilationOff & ventilationParmsAdjustable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StandbyMode",
                "ventilationOff",
                "ventilationParmsAdjustable"
            ],
            "scope_mode": "StandbyMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(ventilationOff & ventilationParmsAdjustable)",
            "responseTextRange": [
                28,
                78
            ],
            "diagramVariables": "M = <b><i>StandbyMode</i></b>,, Response = <b><i>(ventilationOff & ventilationParmsAdjustable)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StandbyMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StandbyMode",
            "scope_mode_coco": "StandbyMode",
            "scope_mode_ft": "StandbyMode",
            "post_condition_unexp_pt": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_unexp_ft": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_SMV_pt": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_SMV_ft": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_coco_smv": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_coco": "(ventilationOff and ventilationParmsAdjustable)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StandbyMode & (! LAST))) | (X ((! (Lin_StandbyMode | LAST)) U (ventilationOff & ventilationParmsAdjustable))))) & (StandbyMode -> ((! (Lin_StandbyMode | LAST)) U (ventilationOff & ventilationParmsAdjustable))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StandbyMode -> (Y (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & Fin_StandbyMode)))))) & (((! Lin_StandbyMode) S ((! Lin_StandbyMode) & Fin_StandbyMode)) -> (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & Fin_StandbyMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StandbyMode) & (Y StandbyMode)) -> (Y (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & (StandbyMode & (Z (! StandbyMode))))))))) & (((! ((! StandbyMode) & (Y StandbyMode))) S ((! ((! StandbyMode) & (Y StandbyMode))) & (StandbyMode & (Z (! StandbyMode))))) -> (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & (StandbyMode & (Z (! StandbyMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StandbyMode) & (Y StandbyMode)) -> (Y (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & (StandbyMode & ((! (Y TRUE)) | (Y (! StandbyMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U (ventilationOff & ventilationParmsAdjustable))))) & (StandbyMode -> ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U (ventilationOff & ventilationParmsAdjustable))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable))))) & (StandbyMode -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))) & (StandbyMode -> ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))) & (StandbyMode -> (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StandbyMode) and (YtoPre(StandbyMode))) => (YtoPre( not (SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (ventilationOff and ventilationParmsAdjustable)) )))))) and ((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (( not StandbyMode) and (YtoPre(StandbyMode)))) )) => ( not (SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (ventilationOff and ventilationParmsAdjustable)) )))))",
            "component": "System"
        },
        "_id": "10399350-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN5_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall indicate to the user that the initialization process has been completed successfully or failed. In case of a failure the user shall be warned that the system is out-of-service. In addition, any other operations shall be not allowed. \n\nRationale: only a fully functional unit shall be used with a patient",
        "comments": "Assumes that \"other operations shall not be allowed\" is the fail safe mode, as per Fig 2.1\n\nOis√≠n, v0.3: Added brackets after the '|' for clarity",
        "fulltext": "in StartUpMode System shall satisfy initDone | (initFail & outOfServiceWarning &  FailSafeMode)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "initDone",
                "initFail",
                "outOfServiceWarning",
                "FailSafeMode"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(initDone | ( initFail & outOfServiceWarning & FailSafeMode ))",
            "responseTextRange": [
                28,
                94
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(initDone | ( initFail & outOfServiceWarning & FailSafeMode ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "(initDone | ((initFail & outOfServiceWarning) & FailSafeMode))",
            "post_condition_unexp_ft": "(initDone | ((initFail & outOfServiceWarning) & FailSafeMode))",
            "post_condition_SMV_pt": "(initDone | ((initFail & outOfServiceWarning) & FailSafeMode))",
            "post_condition_SMV_ft": "(initDone | ((initFail & outOfServiceWarning) & FailSafeMode))",
            "post_condition_coco_smv": "(initDone | ((initFail & outOfServiceWarning) & FailSafeMode))",
            "post_condition_coco": "(initDone or ((initFail and outOfServiceWarning) and FailSafeMode))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode)))))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode)))))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode)))))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (initDone | ((initFail & outOfServiceWarning) & FailSafeMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (initDone or ((initFail and outOfServiceWarning) and FailSafeMode))) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (initDone or ((initFail and outOfServiceWarning) and FailSafeMode))) )))))",
            "component": "System"
        },
        "_id": "1039ba60-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN23_3",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The switch to PSV shall occur at the end of a PCV inspiratory time",
        "comments": "Ois√≠n, v0.3: changed from \"shall satisfy if PCVInspTimeEnd then PSVMode | PCVMode\" to shall satisfy !(PCVInspTimeEnd and PSVMode); I think this requirement really specifies when the switch *can't* happen",
        "fulltext": "in PCVMode when PSVModeSelected System shall satisfy !(PCVInspTimeEnd & PSVMode)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVModeSelected",
                "PCVInspTimeEnd",
                "PSVMode"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                11,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(! ( PCVInspTimeEnd & PSVMode ))",
            "responseTextRange": [
                45,
                79
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(! ( PCVInspTimeEnd & PSVMode ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_unexp_ft": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_SMV_pt": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_SMV_ft": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_coco_smv": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_coco": "( not (PCVInspTimeEnd and PSVMode))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (! (PCVInspTimeEnd & PSVMode))) S ((! (! (PCVInspTimeEnd & PSVMode))) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (! (PCVInspTimeEnd & PSVMode))) S ((! (! (PCVInspTimeEnd & PSVMode))) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((PCVInspTimeEnd & PSVMode) S ((PCVInspTimeEnd & PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((PCVInspTimeEnd & PSVMode) S ((PCVInspTimeEnd & PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! (! (PCVInspTimeEnd & PSVMode))) S ((! (! (PCVInspTimeEnd & PSVMode))) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not ( not (PCVInspTimeEnd and PSVMode))) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not ( not (PCVInspTimeEnd and PSVMode))) ))))))",
            "component": "System"
        },
        "_id": "1039e170-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN33",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Any power failure shall leave the system in a state that allows the patient to inhale and exhale unimpeded. \n\nRationale: patient safety is primary concern",
        "comments": "",
        "fulltext": "if powerFailure System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerFailure",
                "patientSafe"
            ],
            "qualifier_word": "if",
            "pre_condition": "(powerFailure)",
            "regular_condition": "(powerFailure)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                29,
                47
            ],
            "diagramVariables": "TC = <b><i>(powerFailure)</i></b>, Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerFailure)</i></b> is true and any point in the interval where <b><i>(powerFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerFailure",
            "regular_condition_unexp_ft": "powerFailure",
            "regular_condition_SMV_pt": "powerFailure",
            "regular_condition_SMV_ft": "powerFailure",
            "regular_condition_coco_smv": "powerFailure",
            "regular_condition_coco": "powerFailure",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((! LAST) U patientSafe)))) & (powerFailure -> ((! LAST) U patientSafe)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! powerFailure)) | (! ((! patientSafe) S ((! patientSafe) & (powerFailure & ((Y (! powerFailure)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! powerFailure)) | (! ((! patientSafe) S ((! patientSafe) & (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! powerFailure)) | (! ((! patientSafe) S ((! patientSafe) & (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((! LAST) U patientSafe)))) & (powerFailure -> ((! LAST) U patientSafe)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X (F patientSafe)))) & (powerFailure -> (F patientSafe)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X (F patientSafe)))) & (powerFailure -> (F patientSafe)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((! LAST) U patientSafe)))) & (powerFailure -> ((! LAST) U patientSafe)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not powerFailure)) or ( not (SI( (powerFailure and ((YtoPre( not powerFailure)) or FTP)), ( not patientSafe) ))))",
            "component": "System"
        },
        "_id": "103a2f90-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6_5",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The self-test procedure shall confirm the oxygen sensor is calibrated.\n\nAssuming that the \"oxygen sensor\" is \"OS\" in Figure 2.2 (\"OS\" is \"oxygen concentration sensor\")",
        "comments": "Ois√≠n, v0.3.1: Changed the response from just \"satisfy testOS\" to \"satisfy testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testOxygenSensorPass",
                "testOxygenSensorFail",
                "testOxygenSensorSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip)",
            "responseTextRange": [
                29,
                102
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_unexp_ft": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_SMV_pt": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_SMV_ft": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_coco_smv": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_coco": "((testOxygenSensorPass or testOxygenSensorFail) or testOxygenSensorSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testOxygenSensorPass or testOxygenSensorFail) or testOxygenSensorSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testOxygenSensorPass or testOxygenSensorFail) or testOxygenSensorSkip)) )))))",
            "component": "System"
        },
        "_id": "103a56a0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN11",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall connect to pressurized gas supply of oxygen and medical air and accept pressures up to 5.2 bar. \n\nRationale: this covers the range of pressures available in hospital setting\n\nAssuming that the connection goes through the \"GB:Gas Blender with PS (pressure sensor)\" as per Fig 2.2",
        "comments": "I think this is a partial formalisation",
        "fulltext": "System shall satisfy GBPS <= 5.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "GBPS"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(GBPS <= 5.2)",
            "responseTextRange": [
                13,
                31
            ],
            "diagramVariables": "Response = <b><i>(GBPS <= 5.2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(GBPS <= 5.2)",
            "post_condition_unexp_ft": "(GBPS <= 5.2)",
            "post_condition_SMV_pt": "(GBPS <= 5.2)",
            "post_condition_SMV_ft": "(GBPS <= 5.2)",
            "post_condition_coco_smv": "(GBPS <= 5.2)",
            "post_condition_coco": "(GBPS <= 5.2)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (GBPS <= 5.2))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (GBPS <= 5.2))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (GBPS <= 5.2))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (GBPS <= 5.2))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (GBPS <= 5.2))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (GBPS <= 5.2))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (GBPS <= 5.2))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (GBPS <= 5.2))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((GBPS <= 5.2)))",
            "component": "System"
        },
        "_id": "103a7db0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_8",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide a log to include change of patient, including the patient attributes;",
        "comments": "",
        "fulltext": "when patientChanged System shall satisfy logPatientChange",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "patientChanged",
                "logPatientChange"
            ],
            "qualifier_word": "when",
            "pre_condition": "(patientChanged)",
            "regular_condition": "(patientChanged)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(logPatientChange)",
            "responseTextRange": [
                33,
                56
            ],
            "diagramVariables": "TC = <b><i>(patientChanged)</i></b>, Response = <b><i>(logPatientChange)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(patientChanged)</i></b> is true and any point in the interval where <b><i>(patientChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "patientChanged",
            "regular_condition_unexp_ft": "patientChanged",
            "regular_condition_SMV_pt": "patientChanged",
            "regular_condition_SMV_ft": "patientChanged",
            "regular_condition_coco_smv": "patientChanged",
            "regular_condition_coco": "patientChanged",
            "post_condition_unexp_pt": "logPatientChange",
            "post_condition_unexp_ft": "logPatientChange",
            "post_condition_SMV_pt": "logPatientChange",
            "post_condition_SMV_ft": "logPatientChange",
            "post_condition_coco_smv": "logPatientChange",
            "post_condition_coco": "logPatientChange",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! patientChanged) & ((! LAST) & (X patientChanged))) -> (X ((! LAST) U logPatientChange)))) & (patientChanged -> ((! LAST) U logPatientChange)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! patientChanged)) | (! ((! logPatientChange) S ((! logPatientChange) & (patientChanged & ((Y (! patientChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! patientChanged)) | (! ((! logPatientChange) S ((! logPatientChange) & (patientChanged & ((Y (! patientChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! patientChanged)) | (! ((! logPatientChange) S ((! logPatientChange) & (patientChanged & ((Y (! patientChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! patientChanged) & ((! LAST) & (X patientChanged))) -> (X ((! LAST) U logPatientChange)))) & (patientChanged -> ((! LAST) U logPatientChange)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! patientChanged) & (X patientChanged)) -> (X (F logPatientChange)))) & (patientChanged -> (F logPatientChange)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! patientChanged) & (X patientChanged)) -> (X (F logPatientChange)))) & (patientChanged -> (F logPatientChange)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! patientChanged) & ((! LAST) & (X patientChanged))) -> (X ((! LAST) U logPatientChange)))) & (patientChanged -> ((! LAST) U logPatientChange)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not patientChanged)) or ( not (SI( (patientChanged and ((YtoPre( not patientChanged)) or FTP)), ( not logPatientChange) ))))",
            "component": "System"
        },
        "_id": "103aa4c0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN24",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have a pressure support ventilation (PSV) mode, as characterized by the following plots of pressure and flow versus time. [Plots are on page 12 of the spec] \n\nRationale: In PSV mode, the Ventilatorv0.2 supports the patient who is supposed to breathe spontaneously. PSV is needed to wean patients off the ventilation by allowing them to strengthen the muscles involved in breathing. PSV is not suitable for patients unable to initiate breaths on their own.",
        "comments": "Not sure how to formalise this one",
        "fulltext": "",
        "semantics": {},
        "_id": "103acbd0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN21_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "A new breathing cycle shall be initiated by a sudden drop in pressure below a user-settable threshold (Inhale Trigger Sensitivity). \n\nRationale: In a pressure-regulated Ventilatorv0.2, the speed of pressure drop initiated by the patient is the easiest way to detect the spontaneous breathing attempt",
        "comments": "Ois√≠n, v0.3: changed this and FUN25 from \"when pressureDrop\" to \"when inspiratoryPressure < InhaleTriggerSensitivity\". Almost certain this requirement and FUN21_2 should start with 'in PCVMode' but for the sake of accurate translation I'll leave it out for now",
        "fulltext": "when inspiratoryPressure < InhaleTriggerSensitivityPCV System shall satisfy breathingCycleStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "inspiratoryPressure",
                "InhaleTriggerSensitivityPCV",
                "breathingCycleStart"
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "conditionTextRange": [
                0,
                53
            ],
            "component_name": "System",
            "componentTextRange": [
                55,
                60
            ],
            "post_condition": "(breathingCycleStart)",
            "responseTextRange": [
                68,
                94
            ],
            "diagramVariables": "TC = <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPCV)</i></b>, Response = <b><i>(breathingCycleStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPCV)</i></b> is true and any point in the interval where <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPCV)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_unexp_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_SMV_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_SMV_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_coco_smv": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_coco": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "post_condition_unexp_pt": "breathingCycleStart",
            "post_condition_unexp_ft": "breathingCycleStart",
            "post_condition_SMV_pt": "breathingCycleStart",
            "post_condition_SMV_ft": "breathingCycleStart",
            "post_condition_coco_smv": "breathingCycleStart",
            "post_condition_coco": "breathingCycleStart",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & ((! LAST) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV)))) -> (X ((! LAST) U breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> ((! LAST) U breathingCycleStart)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & ((! LAST) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV)))) -> (X ((! LAST) U breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> ((! LAST) U breathingCycleStart)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV))) -> (X (F breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> (F breathingCycleStart)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV))) -> (X (F breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> (F breathingCycleStart)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & ((! LAST) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV)))) -> (X ((! LAST) U breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> ((! LAST) U breathingCycleStart)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (inspiratoryPressure < InhaleTriggerSensitivityPCV))) or ( not (SI( ((inspiratoryPressure < InhaleTriggerSensitivityPCV) and ((YtoPre( not (inspiratoryPressure < InhaleTriggerSensitivityPCV))) or FTP)), ( not breathingCycleStart) ))))",
            "component": "System"
        },
        "_id": "103b19f0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN12",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide breathing air through a standard medical supply single-limbed patient circuit with a pneumatically controlled diaphragm expiration valve. \n\nRationale: this is readily available medical supply",
        "comments": "Not Formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103b4100-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6_6",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The self-test procedure shall confirm the local alarms are functional.",
        "comments": "Ois√≠n, v0.3.1: Changed the response from just \"satisfy testAlarms\" to \"satisfy testAlarmsPass | testAlarmsFail | testAlarmsSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testAlarmsPass | testAlarmsFail | testAlarmsSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testAlarmsPass",
                "testAlarmsFail",
                "testAlarmsSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testAlarmsPass | testAlarmsFail | testAlarmsSkip)",
            "responseTextRange": [
                29,
                84
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testAlarmsPass | testAlarmsFail | testAlarmsSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_unexp_ft": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_SMV_pt": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_SMV_ft": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_coco_smv": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_coco": "((testAlarmsPass or testAlarmsFail) or testAlarmsSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testAlarmsPass or testAlarmsFail) or testAlarmsSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testAlarmsPass or testAlarmsFail) or testAlarmsSkip)) )))))",
            "component": "System"
        },
        "_id": "103b6810-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN34",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Any failure of the gas supply shall leave the system in a state that allows the patient to inhale and exhale unimpeded. \n\nRationale: patient safety is primary concern",
        "comments": "",
        "fulltext": "if gasSupplyFailure System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "gasSupplyFailure",
                "patientSafe"
            ],
            "qualifier_word": "if",
            "pre_condition": "(gasSupplyFailure)",
            "regular_condition": "(gasSupplyFailure)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                33,
                51
            ],
            "diagramVariables": "TC = <b><i>(gasSupplyFailure)</i></b>, Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(gasSupplyFailure)</i></b> is true and any point in the interval where <b><i>(gasSupplyFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "gasSupplyFailure",
            "regular_condition_unexp_ft": "gasSupplyFailure",
            "regular_condition_SMV_pt": "gasSupplyFailure",
            "regular_condition_SMV_ft": "gasSupplyFailure",
            "regular_condition_coco_smv": "gasSupplyFailure",
            "regular_condition_coco": "gasSupplyFailure",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! gasSupplyFailure) & ((! LAST) & (X gasSupplyFailure))) -> (X ((! LAST) U patientSafe)))) & (gasSupplyFailure -> ((! LAST) U patientSafe)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! gasSupplyFailure)) | (! ((! patientSafe) S ((! patientSafe) & (gasSupplyFailure & ((Y (! gasSupplyFailure)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! gasSupplyFailure)) | (! ((! patientSafe) S ((! patientSafe) & (gasSupplyFailure & ((Y (! gasSupplyFailure)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! gasSupplyFailure)) | (! ((! patientSafe) S ((! patientSafe) & (gasSupplyFailure & ((Y (! gasSupplyFailure)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! gasSupplyFailure) & ((! LAST) & (X gasSupplyFailure))) -> (X ((! LAST) U patientSafe)))) & (gasSupplyFailure -> ((! LAST) U patientSafe)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! gasSupplyFailure) & (X gasSupplyFailure)) -> (X (F patientSafe)))) & (gasSupplyFailure -> (F patientSafe)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! gasSupplyFailure) & (X gasSupplyFailure)) -> (X (F patientSafe)))) & (gasSupplyFailure -> (F patientSafe)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! gasSupplyFailure) & ((! LAST) & (X gasSupplyFailure))) -> (X ((! LAST) U patientSafe)))) & (gasSupplyFailure -> ((! LAST) U patientSafe)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not gasSupplyFailure)) or ( not (SI( (gasSupplyFailure and ((YtoPre( not gasSupplyFailure)) or FTP)), ( not patientSafe) ))))",
            "component": "System"
        },
        "_id": "103b8f20-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN18_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The user shall be able to disable/enable the leak compensation feature at any time.",
        "comments": "\"At any time\" seems...strong. \n\nOis√≠n, v0.3: Added brackets for clarity and added that disableLeakCompensation => !enableLeakCompensation",
        "fulltext": "System shall satisfy (if enableLeakCompensation then leakCompensation) & (if disableLeakCompensation then (!leakCompensation & !enableLeakCompensation) )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "enableLeakCompensation",
                "leakCompensation",
                "disableLeakCompensation"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(( enableLeakCompensation => leakCompensation ) & ( disableLeakCompensation => ( ! leakCompensation & ! enableLeakCompensation ) ))",
            "responseTextRange": [
                13,
                152
            ],
            "diagramVariables": "Response = <b><i>(( enableLeakCompensation => leakCompensation ) & ( disableLeakCompensation => ( ! leakCompensation & ! enableLeakCompensation ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_unexp_ft": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_SMV_pt": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_SMV_ft": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_coco_smv": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_coco": "((enableLeakCompensation => leakCompensation) and (disableLeakCompensation => (( not leakCompensation) and ( not enableLeakCompensation))))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((enableLeakCompensation => leakCompensation) and (disableLeakCompensation => (( not leakCompensation) and ( not enableLeakCompensation))))))",
            "component": "System"
        },
        "_id": "103bdd40-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10_6",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "Once the power of the system has been off for more than 15 minutes it shall not be possible to select ‚ÄúResume Ventilation‚Äù",
        "comments": "",
        "fulltext": "when off System shall after 15 minutes satisfy !resumeVentilation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "off",
                "resumeVentilation"
            ],
            "qualifier_word": "when",
            "pre_condition": "(off)",
            "regular_condition": "(off)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "duration": "15",
            "timingTextRange": [
                22,
                37
            ],
            "post_condition": "(! resumeVentilation)",
            "responseTextRange": [
                39,
                64
            ],
            "diagramVariables": "TC = <b><i>(off)</i></b>,  n = <b><i>15</i></b>, Response = <b><i>(! resumeVentilation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(off)</i></b> is true and any point in the interval where <b><i>(off)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>15</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>15</i></b>). Moreover, RES must hold at the point that is at distance <b><i>15</i></b>+1 from the trigger, that is, trigger+<b><i>15</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "off",
            "regular_condition_unexp_ft": "off",
            "regular_condition_SMV_pt": "off",
            "regular_condition_SMV_ft": "off",
            "regular_condition_coco_smv": "off",
            "regular_condition_coco": "off",
            "post_condition_unexp_pt": "(! resumeVentilation)",
            "post_condition_unexp_ft": "(! resumeVentilation)",
            "post_condition_SMV_pt": "(! resumeVentilation)",
            "post_condition_SMV_ft": "(! resumeVentilation)",
            "post_condition_coco_smv": "(! resumeVentilation)",
            "post_condition_coco": "( not resumeVentilation)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_unexp_ft$ -> (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))",
            "ft": "((LAST V (((! off) & ((! LAST) & (X off))) -> (X (((G[<=15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[<=15+1] (! resumeVentilation)) | (F[<15+1] LAST)))))) & (off -> (((G[<=15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[<=15+1] (! resumeVentilation)) | (F[<15+1] LAST)))))",
            "pt_fetched": "((H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$+1] (FTP | $post_condition_unexp_pt$)))))",
            "pt": "((H ((O[<=15] (off & ((Y (! off)) | FTP))) -> ((H (! off)) | (! (! resumeVentilation))))) & (H ((O[=15+1] ((off & ((Y (! off)) | FTP)) & (! (! resumeVentilation)))) -> (O[<15+1] (FTP | (! resumeVentilation))))))",
            "ptExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptExpanded": "((H ((O[0,15] (off & ((Y (! off)) | (! (Y TRUE))))) -> ((H (! off)) | resumeVentilation))) & (H ((O[16,16] ((off & ((Y (! off)) | (! (Y TRUE)))) & resumeVentilation)) -> (O[0,15] ((! (Y TRUE)) | (! resumeVentilation))))))",
            "ptFinBtwExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "((H ((O[0,15] (off & ((Y (! off)) | (! (Y TRUE))))) -> ((H (! off)) | (! (! resumeVentilation))))) & (H ((O[16,16] ((off & ((Y (! off)) | (! (Y TRUE)))) & (! (! resumeVentilation)))) -> (O[0,15] ((! (Y TRUE)) | (! resumeVentilation))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftExpanded": "((LAST V (((! off) & ((! LAST) & (X off))) -> (X (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! off) & (X off)) -> (X (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! off) & (X off)) -> (X (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftFinBtwExpanded": "((LAST V (((! off) & ((! LAST) & (X off))) -> (X (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))",
            "CoCoSpecCode_fetched": "((H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))) and (H((OT($duration$+1,$duration$+1,(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) and ( not $post_condition_coco$)))) => (OT($duration$,0,(FTP or $post_condition_coco$))))))",
            "CoCoSpecCode": "((H((OT(15,0,(off and ((YtoPre( not off)) or FTP)))) => ((H( not off)) or ( not ( not resumeVentilation))))) and (H((OT(15+1,15+1,((off and ((YtoPre( not off)) or FTP)) and ( not ( not resumeVentilation))))) => (OT(15,0,(FTP or ( not resumeVentilation)))))))",
            "component": "System"
        },
        "_id": "103c0450-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN35",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall prevent airborne contaminants (particulate, viral, bacterial) being delivered from the Ventilatorv0.2 to the patient.\n\n Rationale: patient safety is primary concern",
        "comments": "This seems unformalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103c2b60-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_9",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide a log to include power supply source change, including the source utilized",
        "comments": "",
        "fulltext": "when powerSupplyChanged System shall satisfy logPowerSupply",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerSupplyChanged",
                "logPowerSupply"
            ],
            "qualifier_word": "when",
            "pre_condition": "(powerSupplyChanged)",
            "regular_condition": "(powerSupplyChanged)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "post_condition": "(logPowerSupply)",
            "responseTextRange": [
                37,
                58
            ],
            "diagramVariables": "TC = <b><i>(powerSupplyChanged)</i></b>, Response = <b><i>(logPowerSupply)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerSupplyChanged)</i></b> is true and any point in the interval where <b><i>(powerSupplyChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerSupplyChanged",
            "regular_condition_unexp_ft": "powerSupplyChanged",
            "regular_condition_SMV_pt": "powerSupplyChanged",
            "regular_condition_SMV_ft": "powerSupplyChanged",
            "regular_condition_coco_smv": "powerSupplyChanged",
            "regular_condition_coco": "powerSupplyChanged",
            "post_condition_unexp_pt": "logPowerSupply",
            "post_condition_unexp_ft": "logPowerSupply",
            "post_condition_SMV_pt": "logPowerSupply",
            "post_condition_SMV_ft": "logPowerSupply",
            "post_condition_coco_smv": "logPowerSupply",
            "post_condition_coco": "logPowerSupply",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! powerSupplyChanged) & ((! LAST) & (X powerSupplyChanged))) -> (X ((! LAST) U logPowerSupply)))) & (powerSupplyChanged -> ((! LAST) U logPowerSupply)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! powerSupplyChanged)) | (! ((! logPowerSupply) S ((! logPowerSupply) & (powerSupplyChanged & ((Y (! powerSupplyChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! powerSupplyChanged)) | (! ((! logPowerSupply) S ((! logPowerSupply) & (powerSupplyChanged & ((Y (! powerSupplyChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! powerSupplyChanged)) | (! ((! logPowerSupply) S ((! logPowerSupply) & (powerSupplyChanged & ((Y (! powerSupplyChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! powerSupplyChanged) & ((! LAST) & (X powerSupplyChanged))) -> (X ((! LAST) U logPowerSupply)))) & (powerSupplyChanged -> ((! LAST) U logPowerSupply)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! powerSupplyChanged) & (X powerSupplyChanged)) -> (X (F logPowerSupply)))) & (powerSupplyChanged -> (F logPowerSupply)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! powerSupplyChanged) & (X powerSupplyChanged)) -> (X (F logPowerSupply)))) & (powerSupplyChanged -> (F logPowerSupply)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! powerSupplyChanged) & ((! LAST) & (X powerSupplyChanged))) -> (X ((! LAST) U logPowerSupply)))) & (powerSupplyChanged -> ((! LAST) U logPowerSupply)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not powerSupplyChanged)) or ( not (SI( (powerSupplyChanged and ((YtoPre( not powerSupplyChanged)) or FTP)), ( not logPowerSupply) ))))",
            "component": "System"
        },
        "_id": "103c5270-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN20",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PCV mode the breathing cycle shall be defined by inspiratory pressure Pinsp_PCV relative to atmosphere, respiratory rate (RRPCV) and the ratio between the inspiratory and expiratory times (I:E PCV ).\n\nRationale: standard parameters to define PCV\n\n(Added in v1.2) \nNote: The time for one breathing cycle will be equal to 1/RR_PCV . The expiratory time will be equal to (1/RR_PCV) / 1+I:E_PCV. For instance, if RR is 10 cycles for minutes [sic] and I:E is 1:2, the respiratory cycle will last 6 seconds, the inspiratory phase will last 2 seconds and the expiratory phase 4 seconds. ",
        "comments": "Matt, v0.1: Not sure how to formalise this\nMatt, v0.4: Adding simple formalisation from extra detail added in v1.2 of the natural language specification.; \"I:E\" -> \"ItoE\" to fix a silent FRET error.",
        "fulltext": "in PCVMode System shall satisfy breathingCyleTime = 1/RR_PCV & ExpiratoryTime = breathingCycleTime / (1+ItoE_PCV)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "breathingCyleTime",
                "RR_PCV",
                "ExpiratoryTime",
                "breathingCycleTime",
                "ItoE_PCV"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(breathingCyleTime = 1 / RR_PCV & ExpiratoryTime = breathingCycleTime / ( 1 + ItoE_PCV ))",
            "responseTextRange": [
                24,
                112
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(breathingCyleTime = 1 / RR_PCV & ExpiratoryTime = breathingCycleTime / ( 1 + ItoE_PCV ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_unexp_ft": "((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_SMV_pt": "((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_SMV_ft": "((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_coco_smv": "((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_coco": "((breathingCyleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCyleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCyleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCyleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))) )))))",
            "component": "System"
        },
        "_id": "103c7980-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall log key parameters, save them before being powered off and load them upon start-up to be made available on a log page on the GUI.",
        "comments": "",
        "fulltext": "System shall satisfy logParams & saveLog & loadLog",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "logParams",
                "saveLog",
                "loadLog"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(logParams & saveLog & loadLog)",
            "responseTextRange": [
                13,
                49
            ],
            "diagramVariables": "Response = <b><i>(logParams & saveLog & loadLog)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((logParams & saveLog) & loadLog)",
            "post_condition_unexp_ft": "((logParams & saveLog) & loadLog)",
            "post_condition_SMV_pt": "((logParams & saveLog) & loadLog)",
            "post_condition_SMV_ft": "((logParams & saveLog) & loadLog)",
            "post_condition_coco_smv": "((logParams & saveLog) & loadLog)",
            "post_condition_coco": "((logParams and saveLog) and loadLog)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((logParams & saveLog) & loadLog))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((logParams & saveLog) & loadLog))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((logParams & saveLog) & loadLog))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((logParams & saveLog) & loadLog))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((logParams & saveLog) & loadLog))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((logParams & saveLog) & loadLog))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((logParams & saveLog) & loadLog))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((logParams & saveLog) & loadLog))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((logParams and saveLog) and loadLog)))",
            "component": "System"
        },
        "_id": "103ca090-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN21_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "A patient breath trigger shall reset the timer for the time-cycled breathing cycle.\n\nRationale: Avoid breath stacking, which would lead to hyperventilation",
        "comments": "",
        "fulltext": "when patientBreathTrigger System shall satisfy breathingTimerReset",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "patientBreathTrigger",
                "breathingTimerReset"
            ],
            "qualifier_word": "when",
            "pre_condition": "(patientBreathTrigger)",
            "regular_condition": "(patientBreathTrigger)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "post_condition": "(breathingTimerReset)",
            "responseTextRange": [
                39,
                65
            ],
            "diagramVariables": "TC = <b><i>(patientBreathTrigger)</i></b>, Response = <b><i>(breathingTimerReset)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(patientBreathTrigger)</i></b> is true and any point in the interval where <b><i>(patientBreathTrigger)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "patientBreathTrigger",
            "regular_condition_unexp_ft": "patientBreathTrigger",
            "regular_condition_SMV_pt": "patientBreathTrigger",
            "regular_condition_SMV_ft": "patientBreathTrigger",
            "regular_condition_coco_smv": "patientBreathTrigger",
            "regular_condition_coco": "patientBreathTrigger",
            "post_condition_unexp_pt": "breathingTimerReset",
            "post_condition_unexp_ft": "breathingTimerReset",
            "post_condition_SMV_pt": "breathingTimerReset",
            "post_condition_SMV_ft": "breathingTimerReset",
            "post_condition_coco_smv": "breathingTimerReset",
            "post_condition_coco": "breathingTimerReset",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! patientBreathTrigger) & ((! LAST) & (X patientBreathTrigger))) -> (X ((! LAST) U breathingTimerReset)))) & (patientBreathTrigger -> ((! LAST) U breathingTimerReset)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! patientBreathTrigger)) | (! ((! breathingTimerReset) S ((! breathingTimerReset) & (patientBreathTrigger & ((Y (! patientBreathTrigger)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! patientBreathTrigger)) | (! ((! breathingTimerReset) S ((! breathingTimerReset) & (patientBreathTrigger & ((Y (! patientBreathTrigger)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! patientBreathTrigger)) | (! ((! breathingTimerReset) S ((! breathingTimerReset) & (patientBreathTrigger & ((Y (! patientBreathTrigger)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! patientBreathTrigger) & ((! LAST) & (X patientBreathTrigger))) -> (X ((! LAST) U breathingTimerReset)))) & (patientBreathTrigger -> ((! LAST) U breathingTimerReset)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! patientBreathTrigger) & (X patientBreathTrigger)) -> (X (F breathingTimerReset)))) & (patientBreathTrigger -> (F breathingTimerReset)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! patientBreathTrigger) & (X patientBreathTrigger)) -> (X (F breathingTimerReset)))) & (patientBreathTrigger -> (F breathingTimerReset)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! patientBreathTrigger) & ((! LAST) & (X patientBreathTrigger))) -> (X ((! LAST) U breathingTimerReset)))) & (patientBreathTrigger -> ((! LAST) U breathingTimerReset)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not patientBreathTrigger)) or ( not (SI( (patientBreathTrigger and ((YtoPre( not patientBreathTrigger)) or FTP)), ( not breathingTimerReset) ))))",
            "component": "System"
        },
        "_id": "103cc7a0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN36",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall prevent patient expiratory viral and bacterial contaminants from entering the atmosphere. \n\nRationale: need to ensure that clinicians and other patients are not exposed",
        "comments": "This seems unformalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103ceeb0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The self-test procedure shall confirm the switchover from external to internal power works.",
        "comments": "Ois√≠n, v0.3.1: Changed the response from just \"satisfy testPowerSwitch\" to \"satisfy testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testPowerSwitchPass",
                "testPowerSwitchFail",
                "testPowerSwitchSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip)",
            "responseTextRange": [
                29,
                99
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_unexp_ft": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_SMV_pt": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_SMV_ft": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_coco_smv": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_coco": "((testPowerSwitchPass or testPowerSwitchFail) or testPowerSwitchSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPowerSwitchPass or testPowerSwitchFail) or testPowerSwitchSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPowerSwitchPass or testPowerSwitchFail) or testPowerSwitchSkip)) )))))",
            "component": "System"
        },
        "_id": "103d15c0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN22",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PCV mode it shall be possible to initiate with the push of a single button a lung recruitment procedure, termed Recruitment Maneuver (RM). \n\nNote: This maneuver is not allowed in North America. \n\nRationale: The RM is an emergency procedure required immediately after intubation. RM consists in the prolonged lung inflation at increased inspiratory set pressure, as necessary to reactivate the alveoli immediately after intubation.",
        "comments": "",
        "fulltext": "in PCVMode when RMButton System shall satisfy RM",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "RMButton",
                "RM"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(RMButton)",
            "regular_condition": "(RMButton)",
            "conditionTextRange": [
                11,
                23
            ],
            "component_name": "System",
            "componentTextRange": [
                25,
                30
            ],
            "post_condition": "(RM)",
            "responseTextRange": [
                38,
                47
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(RMButton)</i></b>, Response = <b><i>(RM)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(RMButton)</i></b> is true and any point in the interval where <b><i>(RMButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "RMButton",
            "regular_condition_unexp_ft": "RMButton",
            "regular_condition_SMV_pt": "RMButton",
            "regular_condition_SMV_ft": "RMButton",
            "regular_condition_coco_smv": "RMButton",
            "regular_condition_coco": "RMButton",
            "post_condition_unexp_pt": "RM",
            "post_condition_unexp_ft": "RM",
            "post_condition_SMV_pt": "RM",
            "post_condition_SMV_ft": "RM",
            "post_condition_coco_smv": "RM",
            "post_condition_coco": "RM",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U RM)) & (! (Lin_PCVMode | LAST))))) & (RMButton -> ((! (Lin_PCVMode | LAST)) U RM)))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U RM)) & (! (Lin_PCVMode | LAST))))) & (RMButton -> ((! (Lin_PCVMode | LAST)) U RM)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! RMButton) S ((! RMButton) & Fin_PCVMode)) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! RMButton) S ((! RMButton) & Fin_PCVMode)) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! RMButton) S ((! RMButton) & (PCVMode & (Z (! PCVMode))))) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! RMButton) S ((! RMButton) & (PCVMode & (Z (! PCVMode))))) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! RMButton) S ((! RMButton) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (RMButton -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (RMButton -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM)))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not RMButton) )) or ( not (SI( (RMButton and ((YtoPre( not RMButton)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not RM) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not RMButton) )) or ( not (SI( (RMButton and ((YtoPre( not RMButton)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not RM) ))))))",
            "component": "System"
        },
        "_id": "103d3cd0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN18_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "When enabled, the leak compensation shall be activated by the MinPEEP alarm (SAV.15)",
        "comments": "",
        "fulltext": "when leakCompensationEnable if MinPEEPAlarm System shall satisfy leakCompensationActive",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "leakCompensationEnable",
                "MinPEEPAlarm",
                "leakCompensationActive"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MinPEEPAlarm)",
            "regular_condition": "((leakCompensationEnable) & (MinPEEPAlarm))",
            "conditionTextRange": [
                0,
                42
            ],
            "component_name": "System",
            "componentTextRange": [
                44,
                49
            ],
            "post_condition": "(leakCompensationActive)",
            "responseTextRange": [
                57,
                86
            ],
            "diagramVariables": "TC = <b><i>((leakCompensationEnable) & (MinPEEPAlarm))</i></b>, Response = <b><i>(leakCompensationActive)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((leakCompensationEnable) & (MinPEEPAlarm))</i></b> is true and any point in the interval where <b><i>((leakCompensationEnable) & (MinPEEPAlarm))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_unexp_ft": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_SMV_pt": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_SMV_ft": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_coco_smv": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_coco": "(leakCompensationEnable and MinPEEPAlarm)",
            "post_condition_unexp_pt": "leakCompensationActive",
            "post_condition_unexp_ft": "leakCompensationActive",
            "post_condition_SMV_pt": "leakCompensationActive",
            "post_condition_SMV_ft": "leakCompensationActive",
            "post_condition_coco_smv": "leakCompensationActive",
            "post_condition_coco": "leakCompensationActive",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (leakCompensationEnable & MinPEEPAlarm)) & ((! LAST) & (X (leakCompensationEnable & MinPEEPAlarm)))) -> (X ((! LAST) U leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> ((! LAST) U leakCompensationActive)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (leakCompensationEnable & MinPEEPAlarm))) | (! ((! leakCompensationActive) S ((! leakCompensationActive) & ((leakCompensationEnable & MinPEEPAlarm) & ((Y (! (leakCompensationEnable & MinPEEPAlarm))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (leakCompensationEnable & MinPEEPAlarm))) | (! ((! leakCompensationActive) S ((! leakCompensationActive) & ((leakCompensationEnable & MinPEEPAlarm) & ((Y (! (leakCompensationEnable & MinPEEPAlarm))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (leakCompensationEnable & MinPEEPAlarm))) | (! ((! leakCompensationActive) S ((! leakCompensationActive) & ((leakCompensationEnable & MinPEEPAlarm) & ((Y (! (leakCompensationEnable & MinPEEPAlarm))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (leakCompensationEnable & MinPEEPAlarm)) & ((! LAST) & (X (leakCompensationEnable & MinPEEPAlarm)))) -> (X ((! LAST) U leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> ((! LAST) U leakCompensationActive)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (leakCompensationEnable & MinPEEPAlarm)) & (X (leakCompensationEnable & MinPEEPAlarm))) -> (X (F leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> (F leakCompensationActive)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (leakCompensationEnable & MinPEEPAlarm)) & (X (leakCompensationEnable & MinPEEPAlarm))) -> (X (F leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> (F leakCompensationActive)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (leakCompensationEnable & MinPEEPAlarm)) & ((! LAST) & (X (leakCompensationEnable & MinPEEPAlarm)))) -> (X ((! LAST) U leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> ((! LAST) U leakCompensationActive)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (leakCompensationEnable and MinPEEPAlarm))) or ( not (SI( ((leakCompensationEnable and MinPEEPAlarm) and ((YtoPre( not (leakCompensationEnable and MinPEEPAlarm))) or FTP)), ( not leakCompensationActive) ))))",
            "component": "System"
        },
        "_id": "103d63e0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN5",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The Start-up Mode shall be initiated by pushing the power button of the system once the system has been connected to the breathing circuit (without connection to the patient), the air supply, and the power source. \n\nRationale: need to turn on the system once all connections are attached so the sensors and valves can be properly tested.",
        "comments": "Ois√≠n, v0.3: Initial version of this was just \"when powerButton System shall satisfy StartUpMode\". I added more detail from the NL requirement about the preconditions for start up:\n\"when breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected System shall satisfy (powerButton => StartUpMode)\"\nUnsure if this should maybe be the other way around.\n\nOis√≠n, v0.3.1: After discussion in meeting, moved powerButton into the condition.\n\"when powerButton & (breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected) System shall satisfy StartUpMode\"",
        "fulltext": "when powerButton & (breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected) System shall satisfy StartUpMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerButton",
                "breathingCircuitConnected",
                "patientConnected",
                "airSupplyConnected",
                "powerConnected",
                "StartUpMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))",
            "regular_condition": "(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))",
            "conditionTextRange": [
                0,
                105
            ],
            "component_name": "System",
            "componentTextRange": [
                107,
                112
            ],
            "post_condition": "(StartUpMode)",
            "responseTextRange": [
                120,
                138
            ],
            "diagramVariables": "TC = <b><i>(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))</i></b>, Response = <b><i>(StartUpMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))</i></b> is true and any point in the interval where <b><i>(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_unexp_ft": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_SMV_pt": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_SMV_ft": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_coco_smv": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_coco": "(powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected))",
            "post_condition_unexp_pt": "StartUpMode",
            "post_condition_unexp_ft": "StartUpMode",
            "post_condition_SMV_pt": "StartUpMode",
            "post_condition_SMV_ft": "StartUpMode",
            "post_condition_coco_smv": "StartUpMode",
            "post_condition_coco": "StartUpMode",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & ((! LAST) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))))) -> (X ((! LAST) U StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> ((! LAST) U StartUpMode)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! ((! StartUpMode) S ((! StartUpMode) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & ((Y (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! ((! StartUpMode) S ((! StartUpMode) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & ((Y (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! ((! StartUpMode) S ((! StartUpMode) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & ((Y (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & ((! LAST) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))))) -> (X ((! LAST) U StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> ((! LAST) U StartUpMode)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) -> (X (F StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> (F StartUpMode)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) -> (X (F StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> (F StartUpMode)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & ((! LAST) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))))) -> (X ((! LAST) U StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> ((! LAST) U StartUpMode)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected)))) or ( not (SI( ((powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected)) and ((YtoPre( not (powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected)))) or FTP)), ( not StartUpMode) ))))",
            "component": "System"
        },
        "_id": "103d8af0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide ventilation support for patients who require mechanical ventilation and weigh more than 40 kg (88 lbs). \n\nRationale: ventilation of children and infants is more challenging",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103db200-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_10",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide a log to include results of the pre-use check.",
        "comments": "Not clear if \"pre-use check\" is the same as the self test",
        "fulltext": "when preUseCheckDone System shall satisfy logPreUseCheck",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "preUseCheckDone",
                "logPreUseCheck"
            ],
            "qualifier_word": "when",
            "pre_condition": "(preUseCheckDone)",
            "regular_condition": "(preUseCheckDone)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "post_condition": "(logPreUseCheck)",
            "responseTextRange": [
                34,
                55
            ],
            "diagramVariables": "TC = <b><i>(preUseCheckDone)</i></b>, Response = <b><i>(logPreUseCheck)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(preUseCheckDone)</i></b> is true and any point in the interval where <b><i>(preUseCheckDone)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "preUseCheckDone",
            "regular_condition_unexp_ft": "preUseCheckDone",
            "regular_condition_SMV_pt": "preUseCheckDone",
            "regular_condition_SMV_ft": "preUseCheckDone",
            "regular_condition_coco_smv": "preUseCheckDone",
            "regular_condition_coco": "preUseCheckDone",
            "post_condition_unexp_pt": "logPreUseCheck",
            "post_condition_unexp_ft": "logPreUseCheck",
            "post_condition_SMV_pt": "logPreUseCheck",
            "post_condition_SMV_ft": "logPreUseCheck",
            "post_condition_coco_smv": "logPreUseCheck",
            "post_condition_coco": "logPreUseCheck",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! preUseCheckDone) & ((! LAST) & (X preUseCheckDone))) -> (X ((! LAST) U logPreUseCheck)))) & (preUseCheckDone -> ((! LAST) U logPreUseCheck)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! preUseCheckDone)) | (! ((! logPreUseCheck) S ((! logPreUseCheck) & (preUseCheckDone & ((Y (! preUseCheckDone)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! preUseCheckDone)) | (! ((! logPreUseCheck) S ((! logPreUseCheck) & (preUseCheckDone & ((Y (! preUseCheckDone)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! preUseCheckDone)) | (! ((! logPreUseCheck) S ((! logPreUseCheck) & (preUseCheckDone & ((Y (! preUseCheckDone)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! preUseCheckDone) & ((! LAST) & (X preUseCheckDone))) -> (X ((! LAST) U logPreUseCheck)))) & (preUseCheckDone -> ((! LAST) U logPreUseCheck)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! preUseCheckDone) & (X preUseCheckDone)) -> (X (F logPreUseCheck)))) & (preUseCheckDone -> (F logPreUseCheck)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! preUseCheckDone) & (X preUseCheckDone)) -> (X (F logPreUseCheck)))) & (preUseCheckDone -> (F logPreUseCheck)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! preUseCheckDone) & ((! LAST) & (X preUseCheckDone))) -> (X ((! LAST) U logPreUseCheck)))) & (preUseCheckDone -> ((! LAST) U logPreUseCheck)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not preUseCheckDone)) or ( not (SI( (preUseCheckDone and ((YtoPre( not preUseCheckDone)) or FTP)), ( not logPreUseCheck) ))))",
            "component": "System"
        },
        "_id": "103dd910-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN25",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PSV mode the breathing cycle shall be initiated by a sudden drop in pressure below a user-settable threshold (Inhale Trigger Sensitivity) \n\nRationale: In a pressure-regulated Ventilatorv0.2, the speed of pressure drop initiated by the patient is the easiest way to detect the spontaneous breathing attempt as per Ventilatorv0.2 experts",
        "comments": "Ois√≠n, v0.3: changed this and FUN21_1 from \"when pressureDrop\" to \"when inspiratoryPressure < InhaleTriggerSensitivity[PCV/PSV]\"",
        "fulltext": "in PSVMode when inspiratoryPressure < InhaleTriggerSensitivityPSV System shall satisfy breathingCycleStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "inspiratoryPressure",
                "InhaleTriggerSensitivityPSV",
                "breathingCycleStart"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "conditionTextRange": [
                11,
                64
            ],
            "component_name": "System",
            "componentTextRange": [
                66,
                71
            ],
            "post_condition": "(breathingCycleStart)",
            "responseTextRange": [
                79,
                105
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPSV)</i></b>, Response = <b><i>(breathingCycleStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPSV)</i></b> is true and any point in the interval where <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPSV)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_unexp_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_SMV_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_SMV_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_coco_smv": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_coco": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "post_condition_unexp_pt": "breathingCycleStart",
            "post_condition_unexp_ft": "breathingCycleStart",
            "post_condition_SMV_pt": "breathingCycleStart",
            "post_condition_SMV_ft": "breathingCycleStart",
            "post_condition_coco_smv": "breathingCycleStart",
            "post_condition_coco": "breathingCycleStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U breathingCycleStart)) & (! (Lin_PSVMode | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (Lin_PSVMode | LAST)) U breathingCycleStart)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U breathingCycleStart)) & (! (Lin_PSVMode | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (Lin_PSVMode | LAST)) U breathingCycleStart)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & Fin_PSVMode)) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & Fin_PSVMode)) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (PSVMode & (Z (! PSVMode))))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (PSVMode & (Z (! PSVMode))))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (inspiratoryPressure < InhaleTriggerSensitivityPSV)) )) or ( not (SI( ((inspiratoryPressure < InhaleTriggerSensitivityPSV) and ((YtoPre( not (inspiratoryPressure < InhaleTriggerSensitivityPSV))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not breathingCycleStart) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (inspiratoryPressure < InhaleTriggerSensitivityPSV)) )) or ( not (SI( ((inspiratoryPressure < InhaleTriggerSensitivityPSV) and ((YtoPre( not (inspiratoryPressure < InhaleTriggerSensitivityPSV))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not breathingCycleStart) ))))))",
            "component": "System"
        },
        "_id": "103e2730-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN7",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "If the self-test fails, the user shall be warned that the system is out-of-service. In addition, any other operations shall be not allowed.",
        "comments": "Assuming: \"any other operations should not be allowed\" means Fail Safe Mode, as per Fig 2.1.\nThis is subtly different to FUN5_2 because of the wording of the natural language requirement.",
        "fulltext": "in SelfTestMode if selfTestFail System shall satisfy outOfServiceWarning & FailSafeMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "selfTestFail",
                "outOfServiceWarning",
                "FailSafeMode"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(selfTestFail)",
            "regular_condition": "(selfTestFail)",
            "conditionTextRange": [
                16,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(outOfServiceWarning & FailSafeMode)",
            "responseTextRange": [
                45,
                86
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, TC = <b><i>(selfTestFail)</i></b>, Response = <b><i>(outOfServiceWarning & FailSafeMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(selfTestFail)</i></b> is true and any point in the interval where <b><i>(selfTestFail)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "regular_condition_unexp_pt": "selfTestFail",
            "regular_condition_unexp_ft": "selfTestFail",
            "regular_condition_SMV_pt": "selfTestFail",
            "regular_condition_SMV_ft": "selfTestFail",
            "regular_condition_coco_smv": "selfTestFail",
            "regular_condition_coco": "selfTestFail",
            "post_condition_unexp_pt": "(outOfServiceWarning & FailSafeMode)",
            "post_condition_unexp_ft": "(outOfServiceWarning & FailSafeMode)",
            "post_condition_SMV_pt": "(outOfServiceWarning & FailSafeMode)",
            "post_condition_SMV_ft": "(outOfServiceWarning & FailSafeMode)",
            "post_condition_coco_smv": "(outOfServiceWarning & FailSafeMode)",
            "post_condition_coco": "(outOfServiceWarning and FailSafeMode)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X (((Lin_SelfTestMode | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (Lin_SelfTestMode | LAST)) U (outOfServiceWarning & FailSafeMode))) & (! (Lin_SelfTestMode | LAST))))) & (selfTestFail -> ((! (Lin_SelfTestMode | LAST)) U (outOfServiceWarning & FailSafeMode))))))) & (SelfTestMode -> (((Lin_SelfTestMode | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (Lin_SelfTestMode | LAST)) U (outOfServiceWarning & FailSafeMode))) & (! (Lin_SelfTestMode | LAST))))) & (selfTestFail -> ((! (Lin_SelfTestMode | LAST)) U (outOfServiceWarning & FailSafeMode))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (((! selfTestFail) S ((! selfTestFail) & Fin_SelfTestMode)) | (! ((! (outOfServiceWarning & FailSafeMode)) S ((! (outOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | Fin_SelfTestMode))))))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (((! selfTestFail) S ((! selfTestFail) & Fin_SelfTestMode)) | (! ((! (outOfServiceWarning & FailSafeMode)) S ((! (outOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | Fin_SelfTestMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((! selfTestFail) S ((! selfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (! ((! (outOfServiceWarning & FailSafeMode)) S ((! (outOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | (SelfTestMode & (Z (! SelfTestMode)))))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (((! selfTestFail) S ((! selfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (! ((! (outOfServiceWarning & FailSafeMode)) S ((! (outOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | (SelfTestMode & (Z (! SelfTestMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((! selfTestFail) S ((! selfTestFail) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))) | (! ((! (outOfServiceWarning & FailSafeMode)) S ((! (outOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (outOfServiceWarning & FailSafeMode))) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & (selfTestFail -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (outOfServiceWarning & FailSafeMode))))))) & (SelfTestMode -> (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (outOfServiceWarning & FailSafeMode))) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & (selfTestFail -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (outOfServiceWarning & FailSafeMode))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))))))) & (SelfTestMode -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode)))))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode)))))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (outOfServiceWarning & FailSafeMode)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not selfTestFail) )) or ( not (SI( (selfTestFail and ((YtoPre( not selfTestFail)) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not (outOfServiceWarning and FailSafeMode)) ))))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not selfTestFail) )) or ( not (SI( (selfTestFail and ((YtoPre( not selfTestFail)) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not (outOfServiceWarning and FailSafeMode)) ))))))",
            "component": "System"
        },
        "_id": "103e4e40-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide pressure regulated ventilation controlling the inspiratory pressure. \n\nRationale: pressure regulated ventilation is most beneficial for COVID-19 patients",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103e7550-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN6_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The self-test procedure shall confirm there are no unacceptable leaks in the breathing circuit.",
        "comments": "Ois√≠n, v0.3.1: Changed the response from just \"satisfy testLeaks\" to \"satisfy testLeaksPass | testLeaksFail | testLeaksSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testLeaksPass | testLeaksFail | testLeaksSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testLeaksPass",
                "testLeaksFail",
                "testLeaksSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testLeaksPass | testLeaksFail | testLeaksSkip)",
            "responseTextRange": [
                29,
                81
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testLeaksPass | testLeaksFail | testLeaksSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_unexp_ft": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_SMV_pt": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_SMV_ft": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_coco_smv": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_coco": "((testLeaksPass or testLeaksFail) or testLeaksSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testLeaksPass or testLeaksFail) or testLeaksSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testLeaksPass or testLeaksFail) or testLeaksSkip)) )))))",
            "component": "System"
        },
        "_id": "103e9c60-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have means to indicate visually the cumulative hours of operation of the Ventilatorv0.2, either 1) automatically; or 2) by operator action.",
        "comments": "Not sure this is formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103ec370-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10_1",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "If ‚ÄúNew Patient‚Äù is selected, the user shall have to enter patient attributes and the completion of every step of the self-test procedure (FUN.6) shall be mandatory",
        "comments": "Ois√≠n, v0.3.1: Updated to include the definition of \"selfTestPass\" where all tests must be passed.\nMatt: v0.4: SelfTestPass -> SelfTestPassed (as per Fig 2.1 since v1.3 of the natural language specification). Leaving the individual tests as 'pass' since they're not mentioned in Fig 2.1)\n",
        "fulltext": "when newPatient System shall satisfy patientAttributesEntered & SelfTestMode & ((testPowerSwitchPass &  testLeaksPass & testFl2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass) => selfTestPassed)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "newPatient",
                "patientAttributesEntered",
                "SelfTestMode",
                "testPowerSwitchPass",
                "testLeaksPass",
                "testFl2Pass",
                "testPSExpPass",
                "testOxygenSensorPass",
                "testAlarmsPass",
                "selfTestPassed"
            ],
            "qualifier_word": "when",
            "pre_condition": "(newPatient)",
            "regular_condition": "(newPatient)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(patientAttributesEntered & SelfTestMode & ( ( testPowerSwitchPass & testLeaksPass & testFl2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass ) => selfTestPassed ))",
            "responseTextRange": [
                29,
                206
            ],
            "diagramVariables": "TC = <b><i>(newPatient)</i></b>, Response = <b><i>(patientAttributesEntered & SelfTestMode & ( ( testPowerSwitchPass & testLeaksPass & testFl2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass ) => selfTestPassed ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(newPatient)</i></b> is true and any point in the interval where <b><i>(newPatient)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "newPatient",
            "regular_condition_unexp_ft": "newPatient",
            "regular_condition_SMV_pt": "newPatient",
            "regular_condition_SMV_ft": "newPatient",
            "regular_condition_coco_smv": "newPatient",
            "regular_condition_coco": "newPatient",
            "post_condition_unexp_pt": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_unexp_ft": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_SMV_pt": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_SMV_ft": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_coco_smv": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_coco": "((patientAttributesEntered and SelfTestMode) and ((((((testPowerSwitchPass and testLeaksPass) and testFl2Pass) and testPSExpPass) and testOxygenSensorPass) and testAlarmsPass) => selfTestPassed))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! newPatient) & ((! LAST) & (X newPatient))) -> (X ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & ((Y (! newPatient)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & ((Y (! newPatient)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & ((Y (! newPatient)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! newPatient) & ((! LAST) & (X newPatient))) -> (X ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! newPatient) & (X newPatient)) -> (X (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! newPatient) & (X newPatient)) -> (X (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! newPatient) & ((! LAST) & (X newPatient))) -> (X ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not newPatient)) or ( not (SI( (newPatient and ((YtoPre( not newPatient)) or FTP)), ( not ((patientAttributesEntered and SelfTestMode) and ((((((testPowerSwitchPass and testLeaksPass) and testFl2Pass) and testPSExpPass) and testOxygenSensorPass) and testAlarmsPass) => selfTestPassed))) ))))",
            "component": "System"
        },
        "_id": "103eea80-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN13",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall measure and display the breathing rate (number of breathes per minute). \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function",
        "comments": "Ois√≠n, v0.3: changed \"measureBPM & displayBPM\" to \"measureRR & displayRR\", since the document uses RR as an abbreviation for 'Respiratory Rate'.",
        "fulltext": "System shall satisfy measureRR & displayRR",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureRR",
                "displayRR"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureRR & displayRR)",
            "responseTextRange": [
                13,
                41
            ],
            "diagramVariables": "Response = <b><i>(measureRR & displayRR)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureRR & displayRR)",
            "post_condition_unexp_ft": "(measureRR & displayRR)",
            "post_condition_SMV_pt": "(measureRR & displayRR)",
            "post_condition_SMV_ft": "(measureRR & displayRR)",
            "post_condition_coco_smv": "(measureRR & displayRR)",
            "post_condition_coco": "(measureRR and displayRR)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureRR & displayRR))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureRR & displayRR))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureRR & displayRR))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureRR & displayRR))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureRR & displayRR))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureRR & displayRR))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureRR & displayRR))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureRR & displayRR))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureRR and displayRR)))",
            "component": "System"
        },
        "_id": "103f1190-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN3",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide positive end expiratory pressure (PEEP) ventilation. \n\nRationale: PEEP is important to keep alveoli recruited at the end of expiration",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "103f38a0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN37",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have an internal power source that allows operation for 120 minutes past the failure of the external power source. \n\nRationale: regulatory requirement",
        "comments": "",
        "fulltext": "if powerFailure System shall for 120 minutes satisfy !off",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "powerFailure",
                "off"
            ],
            "qualifier_word": "if",
            "pre_condition": "(powerFailure)",
            "regular_condition": "(powerFailure)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "duration": "120",
            "timingTextRange": [
                29,
                43
            ],
            "post_condition": "(! off)",
            "responseTextRange": [
                45,
                56
            ],
            "diagramVariables": "TC = <b><i>(powerFailure)</i></b>,  n = <b><i>120</i></b>, Response = <b><i>(! off)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerFailure)</i></b> is true and any point in the interval where <b><i>(powerFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>120</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>120</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>120</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerFailure",
            "regular_condition_unexp_ft": "powerFailure",
            "regular_condition_SMV_pt": "powerFailure",
            "regular_condition_SMV_ft": "powerFailure",
            "regular_condition_coco_smv": "powerFailure",
            "regular_condition_coco": "powerFailure",
            "post_condition_unexp_pt": "(! off)",
            "post_condition_unexp_ft": "(! off)",
            "post_condition_SMV_pt": "(! off)",
            "post_condition_SMV_ft": "(! off)",
            "post_condition_coco_smv": "(! off)",
            "post_condition_coco": "( not off)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((G[<=120] (! off)) | (LAST V (! off)))))) & (powerFailure -> ((G[<=120] (! off)) | (LAST V (! off)))))",
            "pt_fetched": "(H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | $post_condition_unexp_pt$)))",
            "pt": "(H ((O[<=120] (powerFailure & ((Y (! powerFailure)) | FTP))) -> ((H (! powerFailure)) | (! off))))",
            "ptExpanded_fetched": "(H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | $post_condition_SMV_pt$)))",
            "ptExpanded": "(H ((O[0,120] (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))) -> ((H (! powerFailure)) | (! off))))",
            "ptFinBtwExpanded_fetched": "(H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | $post_condition_SMV_pt$)))",
            "ptFinBtwExpanded": "(H ((O[0,120] (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))) -> ((H (! powerFailure)) | (! off))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((G[0,120] (! off)) | (LAST V (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (LAST V (! off)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X ((G[0,120] (! off)) | (G (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (G (! off)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X ((G[0,120] (! off)) | (G (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (G (! off)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((G[0,120] (! off)) | (LAST V (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (LAST V (! off)))))",
            "CoCoSpecCode_fetched": "(H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or $post_condition_coco$)))",
            "CoCoSpecCode": "(H((OT(120,0,(powerFailure and ((YtoPre( not powerFailure)) or FTP)))) => ((H( not powerFailure)) or ( not off))))",
            "component": "System"
        },
        "_id": "103f5fb0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN23",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide means to switch from PCV to PSV while PCV ventilation is active. \n\nRationale: the switchover between modes should not require stopping the ventilation in order to maintain ventilation of the patient",
        "comments": "",
        "fulltext": "in PCVMode when PSVModeSelected System shall satisfy ventilating & PSVMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVModeSelected",
                "ventilating",
                "PSVMode"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                11,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(ventilating & PSVMode)",
            "responseTextRange": [
                45,
                73
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(ventilating & PSVMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "(ventilating & PSVMode)",
            "post_condition_unexp_ft": "(ventilating & PSVMode)",
            "post_condition_SMV_pt": "(ventilating & PSVMode)",
            "post_condition_SMV_ft": "(ventilating & PSVMode)",
            "post_condition_coco_smv": "(ventilating & PSVMode)",
            "post_condition_coco": "(ventilating and PSVMode)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not (ventilating and PSVMode)) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not (ventilating and PSVMode)) ))))))",
            "component": "System"
        },
        "_id": "103f86c0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN29",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "In PCV and PSV mode there shall be the possibility to press a single button to initiate an Inspiratory Pause (IP) that closes both inspiratory and expiratory valve at the end of the inspiratory phase as long as the operator holds the button but no longer than 40 sec \n\nRationale: The Inspiratory Pause will, allowing for the measurement of the Plateau Pressure (PP), the pressure reached inside the alveoli at the end of the inspiratory cycle. PP may be lower than the target inspiratory pressure P insp provided by the Ventilatorv0.2. The difference between PP and the PEEP is called Driving Pressure, DP (DP = PP - PEEP).",
        "comments": "Ois√≠n, v0.3: added a condition that this happens at the end of the inspiratoryphase. Tried to find a better way to write these two requirements, I think I'm decently happy with this. The one problem here is that this could allow for releasing and re-pressing the button within the 40 second window, but maybe not given the scope and condition.",
        "fulltext": "while InspiratoryPauseButton when (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) System shall for 40 seconds satisfy (InspiratoryPauseButton => inValveClose & outValveClose)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "InspiratoryPauseButton",
                "PCVInspiratoryPhaseEnd",
                "PSVInspiratoryPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(InspiratoryPauseButton)",
            "scopeTextRange": [
                0,
                27
            ],
            "qualifier_word": "when",
            "pre_condition": "(( PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd ))",
            "regular_condition": "(( PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd ))",
            "conditionTextRange": [
                29,
                82
            ],
            "component_name": "System",
            "componentTextRange": [
                84,
                89
            ],
            "duration": "40",
            "timingTextRange": [
                97,
                110
            ],
            "post_condition": "(( InspiratoryPauseButton => inValveClose & outValveClose ))",
            "responseTextRange": [
                112,
                175
            ],
            "diagramVariables": "M = <b><i>(InspiratoryPauseButton)</i></b>,, TC = <b><i>(( PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd ))</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(( InspiratoryPauseButton => inValveClose & outValveClose ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(InspiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(( PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd ))</i></b> is true and any point in the interval where <b><i>(( PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>40</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>40</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>40</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_for_satisfaction.svg",
            "scope_mode_pt": "InspiratoryPauseButton",
            "scope_mode_coco": "InspiratoryPauseButton",
            "scope_mode_ft": "InspiratoryPauseButton",
            "regular_condition_unexp_pt": "(PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)",
            "regular_condition_unexp_ft": "(PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)",
            "regular_condition_SMV_pt": "(PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)",
            "regular_condition_SMV_ft": "(PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)",
            "regular_condition_coco_smv": "(PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)",
            "regular_condition_coco": "(PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd)",
            "post_condition_unexp_pt": "(InspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_unexp_ft": "(InspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_pt": "(InspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_ft": "(InspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco_smv": "(InspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco": "(InspiratoryPauseButton => (inValveClose and outValveClose))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_InspiratoryPauseButton & (! LAST))) | (X (((Lin_InspiratoryPauseButton | LAST) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((! LAST) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! (Lin_InspiratoryPauseButton | LAST))))) -> ((X ((G[<=40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_InspiratoryPauseButton | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_InspiratoryPauseButton | LAST))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[<=40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_InspiratoryPauseButton | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & (InspiratoryPauseButton -> (((Lin_InspiratoryPauseButton | LAST) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((! LAST) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! (Lin_InspiratoryPauseButton | LAST))))) -> ((X ((G[<=40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_InspiratoryPauseButton | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_InspiratoryPauseButton | LAST))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[<=40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_InspiratoryPauseButton | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_InspiratoryPauseButton -> (Y (((O[<=40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | Fin_InspiratoryPauseButton))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & Fin_InspiratoryPauseButton)) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | Fin_InspiratoryPauseButton))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & Fin_InspiratoryPauseButton)) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_InspiratoryPauseButton))))) & (((! Lin_InspiratoryPauseButton) S ((! Lin_InspiratoryPauseButton) & Fin_InspiratoryPauseButton)) -> (((O[<=40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | Fin_InspiratoryPauseButton))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & Fin_InspiratoryPauseButton)) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | Fin_InspiratoryPauseButton))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & Fin_InspiratoryPauseButton)) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_InspiratoryPauseButton))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! InspiratoryPauseButton) & (Y InspiratoryPauseButton)) -> (Y (((O[0,40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | (InspiratoryPauseButton & (Z (! InspiratoryPauseButton)))))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton))))) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | (InspiratoryPauseButton & (Z (! InspiratoryPauseButton)))))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton))))) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton)))))))) & (((! ((! InspiratoryPauseButton) & (Y InspiratoryPauseButton))) S ((! ((! InspiratoryPauseButton) & (Y InspiratoryPauseButton))) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton))))) -> (((O[0,40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | (InspiratoryPauseButton & (Z (! InspiratoryPauseButton)))))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton))))) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | (InspiratoryPauseButton & (Z (! InspiratoryPauseButton)))))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton))))) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) & (InspiratoryPauseButton & (Z (! InspiratoryPauseButton)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! InspiratoryPauseButton) & (Y InspiratoryPauseButton)) -> (Y (((O[0,40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | (InspiratoryPauseButton & ((! (Y TRUE)) | (Y (! InspiratoryPauseButton))))))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (InspiratoryPauseButton & ((! (Y TRUE)) | (Y (! InspiratoryPauseButton)))))) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) & ((Y (! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd))) | (InspiratoryPauseButton & ((! (Y TRUE)) | (Y (! InspiratoryPauseButton))))))) -> (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) S ((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (InspiratoryPauseButton & ((! (Y TRUE)) | (Y (! InspiratoryPauseButton)))))) | (InspiratoryPauseButton -> (inValveClose & outValveClose)))) & (InspiratoryPauseButton & ((! (Y TRUE)) | (Y (! InspiratoryPauseButton)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! InspiratoryPauseButton) & (! LAST)) & (X InspiratoryPauseButton)) & (! LAST))) | (X (((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((! LAST) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & (InspiratoryPauseButton -> (((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((! LAST) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) | LAST) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! InspiratoryPauseButton) ) & (X InspiratoryPauseButton))) | (X ((((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton)))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & (InspiratoryPauseButton -> ((((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton)))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! InspiratoryPauseButton) ) & (X InspiratoryPauseButton))) | (X ((F ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton)))) -> ((((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton)))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & (InspiratoryPauseButton -> ((F ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton)))) -> ((((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton)))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton ) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! InspiratoryPauseButton) & (! LAST)) & (X InspiratoryPauseButton)) & (! LAST))) | (X (((! LAST) U ((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton)))) -> ((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((! LAST) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! ((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & (InspiratoryPauseButton -> (((! LAST) U ((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton)))) -> ((((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) V (((! (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & ((! LAST) & ((X (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)) & (! ((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))))))) -> ((X ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))))))) & ((PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd) -> ((G[0,40] (InspiratoryPauseButton -> (inValveClose & outValveClose))) | (((InspiratoryPauseButton & (! LAST)) & (X (! InspiratoryPauseButton))) V (InspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not InspiratoryPauseButton) and (YtoPre(InspiratoryPauseButton))) => (YtoPre(SI( (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))), ((OT(40,0,((PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd) and ((YtoPre( not (PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd))) or (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))))))) => ((SI( (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))), ( not (PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd)) )) or (InspiratoryPauseButton => (inValveClose and outValveClose)))) ))))) and ((SI( (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))), ( not (( not InspiratoryPauseButton) and (YtoPre(InspiratoryPauseButton)))) )) => (SI( (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))), ((OT(40,0,((PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd) and ((YtoPre( not (PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd))) or (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))))))) => ((SI( (InspiratoryPauseButton and (FTP or (YtoPre( not InspiratoryPauseButton)))), ( not (PCVInspiratoryPhaseEnd or PSVInspiratoryPhaseEnd)) )) or (InspiratoryPauseButton => (inValveClose and outValveClose)))) ))))",
            "component": "System"
        },
        "_id": "103fadd0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_11",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall provide a log to include the overall duration of the active use of the O2 sensor (%-hours) \n\nRationale: The oxygen sensor has a limited lifetime expectancy requiring a monitoring of its use in order to track its deterioration over time",
        "comments": "",
        "fulltext": "System shall satisfy logO2SensorUse",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "logO2SensorUse"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(logO2SensorUse)",
            "responseTextRange": [
                13,
                34
            ],
            "diagramVariables": "Response = <b><i>(logO2SensorUse)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "logO2SensorUse",
            "post_condition_unexp_ft": "logO2SensorUse",
            "post_condition_SMV_pt": "logO2SensorUse",
            "post_condition_SMV_ft": "logO2SensorUse",
            "post_condition_coco_smv": "logO2SensorUse",
            "post_condition_coco": "logO2SensorUse",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U logO2SensorUse)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O logO2SensorUse)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O logO2SensorUse)",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O logO2SensorUse)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U logO2SensorUse)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F logO2SensorUse)",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F logO2SensorUse)",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U logO2SensorUse)",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(logO2SensorUse))",
            "component": "System"
        },
        "_id": "103ffbf0-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall be equipped with an alarm system log with a capacity of at least 1000 events in total for: high priority alarm conditions; medium priority alarm conditions; and alarm signal inactivation states",
        "comments": "Not sure this is formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "10402300-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN38",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall have clearly ranked (high/medium/low priority) visual alarms. \n\nRationale: regulatory requirement",
        "comments": "Not sure how to formalise that one.",
        "fulltext": "",
        "semantics": {},
        "_id": "10404a10-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN14",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall measure and display the percentage of oxygen in the gas being delivered to the patient. \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function",
        "comments": "",
        "fulltext": "System shall satisfy measureO2% & displayO2%",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureO2%",
                "displayO2%"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureO2% & displayO2%)",
            "responseTextRange": [
                13,
                43
            ],
            "diagramVariables": "Response = <b><i>(measureO2% & displayO2%)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_unexp_ft": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_SMV_pt": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_SMV_ft": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_coco_smv": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_coco": "(measureO2_PRC_ and displayO2_PRC_)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureO2_PRC_ & displayO2_PRC_))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureO2_PRC_ & displayO2_PRC_))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureO2_PRC_ & displayO2_PRC_))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureO2_PRC_ & displayO2_PRC_))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureO2_PRC_ & displayO2_PRC_))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureO2_PRC_ & displayO2_PRC_))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureO2_PRC_ & displayO2_PRC_))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureO2_PRC_ & displayO2_PRC_))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureO2_PRC_ and displayO2_PRC_)))",
            "component": "System"
        },
        "_id": "10407120-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN10_2",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "If ‚ÄúResume Ventilation‚Äù is selected, the system shall load the last calibration parameters, alarm thresholds, and ventilation parameters from the last active patient ventilation.",
        "comments": "",
        "fulltext": "when resumeVentilation System shall satisfy loadLastParams",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "resumeVentilation",
                "loadLastParams"
            ],
            "qualifier_word": "when",
            "pre_condition": "(resumeVentilation)",
            "regular_condition": "(resumeVentilation)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "post_condition": "(loadLastParams)",
            "responseTextRange": [
                36,
                57
            ],
            "diagramVariables": "TC = <b><i>(resumeVentilation)</i></b>, Response = <b><i>(loadLastParams)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(resumeVentilation)</i></b> is true and any point in the interval where <b><i>(resumeVentilation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "resumeVentilation",
            "regular_condition_unexp_ft": "resumeVentilation",
            "regular_condition_SMV_pt": "resumeVentilation",
            "regular_condition_SMV_ft": "resumeVentilation",
            "regular_condition_coco_smv": "resumeVentilation",
            "regular_condition_coco": "resumeVentilation",
            "post_condition_unexp_pt": "loadLastParams",
            "post_condition_unexp_ft": "loadLastParams",
            "post_condition_SMV_pt": "loadLastParams",
            "post_condition_SMV_ft": "loadLastParams",
            "post_condition_coco_smv": "loadLastParams",
            "post_condition_coco": "loadLastParams",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U loadLastParams)))) & (resumeVentilation -> ((! LAST) U loadLastParams)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! resumeVentilation)) | (! ((! loadLastParams) S ((! loadLastParams) & (resumeVentilation & ((Y (! resumeVentilation)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! resumeVentilation)) | (! ((! loadLastParams) S ((! loadLastParams) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! resumeVentilation)) | (! ((! loadLastParams) S ((! loadLastParams) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U loadLastParams)))) & (resumeVentilation -> ((! LAST) U loadLastParams)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F loadLastParams)))) & (resumeVentilation -> (F loadLastParams)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F loadLastParams)))) & (resumeVentilation -> (F loadLastParams)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U loadLastParams)))) & (resumeVentilation -> ((! LAST) U loadLastParams)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not resumeVentilation)) or ( not (SI( (resumeVentilation and ((YtoPre( not resumeVentilation)) or FTP)), ( not loadLastParams) ))))",
            "component": "System"
        },
        "_id": "10409830-a713-11ee-96fd-d123a34b0d6c"
    },
    {
        "reqid": "FUN8_3",
        "parent_reqid": "",
        "project": "Ventilator v0.4.1",
        "rationale": "The system shall time stamp all alarm events either via the date and time, the elapsed time since the occurrence of the alarm condition, or the elapsed time from the start of use of system",
        "comments": "Not sure this is formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "1040bf40-a713-11ee-96fd-d123a34b0d6c"
    }
]
