[
    {
        "reqid": "CONT13",
        "parent_reqid": "FUN5_1",
        "project": "Ventilator v0.5",
        "rationale": "The controller shall check the communication of the controller with the sensors and valves.",
        "comments": "Oisín: Because of this requirement and CONT14, I decided to make FUN5.1 more detailed.",
        "fulltext": "in StartUpMode System shall satisfy checkCommsSensors & checkCommsValves",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "checkCommsSensors",
                "checkCommsValves"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(checkCommsSensors & checkCommsValves)",
            "responseTextRange": [
                28,
                71
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(checkCommsSensors & checkCommsValves)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "(checkCommsSensors & checkCommsValves)",
            "post_condition_unexp_ft": "(checkCommsSensors & checkCommsValves)",
            "post_condition_SMV_pt": "(checkCommsSensors & checkCommsValves)",
            "post_condition_SMV_ft": "(checkCommsSensors & checkCommsValves)",
            "post_condition_coco_smv": "(checkCommsSensors & checkCommsValves)",
            "post_condition_coco": "(checkCommsSensors and checkCommsValves)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U (checkCommsSensors & checkCommsValves))))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U (checkCommsSensors & checkCommsValves))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (checkCommsSensors & checkCommsValves))))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (checkCommsSensors & checkCommsValves))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U (checkCommsSensors & checkCommsValves))))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (checkCommsSensors & checkCommsValves))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (checkCommsSensors & checkCommsValves)))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (checkCommsSensors & checkCommsValves)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (checkCommsSensors & checkCommsValves)))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (checkCommsSensors & checkCommsValves)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (checkCommsSensors and checkCommsValves)) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (checkCommsSensors and checkCommsValves)) )))))",
            "component": "System"
        },
        "_id": "c0cd93a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT33",
        "parent_reqid": "FUN26",
        "project": "Ventilator v0.5",
        "rationale": "When the inspiratory flow (V_E) drops below a fraction of the peak flow (Expiratory Trigger Setting (ETS)) of a given breath (i.e., it yields the condition V_E<ETS*PeakV_E), the ventilator shall stop providing pressure allowing exhalation.",
        "comments": "Oisín, v0.5: Translated this one directly, I wonder if some of this detail should be put into FUN26 as well.\nCurrent FUN26: \"in PSVMode when Fl1 < ExpiratoryTriggerSensitivity System shall satisfy expirationPhaseStart\"",
        "fulltext": "in PSVMode when V_E<ExpiratoryTriggerSensitivity*PeakV_E System shall satisfy expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "V_E",
                "ExpiratoryTriggerSensitivity",
                "PeakV_E",
                "expirationPhaseStart"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(V_E < ExpiratoryTriggerSensitivity * PeakV_E)",
            "regular_condition": "(V_E < ExpiratoryTriggerSensitivity * PeakV_E)",
            "conditionTextRange": [
                11,
                55
            ],
            "component_name": "System",
            "componentTextRange": [
                57,
                62
            ],
            "post_condition": "(expirationPhaseStart)",
            "responseTextRange": [
                70,
                97
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(V_E < ExpiratoryTriggerSensitivity * PeakV_E)</i></b>, Response = <b><i>(expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(V_E < ExpiratoryTriggerSensitivity * PeakV_E)</i></b> is true and any point in the interval where <b><i>(V_E < ExpiratoryTriggerSensitivity * PeakV_E)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(V_E < (ExpiratoryTriggerSensitivity * PeakV_E))",
            "regular_condition_unexp_ft": "(V_E < (ExpiratoryTriggerSensitivity * PeakV_E))",
            "regular_condition_SMV_pt": "(V_E < (ExpiratoryTriggerSensitivity * PeakV_E))",
            "regular_condition_SMV_ft": "(V_E < (ExpiratoryTriggerSensitivity * PeakV_E))",
            "regular_condition_coco_smv": "(V_E < (ExpiratoryTriggerSensitivity * PeakV_E))",
            "regular_condition_coco": "(V_E < ( ExpiratoryTriggerSensitivity * PeakV_E ))",
            "post_condition_unexp_pt": "expirationPhaseStart",
            "post_condition_unexp_ft": "expirationPhaseStart",
            "post_condition_SMV_pt": "expirationPhaseStart",
            "post_condition_SMV_ft": "expirationPhaseStart",
            "post_condition_coco_smv": "expirationPhaseStart",
            "post_condition_coco": "expirationPhaseStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((! LAST) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)) & (! (Lin_PSVMode | LAST))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((! LAST) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)) & (! (Lin_PSVMode | LAST))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) S ((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & Fin_PSVMode)) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) S ((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & Fin_PSVMode)) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) S ((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (PSVMode & (Z (! PSVMode))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) S ((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (PSVMode & (Z (! PSVMode))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) S ((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((! LAST) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((! LAST) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((! LAST) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & ((! LAST) & ((X (V_E < (ExpiratoryTriggerSensitivity * PeakV_E))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (V_E < ( ExpiratoryTriggerSensitivity * PeakV_E ))) )) or ( not (SI( ((V_E < ( ExpiratoryTriggerSensitivity * PeakV_E )) and ((YtoPre( not (V_E < ( ExpiratoryTriggerSensitivity * PeakV_E )))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not expirationPhaseStart) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (V_E < ( ExpiratoryTriggerSensitivity * PeakV_E ))) )) or ( not (SI( ((V_E < ( ExpiratoryTriggerSensitivity * PeakV_E )) and ((YtoPre( not (V_E < ( ExpiratoryTriggerSensitivity * PeakV_E )))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not expirationPhaseStart) ))))))",
            "component": "System"
        },
        "_id": "c0cdbab0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT19",
        "parent_reqid": "FUN6",
        "project": "Ventilator v0.5",
        "rationale": "If the SelfTest fails, the controller shall not be able to proceed to ventilation.",
        "comments": "Oisín, v0.5: Trying to be direct with the translation makes this one weirdly different to FUN7.",
        "fulltext": "in SelfTestMode if SelfTestFail System shall until off satisfy !StandbyMode & !ventilating",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "SelfTestFail",
                "off",
                "StandbyMode",
                "ventilating"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(SelfTestFail)",
            "regular_condition": "(SelfTestFail)",
            "conditionTextRange": [
                16,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "stop_condition": "(off)",
            "timingTextRange": [
                45,
                53
            ],
            "post_condition": "(! StandbyMode & ! ventilating)",
            "responseTextRange": [
                55,
                89
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, TC = <b><i>(SelfTestFail)</i></b>, SC = <b><i>(off)</i></b>, Response = <b><i>(! StandbyMode & ! ventilating)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(SelfTestFail)</i></b> is true and any point in the interval where <b><i>(SelfTestFail)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "regular_condition_unexp_pt": "SelfTestFail",
            "regular_condition_unexp_ft": "SelfTestFail",
            "regular_condition_SMV_pt": "SelfTestFail",
            "regular_condition_SMV_ft": "SelfTestFail",
            "regular_condition_coco_smv": "SelfTestFail",
            "regular_condition_coco": "SelfTestFail",
            "post_condition_unexp_pt": "((! StandbyMode) & (! ventilating))",
            "post_condition_unexp_ft": "((! StandbyMode) & (! ventilating))",
            "post_condition_SMV_pt": "((! StandbyMode) & (! ventilating))",
            "post_condition_SMV_ft": "((! StandbyMode) & (! ventilating))",
            "post_condition_coco_smv": "((! StandbyMode) & (! ventilating))",
            "post_condition_coco": "(( not StandbyMode) and ( not ventilating))",
            "stop_condition_unexp_pt": "off",
            "stop_condition_unexp_ft": "off",
            "stop_condition_SMV_pt": "off",
            "stop_condition_SMV_ft": "off",
            "stop_condition_coco_smv": "off",
            "stop_condition_coco": "off",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X (((Lin_SelfTestMode | LAST) V (((! SelfTestFail) & ((! LAST) & ((X SelfTestFail) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (((! off) & (! (Lin_SelfTestMode | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (Lin_SelfTestMode | LAST)) | (Lin_SelfTestMode | LAST)) V ((! StandbyMode) & (! ventilating))))) & (! (Lin_SelfTestMode | LAST))))) & (SelfTestFail -> ((! (((! off) & (! (Lin_SelfTestMode | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (Lin_SelfTestMode | LAST)) | (Lin_SelfTestMode | LAST)) V ((! StandbyMode) & (! ventilating))))))))) & (SelfTestMode -> (((Lin_SelfTestMode | LAST) V (((! SelfTestFail) & ((! LAST) & ((X SelfTestFail) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (((! off) & (! (Lin_SelfTestMode | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (Lin_SelfTestMode | LAST)) | (Lin_SelfTestMode | LAST)) V ((! StandbyMode) & (! ventilating))))) & (! (Lin_SelfTestMode | LAST))))) & (SelfTestFail -> ((! (((! off) & (! (Lin_SelfTestMode | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (Lin_SelfTestMode | LAST)) | (Lin_SelfTestMode | LAST)) V ((! StandbyMode) & (! ventilating))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_SelfTestMode -> (Y ((((! SelfTestFail) S ((! SelfTestFail) & Fin_SelfTestMode)) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | Fin_SelfTestMode)))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & Fin_SelfTestMode)) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | Fin_SelfTestMode)))) -> ((! StandbyMode) & (! ventilating)))) & Fin_SelfTestMode))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> ((((! SelfTestFail) S ((! SelfTestFail) & Fin_SelfTestMode)) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | Fin_SelfTestMode)))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & Fin_SelfTestMode)) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | Fin_SelfTestMode)))) -> ((! StandbyMode) & (! ventilating)))) & Fin_SelfTestMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) & (SelfTestMode & (Z (! SelfTestMode)))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) & (SelfTestMode & (Z (! SelfTestMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))))) -> ((! StandbyMode) & (! ventilating)))) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! SelfTestFail) & ((! LAST) & ((X SelfTestFail) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((! off) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) | (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) V ((! StandbyMode) & (! ventilating))))) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & (SelfTestFail -> ((! (((! off) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) | (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) V ((! StandbyMode) & (! ventilating))))))))) & (SelfTestMode -> (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! SelfTestFail) & ((! LAST) & ((X SelfTestFail) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((! off) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) | (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) V ((! StandbyMode) & (! ventilating))))) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & (SelfTestFail -> ((! (((! off) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) | (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) V ((! StandbyMode) & (! ventilating))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! SelfTestFail) & ((X SelfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (SelfTestFail -> ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))))))) & (SelfTestMode -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! SelfTestFail) & ((X SelfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (SelfTestFail -> ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! SelfTestFail) & ((X SelfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (SelfTestFail -> ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating)))))))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! SelfTestFail) & ((X SelfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (SelfTestFail -> ((! (((! off) & (! ((SelfTestMode ) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode ) & (X (! SelfTestMode)))) | ((SelfTestMode ) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating)))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! SelfTestFail) & ((! LAST) & ((X SelfTestFail) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! (((! off) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) | ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & (SelfTestFail -> ((! (((! off) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) | ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating)))))))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! SelfTestFail) & ((! LAST) & ((X SelfTestFail) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! (((! off) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) | ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating))))) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & (SelfTestFail -> ((! (((! off) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))) U ((! ((! StandbyMode) & (! ventilating))) & (! off)))) | (((((! StandbyMode) & (! ventilating)) & ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) | ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) V ((! StandbyMode) & (! ventilating)))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $stop_condition_coco$) )) => $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $stop_condition_coco$) )) => $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre(SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not SelfTestFail) )) or ((SI( (SelfTestFail and ((YtoPre( not SelfTestFail)) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not off) )) => (( not StandbyMode) and ( not ventilating)))) ))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not SelfTestFail) )) or ((SI( (SelfTestFail and ((YtoPre( not SelfTestFail)) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not off) )) => (( not StandbyMode) and ( not ventilating)))) ))))",
            "component": "System"
        },
        "_id": "c0cde1c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT36_2",
        "parent_reqid": "FUN28",
        "project": "Ventilator v0.5",
        "rationale": "If the controller is in expiration phase and a spontaneous breath is not detected (i.e., the condition drop(PAW) > ITS_PSV ) is false), within the interval [min_exp_time_psv : apnea lag], if the Expiratory Pause is set by the GUI, an Expiratory Pause shall start (see CONT.42).",
        "comments": "CONT27: in PCVMode when expiratoryPauseButton & ExpiratoryPhaseEnd & !patientBreathingRequest System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose\n\nOisín, v0.5: Sort of a duplicate of CONT27, but with a timing interval for some reason.",
        "fulltext": "while PSVMode when expiratoryPauseButton & expClock <= apneaLagTime & !patientBreathingRequest System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "expiratoryPauseButton",
                "expClock",
                "apneaLagTime",
                "patientBreathingRequest",
                "buttonUnPressOr60Seconds",
                "expirationPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(PSVMode)",
            "scopeTextRange": [
                0,
                12
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPauseButton & expClock <= apneaLagTime & ! patientBreathingRequest)",
            "regular_condition": "(expiratoryPauseButton & expClock <= apneaLagTime & ! patientBreathingRequest)",
            "conditionTextRange": [
                14,
                93
            ],
            "component_name": "System",
            "componentTextRange": [
                95,
                100
            ],
            "stop_condition": "(buttonUnPressOr60Seconds)",
            "timingTextRange": [
                108,
                137
            ],
            "post_condition": "(expirationPhaseEnd & inValveClose & outValveClose)",
            "responseTextRange": [
                139,
                195
            ],
            "diagramVariables": "M = <b><i>(PSVMode)</i></b>,, TC = <b><i>(expiratoryPauseButton & expClock <= apneaLagTime & ! patientBreathingRequest)</i></b>, SC = <b><i>(buttonUnPressOr60Seconds)</i></b>, Response = <b><i>(expirationPhaseEnd & inValveClose & outValveClose)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PSVMode)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(expiratoryPauseButton & expClock <= apneaLagTime & ! patientBreathingRequest)</i></b> is true and any point in the interval where <b><i>(expiratoryPauseButton & expClock <= apneaLagTime & ! patientBreathingRequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))",
            "regular_condition_unexp_ft": "((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))",
            "regular_condition_SMV_pt": "((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))",
            "regular_condition_SMV_ft": "((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))",
            "regular_condition_coco_smv": "((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))",
            "regular_condition_coco": "((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest))",
            "post_condition_unexp_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_unexp_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco_smv": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco": "((expirationPhaseEnd and inValveClose) and outValveClose)",
            "stop_condition_unexp_pt": "buttonUnPressOr60Seconds",
            "stop_condition_unexp_ft": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_pt": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_ft": "buttonUnPressOr60Seconds",
            "stop_condition_coco_smv": "buttonUnPressOr60Seconds",
            "stop_condition_coco": "buttonUnPressOr60Seconds",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PSVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PSVMode | LAST)) | (Lin_PSVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (Lin_PSVMode | LAST))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PSVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PSVMode | LAST)) | (Lin_PSVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PSVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PSVMode | LAST)) | (Lin_PSVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (Lin_PSVMode | LAST))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PSVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PSVMode | LAST)) | (Lin_PSVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_PSVMode -> (Y ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & Fin_PSVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | Fin_PSVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & Fin_PSVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | Fin_PSVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & Fin_PSVMode))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & Fin_PSVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | Fin_PSVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & Fin_PSVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | Fin_PSVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & Fin_PSVMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PSVMode & (Z (! PSVMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) | (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) | (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) | (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) | (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode & (! LAST)) & (X (! PSVMode)))) | ((PSVMode & (! LAST)) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode & (! LAST)) & (X (! PSVMode)))) | ((PSVMode & (! LAST)) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode & (! LAST)) & (X (! PSVMode)))) | ((PSVMode & (! LAST)) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PSVMode & (! LAST)) & (X (! PSVMode)))) | ((PSVMode & (! LAST)) & (X (! PSVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $stop_condition_coco$) )) => $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $stop_condition_coco$) )) => $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre(SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not ((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest))) )) or ((SI( (((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest)) and ((YtoPre( not ((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest)))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not buttonUnPressOr60Seconds) )) => ((expirationPhaseEnd and inValveClose) and outValveClose))) ))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => (SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not ((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest))) )) or ((SI( (((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest)) and ((YtoPre( not ((expiratoryPauseButton and (expClock <= apneaLagTime)) and ( not patientBreathingRequest)))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not buttonUnPressOr60Seconds) )) => ((expirationPhaseEnd and inValveClose) and outValveClose))) ))))",
            "component": "System"
        },
        "_id": "c0ce2fe0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT14",
        "parent_reqid": "FUN5_1",
        "project": "Ventilator v0.5",
        "rationale": " The controller shall check the communication of the controller with GUI.",
        "comments": "",
        "fulltext": "in StartUpMode System shall satisfy checkCommsGUI",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "checkCommsGUI"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(checkCommsGUI)",
            "responseTextRange": [
                28,
                48
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(checkCommsGUI)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "checkCommsGUI",
            "post_condition_unexp_ft": "checkCommsGUI",
            "post_condition_SMV_pt": "checkCommsGUI",
            "post_condition_SMV_ft": "checkCommsGUI",
            "post_condition_coco_smv": "checkCommsGUI",
            "post_condition_coco": "checkCommsGUI",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U checkCommsGUI)))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U checkCommsGUI)))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! checkCommsGUI) S ((! checkCommsGUI) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! checkCommsGUI) S ((! checkCommsGUI) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! checkCommsGUI) S ((! checkCommsGUI) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! checkCommsGUI) S ((! checkCommsGUI) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! checkCommsGUI) S ((! checkCommsGUI) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U checkCommsGUI)))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U checkCommsGUI)))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U checkCommsGUI)))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U checkCommsGUI)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U checkCommsGUI))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U checkCommsGUI))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U checkCommsGUI))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U checkCommsGUI))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not checkCommsGUI) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not checkCommsGUI) )))))",
            "component": "System"
        },
        "_id": "c0ce56f0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT21",
        "parent_reqid": "FUN19",
        "project": "Ventilator v0.5",
        "rationale": "The breath cycle shall start with the inspiration phase.",
        "comments": "",
        "fulltext": "in PCVMode when BreathingCycleStart System shall immediately satisfy inspiratoryPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "BreathingCycleStart",
                "inspiratoryPhaseStart"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(BreathingCycleStart)",
            "regular_condition": "(BreathingCycleStart)",
            "conditionTextRange": [
                11,
                34
            ],
            "component_name": "System",
            "componentTextRange": [
                36,
                41
            ],
            "timingTextRange": [
                49,
                59
            ],
            "post_condition": "(inspiratoryPhaseStart)",
            "responseTextRange": [
                61,
                89
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(BreathingCycleStart)</i></b>, Response = <b><i>(inspiratoryPhaseStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(BreathingCycleStart)</i></b> is true and any point in the interval where <b><i>(BreathingCycleStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "BreathingCycleStart",
            "regular_condition_unexp_ft": "BreathingCycleStart",
            "regular_condition_SMV_pt": "BreathingCycleStart",
            "regular_condition_SMV_ft": "BreathingCycleStart",
            "regular_condition_coco_smv": "BreathingCycleStart",
            "regular_condition_coco": "BreathingCycleStart",
            "post_condition_unexp_pt": "inspiratoryPhaseStart",
            "post_condition_unexp_ft": "inspiratoryPhaseStart",
            "post_condition_SMV_pt": "inspiratoryPhaseStart",
            "post_condition_SMV_ft": "inspiratoryPhaseStart",
            "post_condition_coco_smv": "inspiratoryPhaseStart",
            "post_condition_coco": "inspiratoryPhaseStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (Lin_PCVMode | LAST))))) -> ((X inspiratoryPhaseStart) & (! (Lin_PCVMode | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (Lin_PCVMode | LAST))))) -> ((X inspiratoryPhaseStart) & (! (Lin_PCVMode | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_PCVMode -> (Y (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PCVMode)) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PCVMode)) -> inspiratoryPhaseStart) & Fin_PCVMode))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PCVMode)) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PCVMode)) -> inspiratoryPhaseStart) & Fin_PCVMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode))))) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode))))) -> inspiratoryPhaseStart) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode))))) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode))))) -> inspiratoryPhaseStart) & (PCVMode & (Z (! PCVMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) -> inspiratoryPhaseStart) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X inspiratoryPhaseStart) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X inspiratoryPhaseStart) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PCVMode ) & (X (! PCVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PCVMode ) & (X (! PCVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PCVMode ) & (X (! PCVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PCVMode ) & (X (! PCVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X inspiratoryPhaseStart) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X inspiratoryPhaseStart) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre(SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ((BreathingCycleStart and ((YtoPre( not BreathingCycleStart)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))) => inspiratoryPhaseStart) ))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ((BreathingCycleStart and ((YtoPre( not BreathingCycleStart)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))) => inspiratoryPhaseStart) ))))",
            "component": "System"
        },
        "_id": "c0ce7e00-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT26",
        "parent_reqid": "FUN21",
        "project": "Ventilator v0.5",
        "rationale": "Within the trigger window during the expiratory phase, in the case of spontaneous breathing, the ventilator shall trigger a new breathing cycle (i.e., it goes in inspiration phase) when it detects a sudden drop in pressure above the inhale trigger sensitivity (i.e., it yields the condition drop(PAW) > ITS_PCV )). Note that drop is positive if the pressure drops. Rationale: In a pressure-regulated ventilator, the intensity of pressure drops initiated by the patient is the easiest way to detect the spontaneous breathing attempt as per ventilator experts",
        "comments": "Oisín, v0.5: Wrote this one in the context of CONT25",
        "fulltext": "while PCVMode when dropPAW > ITS_PCV System shall immediately satisfy patientBreathingRequest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "dropPAW",
                "ITS_PCV",
                "patientBreathingRequest"
            ],
            "scope_mode": "(PCVMode)",
            "scopeTextRange": [
                0,
                12
            ],
            "qualifier_word": "when",
            "pre_condition": "(dropPAW > ITS_PCV)",
            "regular_condition": "(dropPAW > ITS_PCV)",
            "conditionTextRange": [
                14,
                35
            ],
            "component_name": "System",
            "componentTextRange": [
                37,
                42
            ],
            "timingTextRange": [
                50,
                60
            ],
            "post_condition": "(patientBreathingRequest)",
            "responseTextRange": [
                62,
                92
            ],
            "diagramVariables": "M = <b><i>(PCVMode)</i></b>,, TC = <b><i>(dropPAW > ITS_PCV)</i></b>, Response = <b><i>(patientBreathingRequest)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PCVMode)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(dropPAW > ITS_PCV)</i></b> is true and any point in the interval where <b><i>(dropPAW > ITS_PCV)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "(dropPAW > ITS_PCV)",
            "regular_condition_unexp_ft": "(dropPAW > ITS_PCV)",
            "regular_condition_SMV_pt": "(dropPAW > ITS_PCV)",
            "regular_condition_SMV_ft": "(dropPAW > ITS_PCV)",
            "regular_condition_coco_smv": "(dropPAW > ITS_PCV)",
            "regular_condition_coco": "(dropPAW > ITS_PCV)",
            "post_condition_unexp_pt": "patientBreathingRequest",
            "post_condition_unexp_ft": "patientBreathingRequest",
            "post_condition_SMV_pt": "patientBreathingRequest",
            "post_condition_SMV_ft": "patientBreathingRequest",
            "post_condition_coco_smv": "patientBreathingRequest",
            "post_condition_coco": "patientBreathingRequest",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! (dropPAW > ITS_PCV)) & ((! LAST) & ((X (dropPAW > ITS_PCV)) & (! (Lin_PCVMode | LAST))))) -> ((X patientBreathingRequest) & (! (Lin_PCVMode | LAST))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! (dropPAW > ITS_PCV)) & ((! LAST) & ((X (dropPAW > ITS_PCV)) & (! (Lin_PCVMode | LAST))))) -> ((X patientBreathingRequest) & (! (Lin_PCVMode | LAST))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_PCVMode -> (Y ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | Fin_PCVMode)) -> patientBreathingRequest) S ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | Fin_PCVMode)) -> patientBreathingRequest) & Fin_PCVMode))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | Fin_PCVMode)) -> patientBreathingRequest) S ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | Fin_PCVMode)) -> patientBreathingRequest) & Fin_PCVMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode))))) -> patientBreathingRequest) S ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode))))) -> patientBreathingRequest) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode))))) -> patientBreathingRequest) S ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode))))) -> patientBreathingRequest) & (PCVMode & (Z (! PCVMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) -> patientBreathingRequest) S ((((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) -> patientBreathingRequest) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! (dropPAW > ITS_PCV)) & ((! LAST) & ((X (dropPAW > ITS_PCV)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X patientBreathingRequest) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! (dropPAW > ITS_PCV)) & ((! LAST) & ((X (dropPAW > ITS_PCV)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X patientBreathingRequest) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! (dropPAW > ITS_PCV)) & ((X (dropPAW > ITS_PCV)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X patientBreathingRequest) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! (dropPAW > ITS_PCV)) & ((X (dropPAW > ITS_PCV)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X patientBreathingRequest) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! (dropPAW > ITS_PCV)) & ((X (dropPAW > ITS_PCV)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X patientBreathingRequest) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! (dropPAW > ITS_PCV)) & ((X (dropPAW > ITS_PCV)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X patientBreathingRequest) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! (dropPAW > ITS_PCV)) & ((! LAST) & ((X (dropPAW > ITS_PCV)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X patientBreathingRequest) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! (dropPAW > ITS_PCV)) & ((! LAST) & ((X (dropPAW > ITS_PCV)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X patientBreathingRequest) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & ((dropPAW > ITS_PCV) -> patientBreathingRequest)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre(SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), (((dropPAW > ITS_PCV) and ((YtoPre( not (dropPAW > ITS_PCV))) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))) => patientBreathingRequest) ))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), (((dropPAW > ITS_PCV) and ((YtoPre( not (dropPAW > ITS_PCV))) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))) => patientBreathingRequest) ))))",
            "component": "System"
        },
        "_id": "c0cea510-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1",
        "parent_reqid": "FUN4",
        "project": "Ventilator v0.5",
        "rationale": "The controller shall implement the following modes (see\nFigure 4.1):",
        "comments": "Oisín: This requirement doesn't really exist to be honest, it's just grouping the other mode-related CONT requirements. After discussion, made it a list of the modes (so a copy of FUN4).",
        "fulltext": "System shall satisfy StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "SelfTestMode",
                "StandbyMode",
                "PCVMode",
                "PSVMode",
                "FailSafeMode"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode)",
            "responseTextRange": [
                13,
                95
            ],
            "diagramVariables": "Response = <b><i>(StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_unexp_ft": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_SMV_pt": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_SMV_ft": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_coco_smv": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_coco": "(((((StartUpMode or SelfTestMode) or StandbyMode) or PCVMode) or PSVMode) or FailSafeMode)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((((((StartUpMode or SelfTestMode) or StandbyMode) or PCVMode) or PSVMode) or FailSafeMode)))",
            "component": "System"
        },
        "_id": "c0cef330-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT34",
        "parent_reqid": "FUN29",
        "project": "Ventilator v0.5",
        "rationale": "At the end of an inspiration phase, if the Inspiratory Pause is set by the GUI, an Inspiratory Pause shall start (see CONT.41).",
        "comments": "Oisín, v0.5: Duplicate of CONT23 for PSVMode",
        "fulltext": "while PSVMode & inspiratoryPauseButton when inspiratoryPhaseEnd System shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "inspiratoryPauseButton",
                "inspiratoryPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(PSVMode & inspiratoryPauseButton)",
            "scopeTextRange": [
                0,
                37
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPhaseEnd)",
            "regular_condition": "(inspiratoryPhaseEnd)",
            "conditionTextRange": [
                39,
                62
            ],
            "component_name": "System",
            "componentTextRange": [
                64,
                69
            ],
            "duration": "40",
            "timingTextRange": [
                77,
                90
            ],
            "post_condition": "(( inspiratoryPauseButton => inValveClose & outValveClose ))",
            "responseTextRange": [
                92,
                155
            ],
            "diagramVariables": "M = <b><i>(PSVMode & inspiratoryPauseButton)</i></b>,, TC = <b><i>(inspiratoryPhaseEnd)</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(( inspiratoryPauseButton => inValveClose & outValveClose ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PSVMode & inspiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>40</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>40</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>40</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_for_satisfaction.svg",
            "scope_mode_pt": "(PSVMode & inspiratoryPauseButton)",
            "scope_mode_coco": "(PSVMode and inspiratoryPauseButton)",
            "scope_mode_ft": "(PSVMode & inspiratoryPauseButton)",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_unexp_ft": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_pt": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_ft": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco_smv": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco": "(inspiratoryPauseButton => (inValveClose and outValveClose))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_(PSVMode & inspiratoryPauseButton) & (! LAST))) | (X (((Lin_(PSVMode & inspiratoryPauseButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PSVMode & inspiratoryPauseButton) | LAST))))) -> ((X ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PSVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_(PSVMode & inspiratoryPauseButton) | LAST))))) & (inspiratoryPhaseEnd -> ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PSVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & ((PSVMode & inspiratoryPauseButton) -> (((Lin_(PSVMode & inspiratoryPauseButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PSVMode & inspiratoryPauseButton) | LAST))))) -> ((X ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PSVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_(PSVMode & inspiratoryPauseButton) | LAST))))) & (inspiratoryPhaseEnd -> ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PSVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_(PSVMode & inspiratoryPauseButton) -> (Y (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PSVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PSVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PSVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PSVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_(PSVMode & inspiratoryPauseButton)))))) & (((! Lin_(PSVMode & inspiratoryPauseButton)) S ((! Lin_(PSVMode & inspiratoryPauseButton)) & Fin_(PSVMode & inspiratoryPauseButton))) -> (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PSVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PSVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PSVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PSVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_(PSVMode & inspiratoryPauseButton)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton))) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))))) & (((! ((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton)))) S ((! ((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton)))) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) -> (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton))) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PSVMode & inspiratoryPauseButton)))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PSVMode & inspiratoryPauseButton))))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PSVMode & inspiratoryPauseButton)))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PSVMode & inspiratoryPauseButton))))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PSVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PSVMode & inspiratoryPauseButton))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! (PSVMode & inspiratoryPauseButton)) & (! LAST)) & (X (PSVMode & inspiratoryPauseButton))) & (! LAST))) | (X ((((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & ((PSVMode & inspiratoryPauseButton) -> ((((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! (PSVMode & inspiratoryPauseButton)) ) & (X (PSVMode & inspiratoryPauseButton)))) | (X (((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & ((PSVMode & inspiratoryPauseButton) -> (((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! (PSVMode & inspiratoryPauseButton)) ) & (X (PSVMode & inspiratoryPauseButton)))) | (X ((F (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton))))) -> (((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & ((PSVMode & inspiratoryPauseButton) -> ((F (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton))))) -> (((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) ) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PSVMode & inspiratoryPauseButton)) & (! LAST)) & (X (PSVMode & inspiratoryPauseButton))) & (! LAST))) | (X (((! LAST) U (((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton))))) -> (((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & ((PSVMode & inspiratoryPauseButton) -> (((! LAST) U (((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton))))) -> (((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PSVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PSVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not (PSVMode and inspiratoryPauseButton)) and (YtoPre((PSVMode and inspiratoryPauseButton)))) => (YtoPre(SI( ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))), ((OT(40,0,(inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))))))) => ((SI( ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))), ( not inspiratoryPhaseEnd) )) or (inspiratoryPauseButton => (inValveClose and outValveClose)))) ))))) and ((SI( ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))), ( not (( not (PSVMode and inspiratoryPauseButton)) and (YtoPre((PSVMode and inspiratoryPauseButton))))) )) => (SI( ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))), ((OT(40,0,(inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))))))) => ((SI( ((PSVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PSVMode and inspiratoryPauseButton))))), ( not inspiratoryPhaseEnd) )) or (inspiratoryPauseButton => (inValveClose and outValveClose)))) ))))",
            "component": "System"
        },
        "_id": "c0cf1a40-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT31",
        "parent_reqid": "FUN24",
        "project": "Ventilator v0.5",
        "rationale": "The target inspiratory pressure level shall be controlled\nby the Inspiratory Pressure parameter (P_inspPSV ).",
        "comments": "Oisín, v0.5: The same as CONT28, still don't really know what to do with these",
        "fulltext": "",
        "semantics": {},
        "_id": "c0cf6860-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT38",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "When the ventilator is in Start-up or VentilationOff mode, the in valve pressure shall be set to close and the out valve shall be open.\nRationale: if the machine is not ventilating the valves are in a secure configuration state, in valve is closed and out valve is opened.",
        "comments": "",
        "fulltext": "while StartUpMode | StandbyMode System shall satisfy inValveClose & outValveOpen",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "StandbyMode",
                "inValveClose",
                "outValveOpen"
            ],
            "scope_mode": "(StartUpMode | StandbyMode)",
            "scopeTextRange": [
                0,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(inValveClose & outValveOpen)",
            "responseTextRange": [
                45,
                79
            ],
            "diagramVariables": "M = <b><i>(StartUpMode | StandbyMode)</i></b>,, Response = <b><i>(inValveClose & outValveOpen)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(StartUpMode | StandbyMode)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "(StartUpMode | StandbyMode)",
            "scope_mode_coco": "(StartUpMode or StandbyMode)",
            "scope_mode_ft": "(StartUpMode | StandbyMode)",
            "post_condition_unexp_pt": "(inValveClose & outValveOpen)",
            "post_condition_unexp_ft": "(inValveClose & outValveOpen)",
            "post_condition_SMV_pt": "(inValveClose & outValveOpen)",
            "post_condition_SMV_ft": "(inValveClose & outValveOpen)",
            "post_condition_coco_smv": "(inValveClose & outValveOpen)",
            "post_condition_coco": "(inValveClose and outValveOpen)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_(StartUpMode | StandbyMode) & (! LAST))) | (X ((! (Lin_(StartUpMode | StandbyMode) | LAST)) U (inValveClose & outValveOpen))))) & ((StartUpMode | StandbyMode) -> ((! (Lin_(StartUpMode | StandbyMode) | LAST)) U (inValveClose & outValveOpen))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_(StartUpMode | StandbyMode) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & Fin_(StartUpMode | StandbyMode))))))) & (((! Lin_(StartUpMode | StandbyMode)) S ((! Lin_(StartUpMode | StandbyMode)) & Fin_(StartUpMode | StandbyMode))) -> (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & Fin_(StartUpMode | StandbyMode))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! (StartUpMode | StandbyMode)) & (Y (StartUpMode | StandbyMode))) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & ((StartUpMode | StandbyMode) & (Z (! (StartUpMode | StandbyMode)))))))))) & (((! ((! (StartUpMode | StandbyMode)) & (Y (StartUpMode | StandbyMode)))) S ((! ((! (StartUpMode | StandbyMode)) & (Y (StartUpMode | StandbyMode)))) & ((StartUpMode | StandbyMode) & (Z (! (StartUpMode | StandbyMode)))))) -> (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & ((StartUpMode | StandbyMode) & (Z (! (StartUpMode | StandbyMode)))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! (StartUpMode | StandbyMode)) & (Y (StartUpMode | StandbyMode))) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & ((StartUpMode | StandbyMode) & ((! (Y TRUE)) | (Y (! (StartUpMode | StandbyMode)))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! (StartUpMode | StandbyMode)) & (! LAST)) & (X (StartUpMode | StandbyMode))) & (! LAST))) | (X ((! ((((StartUpMode | StandbyMode) & (! LAST)) & (X (! (StartUpMode | StandbyMode)))) | LAST)) U (inValveClose & outValveOpen))))) & ((StartUpMode | StandbyMode) -> ((! ((((StartUpMode | StandbyMode) & (! LAST)) & (X (! (StartUpMode | StandbyMode)))) | LAST)) U (inValveClose & outValveOpen))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! (StartUpMode | StandbyMode)) ) & (X (StartUpMode | StandbyMode)))) | (X ((! (((StartUpMode | StandbyMode) ) & (X (! (StartUpMode | StandbyMode))))) U (inValveClose & outValveOpen))))) & ((StartUpMode | StandbyMode) -> ((! (((StartUpMode | StandbyMode) ) & (X (! (StartUpMode | StandbyMode))))) U (inValveClose & outValveOpen))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! (StartUpMode | StandbyMode)) ) & (X (StartUpMode | StandbyMode)))) | (X ((F (((StartUpMode | StandbyMode) ) & (X (! (StartUpMode | StandbyMode))))) -> ((! (((StartUpMode | StandbyMode) ) & (X (! (StartUpMode | StandbyMode))))) U (inValveClose & outValveOpen)))))) & ((StartUpMode | StandbyMode) -> ((F (((StartUpMode | StandbyMode) ) & (X (! (StartUpMode | StandbyMode))))) -> ((! (((StartUpMode | StandbyMode) ) & (X (! (StartUpMode | StandbyMode))))) U (inValveClose & outValveOpen)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (StartUpMode | StandbyMode)) & (! LAST)) & (X (StartUpMode | StandbyMode))) & (! LAST))) | (X (((! LAST) U (((StartUpMode | StandbyMode) & (! LAST)) & (X (! (StartUpMode | StandbyMode))))) -> ((! (((StartUpMode | StandbyMode) & (! LAST)) & (X (! (StartUpMode | StandbyMode))))) U (inValveClose & outValveOpen)))))) & ((StartUpMode | StandbyMode) -> (((! LAST) U (((StartUpMode | StandbyMode) & (! LAST)) & (X (! (StartUpMode | StandbyMode))))) -> ((! (((StartUpMode | StandbyMode) & (! LAST)) & (X (! (StartUpMode | StandbyMode))))) U (inValveClose & outValveOpen)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not (StartUpMode or StandbyMode)) and (YtoPre((StartUpMode or StandbyMode)))) => (YtoPre( not (SI( ((StartUpMode or StandbyMode) and (FTP or (YtoPre( not (StartUpMode or StandbyMode))))), ( not (inValveClose and outValveOpen)) )))))) and ((SI( ((StartUpMode or StandbyMode) and (FTP or (YtoPre( not (StartUpMode or StandbyMode))))), ( not (( not (StartUpMode or StandbyMode)) and (YtoPre((StartUpMode or StandbyMode))))) )) => ( not (SI( ((StartUpMode or StandbyMode) and (FTP or (YtoPre( not (StartUpMode or StandbyMode))))), ( not (inValveClose and outValveOpen)) )))))",
            "component": "System"
        },
        "_id": "c0cf8f70-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT41",
        "parent_reqid": "FUN29",
        "project": "Ventilator v0.5",
        "rationale": "In PCV and PSV modes there shall be the possibility to initiate an Inspiratory Pause if it is set by the GUI.\nRationale: The Inspiratory Pause will initiate a forced hold at the end of inspiration, allowing for the measurement of the Plateau Pressure (PP), the pressure reached inside the alveoli at the end of the inspiratory cycle. PP may be lower than the Set Inspiratory Pressure (SIP) provided by the ventilator. The difference between PP and the PEEP is called Driving Pressure, DP (DP = PP - PEEP).",
        "comments": "FUN29: while inspiratoryPauseButton when (inspiratoryPhaseEnd) System shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose)\n\nOisín, v0.5: I don't undertsand why this requirement exists, CONT23 & CONT34 already cover it. I think this is the most direct translation of this in FRETISH.",
        "fulltext": "while (PCVMode | PSVMode) when inspiratoryPauseButton System shall eventually satisfy inspiratoryPause | !inspiratoryPauseButton ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVMode",
                "inspiratoryPauseButton",
                "inspiratoryPause"
            ],
            "scope_mode": "(( PCVMode | PSVMode ))",
            "scopeTextRange": [
                0,
                24
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPauseButton)",
            "regular_condition": "(inspiratoryPauseButton)",
            "conditionTextRange": [
                26,
                52
            ],
            "component_name": "System",
            "componentTextRange": [
                54,
                59
            ],
            "timingTextRange": [
                67,
                76
            ],
            "post_condition": "(inspiratoryPause | ! inspiratoryPauseButton)",
            "responseTextRange": [
                78,
                127
            ],
            "diagramVariables": "M = <b><i>(( PCVMode | PSVMode ))</i></b>,, TC = <b><i>(inspiratoryPauseButton)</i></b>, Response = <b><i>(inspiratoryPause | ! inspiratoryPauseButton)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(( PCVMode | PSVMode ))</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPauseButton)</i></b> is true and any point in the interval where <b><i>(inspiratoryPauseButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "(PCVMode | PSVMode)",
            "scope_mode_coco": "(PCVMode or PSVMode)",
            "scope_mode_ft": "(PCVMode | PSVMode)",
            "regular_condition_unexp_pt": "inspiratoryPauseButton",
            "regular_condition_unexp_ft": "inspiratoryPauseButton",
            "regular_condition_SMV_pt": "inspiratoryPauseButton",
            "regular_condition_SMV_ft": "inspiratoryPauseButton",
            "regular_condition_coco_smv": "inspiratoryPauseButton",
            "regular_condition_coco": "inspiratoryPauseButton",
            "post_condition_unexp_pt": "(inspiratoryPause | (! inspiratoryPauseButton))",
            "post_condition_unexp_ft": "(inspiratoryPause | (! inspiratoryPauseButton))",
            "post_condition_SMV_pt": "(inspiratoryPause | (! inspiratoryPauseButton))",
            "post_condition_SMV_ft": "(inspiratoryPause | (! inspiratoryPauseButton))",
            "post_condition_coco_smv": "(inspiratoryPause | (! inspiratoryPauseButton))",
            "post_condition_coco": "(inspiratoryPause or ( not inspiratoryPauseButton))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_(PCVMode | PSVMode) & (! LAST))) | (X (((Lin_(PCVMode | PSVMode) | LAST) V (((! inspiratoryPauseButton) & ((! LAST) & ((X inspiratoryPauseButton) & (! (Lin_(PCVMode | PSVMode) | LAST))))) -> ((X ((! (Lin_(PCVMode | PSVMode) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (Lin_(PCVMode | PSVMode) | LAST))))) & (inspiratoryPauseButton -> ((! (Lin_(PCVMode | PSVMode) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))))))) & ((PCVMode | PSVMode) -> (((Lin_(PCVMode | PSVMode) | LAST) V (((! inspiratoryPauseButton) & ((! LAST) & ((X inspiratoryPauseButton) & (! (Lin_(PCVMode | PSVMode) | LAST))))) -> ((X ((! (Lin_(PCVMode | PSVMode) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (Lin_(PCVMode | PSVMode) | LAST))))) & (inspiratoryPauseButton -> ((! (Lin_(PCVMode | PSVMode) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_(PCVMode | PSVMode) -> (Y (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & Fin_(PCVMode | PSVMode))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | Fin_(PCVMode | PSVMode)))))))))) & (((! Lin_(PCVMode | PSVMode)) S ((! Lin_(PCVMode | PSVMode)) & Fin_(PCVMode | PSVMode))) -> (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & Fin_(PCVMode | PSVMode))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | Fin_(PCVMode | PSVMode)))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode))) -> (Y (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))))) & (((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) S ((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) -> (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode))) -> (Y (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & ((PCVMode | PSVMode) & ((! (Y TRUE)) | (Y (! (PCVMode | PSVMode))))))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | ((PCVMode | PSVMode) & ((! (Y TRUE)) | (Y (! (PCVMode | PSVMode))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! (PCVMode | PSVMode)) & (! LAST)) & (X (PCVMode | PSVMode))) & (! LAST))) | (X ((((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST) V (((! inspiratoryPauseButton) & ((! LAST) & ((X inspiratoryPauseButton) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) -> ((X ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) & (inspiratoryPauseButton -> ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))))))) & ((PCVMode | PSVMode) -> ((((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST) V (((! inspiratoryPauseButton) & ((! LAST) & ((X inspiratoryPauseButton) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) -> ((X ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) & (inspiratoryPauseButton -> ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (inspiratoryPause | (! inspiratoryPauseButton)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! (PCVMode | PSVMode)) ) & (X (PCVMode | PSVMode)))) | (X (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! inspiratoryPauseButton) & ((X inspiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (inspiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))))))) & ((PCVMode | PSVMode) -> (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! inspiratoryPauseButton) & ((X inspiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (inspiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! (PCVMode | PSVMode)) ) & (X (PCVMode | PSVMode)))) | (X ((F (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! inspiratoryPauseButton) & ((X inspiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (inspiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton))))))))) & ((PCVMode | PSVMode) -> ((F (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! inspiratoryPauseButton) & ((X inspiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (inspiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PCVMode | PSVMode)) & (! LAST)) & (X (PCVMode | PSVMode))) & (! LAST))) | (X (((! LAST) U (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) V (((! inspiratoryPauseButton) & ((! LAST) & ((X inspiratoryPauseButton) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) -> ((X ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) & (inspiratoryPauseButton -> ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton))))))))) & ((PCVMode | PSVMode) -> (((! LAST) U (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) V (((! inspiratoryPauseButton) & ((! LAST) & ((X inspiratoryPauseButton) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) -> ((X ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton)))) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) & (inspiratoryPauseButton -> ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (inspiratoryPause | (! inspiratoryPauseButton))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not (PCVMode or PSVMode)) and (YtoPre((PCVMode or PSVMode)))) => (YtoPre((SI( ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))), ( not inspiratoryPauseButton) )) or ( not (SI( (inspiratoryPauseButton and ((YtoPre( not inspiratoryPauseButton)) or ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))))), ( not (inspiratoryPause or ( not inspiratoryPauseButton))) ))))))) and ((SI( ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))), ( not (( not (PCVMode or PSVMode)) and (YtoPre((PCVMode or PSVMode))))) )) => ((SI( ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))), ( not inspiratoryPauseButton) )) or ( not (SI( (inspiratoryPauseButton and ((YtoPre( not inspiratoryPauseButton)) or ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))))), ( not (inspiratoryPause or ( not inspiratoryPauseButton))) ))))))",
            "component": "System"
        },
        "_id": "c0cfb680-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT32",
        "parent_reqid": "FUN40",
        "project": "Ventilator v0.5",
        "rationale": "The inspiration phase lasts until the inspiration peak is reached but no later than the max_insp_time_psv is over. After that the expiration phase begins.\nRationale: In PSV mode, the ventilator supports the patient who is supposed to breathe spontaneously. In case a spontaneous expiration is not triggered, the ventilator forces the expiration phase after a suitable timeout (around 7 sec) to wait for a spontaneous breath",
        "comments": "if P_insp > MaxP_insp System shall satisfy inspiratoryPhaseEnd & expirationPhaseStart\n\nOisín, v0.5: I am using inspiratoryTime for max_insp_time_psv here for consistency, I'm pretty sure those are the same thing.",
        "fulltext": "in PSVMode System shall until (P_insp >= MaxP_insp | inspClock >= inspiratoryTime) satisfy inspiratoryPhase",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "P_insp",
                "MaxP_insp",
                "inspClock",
                "inspiratoryTime",
                "inspiratoryPhase"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "stop_condition": "(( P_insp >= MaxP_insp | inspClock >= inspiratoryTime ))",
            "timingTextRange": [
                24,
                81
            ],
            "post_condition": "(inspiratoryPhase)",
            "responseTextRange": [
                83,
                106
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, SC = <b><i>(( P_insp >= MaxP_insp | inspClock >= inspiratoryTime ))</i></b>, Response = <b><i>(inspiratoryPhase)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_until_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "post_condition_unexp_pt": "inspiratoryPhase",
            "post_condition_unexp_ft": "inspiratoryPhase",
            "post_condition_SMV_pt": "inspiratoryPhase",
            "post_condition_SMV_ft": "inspiratoryPhase",
            "post_condition_coco_smv": "inspiratoryPhase",
            "post_condition_coco": "inspiratoryPhase",
            "stop_condition_unexp_pt": "((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))",
            "stop_condition_unexp_ft": "((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))",
            "stop_condition_SMV_pt": "((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))",
            "stop_condition_SMV_ft": "((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))",
            "stop_condition_coco_smv": "((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))",
            "stop_condition_coco": "((P_insp >= MaxP_insp) or (inspClock >= inspiratoryTime))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! (Lin_PSVMode | LAST))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & (Lin_PSVMode | LAST)) | (Lin_PSVMode | LAST)) V inspiratoryPhase))))) & (PSVMode -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! (Lin_PSVMode | LAST))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & (Lin_PSVMode | LAST)) | (Lin_PSVMode | LAST)) V inspiratoryPhase))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_PSVMode -> (Y ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & Fin_PSVMode)) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & Fin_PSVMode)) -> inspiratoryPhase) & Fin_PSVMode))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & Fin_PSVMode)) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & Fin_PSVMode)) -> inspiratoryPhase) & Fin_PSVMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) & (PSVMode & (Z (! PSVMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) -> inspiratoryPhase) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) | (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) V inspiratoryPhase))))) & (PSVMode -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) | (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) V inspiratoryPhase))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V inspiratoryPhase))))) & (PSVMode -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V inspiratoryPhase))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V inspiratoryPhase)))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! ((PSVMode ) & (X (! PSVMode))))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & ((PSVMode ) & (X (! PSVMode)))) | ((PSVMode ) & (X (! PSVMode)))) V inspiratoryPhase)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & ((PSVMode & (! LAST)) & (X (! PSVMode)))) | ((PSVMode & (! LAST)) & (X (! PSVMode)))) V inspiratoryPhase)))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((! (((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))) U ((! inspiratoryPhase) & (! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime)))))) | (((inspiratoryPhase & ((PSVMode & (! LAST)) & (X (! PSVMode)))) | ((PSVMode & (! LAST)) & (X (! PSVMode)))) V inspiratoryPhase)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $stop_condition_coco$) )) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $stop_condition_coco$) )) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre(SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not ((P_insp >= MaxP_insp) or (inspClock >= inspiratoryTime))) )) => inspiratoryPhase) ))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => (SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not ((P_insp >= MaxP_insp) or (inspClock >= inspiratoryTime))) )) => inspiratoryPhase) ))))",
            "component": "System"
        },
        "_id": "c0d004a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT12",
        "parent_reqid": "FUN5",
        "project": "Ventilator v0.5",
        "rationale": "A set of default values for all parameters shall be provided and loaded from a configuration file on the machine when it is turned on. The parameters are listed in Section 3.1.1.",
        "comments": "",
        "fulltext": "in StartUpMode System shall satisfy defaultParamsLoaded",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "defaultParamsLoaded"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(defaultParamsLoaded)",
            "responseTextRange": [
                28,
                54
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(defaultParamsLoaded)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "defaultParamsLoaded",
            "post_condition_unexp_ft": "defaultParamsLoaded",
            "post_condition_SMV_pt": "defaultParamsLoaded",
            "post_condition_SMV_ft": "defaultParamsLoaded",
            "post_condition_coco_smv": "defaultParamsLoaded",
            "post_condition_coco": "defaultParamsLoaded",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U defaultParamsLoaded)))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U defaultParamsLoaded)))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U defaultParamsLoaded)))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U defaultParamsLoaded)))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U defaultParamsLoaded)))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U defaultParamsLoaded)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U defaultParamsLoaded))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U defaultParamsLoaded))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U defaultParamsLoaded))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U defaultParamsLoaded))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not defaultParamsLoaded) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not defaultParamsLoaded) )))))",
            "component": "System"
        },
        "_id": "c0d02bb0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT45",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Before monitoring a sudden drop in pressure above the inhale trigger sensitivity ITS, the controller shall wait for the trigger window (0.7 sec).",
        "comments": "Oisín, v0.5: Is this defining another different value for minExpiratoryTime/min exp time psv (CONT36_3)?",
        "fulltext": "when expirationPhaseStart System shall after 700 milliseconds satisfy monitorInhaleTrigger",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "expirationPhaseStart",
                "monitorInhaleTrigger"
            ],
            "qualifier_word": "when",
            "pre_condition": "(expirationPhaseStart)",
            "regular_condition": "(expirationPhaseStart)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "duration": "700",
            "timingTextRange": [
                39,
                60
            ],
            "post_condition": "(monitorInhaleTrigger)",
            "responseTextRange": [
                62,
                89
            ],
            "diagramVariables": "TC = <b><i>(expirationPhaseStart)</i></b>,  n = <b><i>700</i></b>, Response = <b><i>(monitorInhaleTrigger)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(expirationPhaseStart)</i></b> is true and any point in the interval where <b><i>(expirationPhaseStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>700</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>700</i></b>). Moreover, RES must hold at the point that is at distance <b><i>700</i></b>+1 from the trigger, that is, trigger+<b><i>700</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "expirationPhaseStart",
            "regular_condition_unexp_ft": "expirationPhaseStart",
            "regular_condition_SMV_pt": "expirationPhaseStart",
            "regular_condition_SMV_ft": "expirationPhaseStart",
            "regular_condition_coco_smv": "expirationPhaseStart",
            "regular_condition_coco": "expirationPhaseStart",
            "post_condition_unexp_pt": "monitorInhaleTrigger",
            "post_condition_unexp_ft": "monitorInhaleTrigger",
            "post_condition_SMV_pt": "monitorInhaleTrigger",
            "post_condition_SMV_ft": "monitorInhaleTrigger",
            "post_condition_coco_smv": "monitorInhaleTrigger",
            "post_condition_coco": "monitorInhaleTrigger",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_unexp_ft$ -> (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))",
            "ft": "((LAST V (((! expirationPhaseStart) & ((! LAST) & (X expirationPhaseStart))) -> (X (((G[<=700] (! monitorInhaleTrigger)) | (LAST V (! monitorInhaleTrigger))) & ((F[<=700+1] monitorInhaleTrigger) | (F[<700+1] LAST)))))) & (expirationPhaseStart -> (((G[<=700] (! monitorInhaleTrigger)) | (LAST V (! monitorInhaleTrigger))) & ((F[<=700+1] monitorInhaleTrigger) | (F[<700+1] LAST)))))",
            "pt_fetched": "((H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$+1] (FTP | $post_condition_unexp_pt$)))))",
            "pt": "((H ((O[<=700] (expirationPhaseStart & ((Y (! expirationPhaseStart)) | FTP))) -> ((H (! expirationPhaseStart)) | (! monitorInhaleTrigger)))) & (H ((O[=700+1] ((expirationPhaseStart & ((Y (! expirationPhaseStart)) | FTP)) & (! monitorInhaleTrigger))) -> (O[<700+1] (FTP | monitorInhaleTrigger)))))",
            "ptExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptExpanded": "((H ((O[0,700] (expirationPhaseStart & ((Y (! expirationPhaseStart)) | (! (Y TRUE))))) -> ((H (! expirationPhaseStart)) | (! monitorInhaleTrigger)))) & (H ((O[701,701] ((expirationPhaseStart & ((Y (! expirationPhaseStart)) | (! (Y TRUE)))) & (! monitorInhaleTrigger))) -> (O[0,700] ((! (Y TRUE)) | monitorInhaleTrigger)))))",
            "ptFinBtwExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "((H ((O[0,700] (expirationPhaseStart & ((Y (! expirationPhaseStart)) | (! (Y TRUE))))) -> ((H (! expirationPhaseStart)) | (! monitorInhaleTrigger)))) & (H ((O[701,701] ((expirationPhaseStart & ((Y (! expirationPhaseStart)) | (! (Y TRUE)))) & (! monitorInhaleTrigger))) -> (O[0,700] ((! (Y TRUE)) | monitorInhaleTrigger)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftExpanded": "((LAST V (((! expirationPhaseStart) & ((! LAST) & (X expirationPhaseStart))) -> (X (((G[0,700] (! monitorInhaleTrigger)) | (LAST V (! monitorInhaleTrigger))) & ((F[0,701] monitorInhaleTrigger) | (F[0,700] LAST)))))) & (expirationPhaseStart -> (((G[0,700] (! monitorInhaleTrigger)) | (LAST V (! monitorInhaleTrigger))) & ((F[0,701] monitorInhaleTrigger) | (F[0,700] LAST)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! expirationPhaseStart) & (X expirationPhaseStart)) -> (X (((G[0,700] (! monitorInhaleTrigger)) | (G (! monitorInhaleTrigger))) & (F[0,701] monitorInhaleTrigger))))) & (expirationPhaseStart -> (((G[0,700] (! monitorInhaleTrigger)) | (G (! monitorInhaleTrigger))) & (F[0,701] monitorInhaleTrigger))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! expirationPhaseStart) & (X expirationPhaseStart)) -> (X (((G[0,700] (! monitorInhaleTrigger)) | (G (! monitorInhaleTrigger))) & (F[0,701] monitorInhaleTrigger))))) & (expirationPhaseStart -> (((G[0,700] (! monitorInhaleTrigger)) | (G (! monitorInhaleTrigger))) & (F[0,701] monitorInhaleTrigger))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftFinBtwExpanded": "((LAST V (((! expirationPhaseStart) & ((! LAST) & (X expirationPhaseStart))) -> (X (((G[0,700] (! monitorInhaleTrigger)) | (LAST V (! monitorInhaleTrigger))) & ((F[0,701] monitorInhaleTrigger) | (F[0,700] LAST)))))) & (expirationPhaseStart -> (((G[0,700] (! monitorInhaleTrigger)) | (LAST V (! monitorInhaleTrigger))) & ((F[0,701] monitorInhaleTrigger) | (F[0,700] LAST)))))",
            "CoCoSpecCode_fetched": "((H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))) and (H((OT($duration$+1,$duration$+1,(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) and ( not $post_condition_coco$)))) => (OT($duration$,0,(FTP or $post_condition_coco$))))))",
            "CoCoSpecCode": "((H((OT(700,0,(expirationPhaseStart and ((YtoPre( not expirationPhaseStart)) or FTP)))) => ((H( not expirationPhaseStart)) or ( not monitorInhaleTrigger)))) and (H((OT(700+1,700+1,((expirationPhaseStart and ((YtoPre( not expirationPhaseStart)) or FTP)) and ( not monitorInhaleTrigger)))) => (OT(700,0,(FTP or monitorInhaleTrigger))))))",
            "component": "System"
        },
        "_id": "c0d052c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT4",
        "parent_reqid": "FUN6",
        "project": "Ventilator v0.5",
        "rationale": "CONT.4: The transition from Self-Test Mode to VentilationOff Mode shall occur:\n(That's genuinely the whole requirement)\nCONT.4.1: When the self-test procedure has successfully been completed\nCONT.4.2: When the GUI asks for resuming ventilation",
        "comments": "Oisín: I combined these into one because I don't know what else to do with them. Also decided to just use StandbyMode instead of VentilationOff in this one. I think this should be an OR in the condition but not 100% confident on that.",
        "fulltext": "in SelfTestMode if selfTestPassed | GUIResumeRequest System shall satisfy StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "selfTestPassed",
                "GUIResumeRequest",
                "StandbyMode"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(selfTestPassed | GUIResumeRequest)",
            "regular_condition": "(selfTestPassed | GUIResumeRequest)",
            "conditionTextRange": [
                16,
                51
            ],
            "component_name": "System",
            "componentTextRange": [
                53,
                58
            ],
            "post_condition": "(StandbyMode)",
            "responseTextRange": [
                66,
                84
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, TC = <b><i>(selfTestPassed | GUIResumeRequest)</i></b>, Response = <b><i>(StandbyMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(selfTestPassed | GUIResumeRequest)</i></b> is true and any point in the interval where <b><i>(selfTestPassed | GUIResumeRequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "regular_condition_unexp_pt": "(selfTestPassed | GUIResumeRequest)",
            "regular_condition_unexp_ft": "(selfTestPassed | GUIResumeRequest)",
            "regular_condition_SMV_pt": "(selfTestPassed | GUIResumeRequest)",
            "regular_condition_SMV_ft": "(selfTestPassed | GUIResumeRequest)",
            "regular_condition_coco_smv": "(selfTestPassed | GUIResumeRequest)",
            "regular_condition_coco": "(selfTestPassed or GUIResumeRequest)",
            "post_condition_unexp_pt": "StandbyMode",
            "post_condition_unexp_ft": "StandbyMode",
            "post_condition_SMV_pt": "StandbyMode",
            "post_condition_SMV_ft": "StandbyMode",
            "post_condition_coco_smv": "StandbyMode",
            "post_condition_coco": "StandbyMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X (((Lin_SelfTestMode | LAST) V (((! (selfTestPassed | GUIResumeRequest)) & ((! LAST) & ((X (selfTestPassed | GUIResumeRequest)) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (Lin_SelfTestMode | LAST)) U StandbyMode)) & (! (Lin_SelfTestMode | LAST))))) & ((selfTestPassed | GUIResumeRequest) -> ((! (Lin_SelfTestMode | LAST)) U StandbyMode)))))) & (SelfTestMode -> (((Lin_SelfTestMode | LAST) V (((! (selfTestPassed | GUIResumeRequest)) & ((! LAST) & ((X (selfTestPassed | GUIResumeRequest)) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (Lin_SelfTestMode | LAST)) U StandbyMode)) & (! (Lin_SelfTestMode | LAST))))) & ((selfTestPassed | GUIResumeRequest) -> ((! (Lin_SelfTestMode | LAST)) U StandbyMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (((! (selfTestPassed | GUIResumeRequest)) S ((! (selfTestPassed | GUIResumeRequest)) & Fin_SelfTestMode)) | (! ((! StandbyMode) S ((! StandbyMode) & ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | Fin_SelfTestMode))))))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (((! (selfTestPassed | GUIResumeRequest)) S ((! (selfTestPassed | GUIResumeRequest)) & Fin_SelfTestMode)) | (! ((! StandbyMode) S ((! StandbyMode) & ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | Fin_SelfTestMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((! (selfTestPassed | GUIResumeRequest)) S ((! (selfTestPassed | GUIResumeRequest)) & (SelfTestMode & (Z (! SelfTestMode))))) | (! ((! StandbyMode) S ((! StandbyMode) & ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & (Z (! SelfTestMode)))))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (((! (selfTestPassed | GUIResumeRequest)) S ((! (selfTestPassed | GUIResumeRequest)) & (SelfTestMode & (Z (! SelfTestMode))))) | (! ((! StandbyMode) S ((! StandbyMode) & ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & (Z (! SelfTestMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((! (selfTestPassed | GUIResumeRequest)) S ((! (selfTestPassed | GUIResumeRequest)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))) | (! ((! StandbyMode) S ((! StandbyMode) & ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! (selfTestPassed | GUIResumeRequest)) & ((! LAST) & ((X (selfTestPassed | GUIResumeRequest)) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U StandbyMode)) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & ((selfTestPassed | GUIResumeRequest) -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U StandbyMode)))))) & (SelfTestMode -> (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! (selfTestPassed | GUIResumeRequest)) & ((! LAST) & ((X (selfTestPassed | GUIResumeRequest)) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U StandbyMode)) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & ((selfTestPassed | GUIResumeRequest) -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U StandbyMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! (selfTestPassed | GUIResumeRequest)) & ((X (selfTestPassed | GUIResumeRequest)) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode)) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & ((selfTestPassed | GUIResumeRequest) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode)))))) & (SelfTestMode -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! (selfTestPassed | GUIResumeRequest)) & ((X (selfTestPassed | GUIResumeRequest)) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode)) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & ((selfTestPassed | GUIResumeRequest) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! (selfTestPassed | GUIResumeRequest)) & ((X (selfTestPassed | GUIResumeRequest)) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode)) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & ((selfTestPassed | GUIResumeRequest) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode))))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! (selfTestPassed | GUIResumeRequest)) & ((X (selfTestPassed | GUIResumeRequest)) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode)) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & ((selfTestPassed | GUIResumeRequest) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U StandbyMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! (selfTestPassed | GUIResumeRequest)) & ((! LAST) & ((X (selfTestPassed | GUIResumeRequest)) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U StandbyMode)) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & ((selfTestPassed | GUIResumeRequest) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U StandbyMode))))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! (selfTestPassed | GUIResumeRequest)) & ((! LAST) & ((X (selfTestPassed | GUIResumeRequest)) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U StandbyMode)) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & ((selfTestPassed | GUIResumeRequest) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U StandbyMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or GUIResumeRequest)) )) or ( not (SI( ((selfTestPassed or GUIResumeRequest) and ((YtoPre( not (selfTestPassed or GUIResumeRequest))) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not StandbyMode) ))))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or GUIResumeRequest)) )) or ( not (SI( ((selfTestPassed or GUIResumeRequest) and ((YtoPre( not (selfTestPassed or GUIResumeRequest))) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not StandbyMode) ))))))",
            "component": "System"
        },
        "_id": "c0d079d0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1_2",
        "parent_reqid": "FUN6",
        "project": "Ventilator v0.5",
        "rationale": "Self-Test Mode: in the Self Test mode the controller allows the GUI to do all the operations necessary to perform the self-test.",
        "comments": "Oisín: This is effectively a GUI requirement, we need to have some concept of the GUI doing things to be able to model it.",
        "fulltext": "",
        "semantics": {},
        "_id": "c0d0c7f0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT3",
        "parent_reqid": "FUN5",
        "project": "Ventilator v0.5",
        "rationale": "The transition from Start-up Mode to Self test Mode shall occur once the configurations have been loaded and the internal checking is terminated.\nRationale: At this point, the monitoring module is able to carry out the assigned functionality",
        "comments": "Oisín: This requirement suffers a bit from us just having \"initDone\" rather than variables for each aspect of the initial configuration",
        "fulltext": "in StartUpMode when initDone System shall satisfy SelfTestMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "initDone",
                "SelfTestMode"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "when",
            "pre_condition": "(initDone)",
            "regular_condition": "(initDone)",
            "conditionTextRange": [
                15,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "post_condition": "(SelfTestMode)",
            "responseTextRange": [
                42,
                61
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, TC = <b><i>(initDone)</i></b>, Response = <b><i>(SelfTestMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(initDone)</i></b> is true and any point in the interval where <b><i>(initDone)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "regular_condition_unexp_pt": "initDone",
            "regular_condition_unexp_ft": "initDone",
            "regular_condition_SMV_pt": "initDone",
            "regular_condition_SMV_ft": "initDone",
            "regular_condition_coco_smv": "initDone",
            "regular_condition_coco": "initDone",
            "post_condition_unexp_pt": "SelfTestMode",
            "post_condition_unexp_ft": "SelfTestMode",
            "post_condition_SMV_pt": "SelfTestMode",
            "post_condition_SMV_ft": "SelfTestMode",
            "post_condition_coco_smv": "SelfTestMode",
            "post_condition_coco": "SelfTestMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X (((Lin_StartUpMode | LAST) V (((! initDone) & ((! LAST) & ((X initDone) & (! (Lin_StartUpMode | LAST))))) -> ((X ((! (Lin_StartUpMode | LAST)) U SelfTestMode)) & (! (Lin_StartUpMode | LAST))))) & (initDone -> ((! (Lin_StartUpMode | LAST)) U SelfTestMode)))))) & (StartUpMode -> (((Lin_StartUpMode | LAST) V (((! initDone) & ((! LAST) & ((X initDone) & (! (Lin_StartUpMode | LAST))))) -> ((X ((! (Lin_StartUpMode | LAST)) U SelfTestMode)) & (! (Lin_StartUpMode | LAST))))) & (initDone -> ((! (Lin_StartUpMode | LAST)) U SelfTestMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_StartUpMode -> (Y (((! initDone) S ((! initDone) & Fin_StartUpMode)) | (! ((! SelfTestMode) S ((! SelfTestMode) & (initDone & ((Y (! initDone)) | Fin_StartUpMode))))))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (((! initDone) S ((! initDone) & Fin_StartUpMode)) | (! ((! SelfTestMode) S ((! SelfTestMode) & (initDone & ((Y (! initDone)) | Fin_StartUpMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((! initDone) S ((! initDone) & (StartUpMode & (Z (! StartUpMode))))) | (! ((! SelfTestMode) S ((! SelfTestMode) & (initDone & ((Y (! initDone)) | (StartUpMode & (Z (! StartUpMode)))))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (((! initDone) S ((! initDone) & (StartUpMode & (Z (! StartUpMode))))) | (! ((! SelfTestMode) S ((! SelfTestMode) & (initDone & ((Y (! initDone)) | (StartUpMode & (Z (! StartUpMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((! initDone) S ((! initDone) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))) | (! ((! SelfTestMode) S ((! SelfTestMode) & (initDone & ((Y (! initDone)) | (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST) V (((! initDone) & ((! LAST) & ((X initDone) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) -> ((X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U SelfTestMode)) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) & (initDone -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U SelfTestMode)))))) & (StartUpMode -> (((((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST) V (((! initDone) & ((! LAST) & ((X initDone) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) -> ((X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U SelfTestMode)) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) & (initDone -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U SelfTestMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((((StartUpMode ) & (X (! StartUpMode))) V (((! initDone) & ((X initDone) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode)) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (initDone -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode)))))) & (StartUpMode -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! initDone) & ((X initDone) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode)) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (initDone -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! initDone) & ((X initDone) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode)) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (initDone -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode))))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! initDone) & ((X initDone) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode)) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (initDone -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U SelfTestMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((((StartUpMode & (! LAST)) & (X (! StartUpMode))) V (((! initDone) & ((! LAST) & ((X initDone) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) -> ((X ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U SelfTestMode)) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) & (initDone -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U SelfTestMode))))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((((StartUpMode & (! LAST)) & (X (! StartUpMode))) V (((! initDone) & ((! LAST) & ((X initDone) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) -> ((X ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U SelfTestMode)) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) & (initDone -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U SelfTestMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not initDone) )) or ( not (SI( (initDone and ((YtoPre( not initDone)) or (StartUpMode and (FTP or (YtoPre( not StartUpMode)))))), ( not SelfTestMode) ))))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not initDone) )) or ( not (SI( (initDone and ((YtoPre( not initDone)) or (StartUpMode and (FTP or (YtoPre( not StartUpMode)))))), ( not SelfTestMode) ))))))",
            "component": "System"
        },
        "_id": "c0d0ef00-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT35",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "At the end of an inspiration phase if no inspiration pause is required and the Recruitment Maneuver (RM) is set by the GUI, a Recruitment Maneuver shall start (see CONT.43).",
        "comments": "Oisín, v0.5: Duplicate of CONT24 for PSVMode. This one doesn't have a fun parent because, for some reason, FUN22 specifies PCVMode for the Recruitment Maneuver and there isn't an equivalent for PSV.",
        "fulltext": "while PSVMode & RMButton when inspiratoryPhaseEnd System shall satisfy RM",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "RMButton",
                "inspiratoryPhaseEnd",
                "RM"
            ],
            "scope_mode": "(PSVMode & RMButton)",
            "scopeTextRange": [
                0,
                23
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPhaseEnd)",
            "regular_condition": "(inspiratoryPhaseEnd)",
            "conditionTextRange": [
                25,
                48
            ],
            "component_name": "System",
            "componentTextRange": [
                50,
                55
            ],
            "post_condition": "(RM)",
            "responseTextRange": [
                63,
                72
            ],
            "diagramVariables": "M = <b><i>(PSVMode & RMButton)</i></b>,, TC = <b><i>(inspiratoryPhaseEnd)</i></b>, Response = <b><i>(RM)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PSVMode & RMButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "(PSVMode & RMButton)",
            "scope_mode_coco": "(PSVMode and RMButton)",
            "scope_mode_ft": "(PSVMode & RMButton)",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "RM",
            "post_condition_unexp_ft": "RM",
            "post_condition_SMV_pt": "RM",
            "post_condition_SMV_ft": "RM",
            "post_condition_coco_smv": "RM",
            "post_condition_coco": "RM",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_(PSVMode & RMButton) & (! LAST))) | (X (((Lin_(PSVMode & RMButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PSVMode & RMButton) | LAST))))) -> ((X ((! (Lin_(PSVMode & RMButton) | LAST)) U RM)) & (! (Lin_(PSVMode & RMButton) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_(PSVMode & RMButton) | LAST)) U RM)))))) & ((PSVMode & RMButton) -> (((Lin_(PSVMode & RMButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PSVMode & RMButton) | LAST))))) -> ((X ((! (Lin_(PSVMode & RMButton) | LAST)) U RM)) & (! (Lin_(PSVMode & RMButton) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_(PSVMode & RMButton) | LAST)) U RM)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_(PSVMode & RMButton) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PSVMode & RMButton))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PSVMode & RMButton)))))))))) & (((! Lin_(PSVMode & RMButton)) S ((! Lin_(PSVMode & RMButton)) & Fin_(PSVMode & RMButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PSVMode & RMButton))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PSVMode & RMButton)))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))))))))) & (((! ((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton)))) S ((! ((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton)))) & ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & RMButton) & ((! (Y TRUE)) | (Y (! (PSVMode & RMButton))))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & ((! (Y TRUE)) | (Y (! (PSVMode & RMButton))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! (PSVMode & RMButton)) & (! LAST)) & (X (PSVMode & RMButton))) & (! LAST))) | (X ((((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST))))) -> ((X ((! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST)) U RM)) & (! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST)) U RM)))))) & ((PSVMode & RMButton) -> ((((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST))))) -> ((X ((! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST)) U RM)) & (! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((! ((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) | LAST)) U RM)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! (PSVMode & RMButton)) ) & (X (PSVMode & RMButton)))) | (X (((((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))))) -> ((X ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM)) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM)))))) & ((PSVMode & RMButton) -> (((((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))))) -> ((X ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM)) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! (PSVMode & RMButton)) ) & (X (PSVMode & RMButton)))) | (X ((F (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) -> (((((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))))) -> ((X ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM)) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM))))))) & ((PSVMode & RMButton) -> ((F (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) -> (((((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))))) -> ((X ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM)) & (! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PSVMode & RMButton) ) & (X (! (PSVMode & RMButton))))) U RM))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PSVMode & RMButton)) & (! LAST)) & (X (PSVMode & RMButton))) & (! LAST))) | (X (((! LAST) U (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton))))) -> (((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))))))) -> ((X ((! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton))))) U RM)) & (! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton))))) U RM))))))) & ((PSVMode & RMButton) -> (((! LAST) U (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton))))) -> (((((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))))))) -> ((X ((! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton))))) U RM)) & (! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PSVMode & RMButton) & (! LAST)) & (X (! (PSVMode & RMButton))))) U RM))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not (PSVMode and RMButton)) and (YtoPre((PSVMode and RMButton)))) => (YtoPre((SI( ((PSVMode and RMButton) and (FTP or (YtoPre( not (PSVMode and RMButton))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PSVMode and RMButton) and (FTP or (YtoPre( not (PSVMode and RMButton))))))), ( not RM) ))))))) and ((SI( ((PSVMode and RMButton) and (FTP or (YtoPre( not (PSVMode and RMButton))))), ( not (( not (PSVMode and RMButton)) and (YtoPre((PSVMode and RMButton))))) )) => ((SI( ((PSVMode and RMButton) and (FTP or (YtoPre( not (PSVMode and RMButton))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PSVMode and RMButton) and (FTP or (YtoPre( not (PSVMode and RMButton))))))), ( not RM) ))))))",
            "component": "System"
        },
        "_id": "c0d11610-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT46",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The controller cannot return from fail-safe mode to any other mode without a power cycle (turn off and then turn on the machine).",
        "comments": "Oisín: Despite the number, this requirement actually appears directly after CONT10 in the document.\n\nNote that AlarmTestMode was only mentioned in FUN4 before I made this one, so we can maybe delete it?",
        "fulltext": "after FailSafeMode System shall at the next timepoint satisfy !(StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "after",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "FailSafeMode",
                "StartUpMode",
                "SelfTestMode",
                "StandbyMode",
                "PCVMode",
                "PSVMode"
            ],
            "scope_mode": "FailSafeMode",
            "scopeTextRange": [
                0,
                17
            ],
            "component_name": "System",
            "componentTextRange": [
                19,
                24
            ],
            "timingTextRange": [
                32,
                52
            ],
            "post_condition": "(! ( StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode ))",
            "responseTextRange": [
                54,
                124
            ],
            "diagramVariables": "M = <b><i>FailSafeMode</i></b>,, Response = <b><i>(! ( StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode ))</i></b>.",
            "description": "ENFORCED: in the interval (if defined) starting strictly after the first <b><i>FailSafeMode</i></b> interval and spanning to the end of the execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/after_null_next_satisfaction.svg",
            "scope_mode_pt": "FailSafeMode",
            "scope_mode_coco": "FailSafeMode",
            "scope_mode_ft": "FailSafeMode",
            "post_condition_unexp_pt": "(! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))",
            "post_condition_unexp_ft": "(! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))",
            "post_condition_SMV_pt": "(! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))",
            "post_condition_SMV_ft": "(! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))",
            "post_condition_coco_smv": "(! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))",
            "post_condition_coco": "( not ((((StartUpMode or SelfTestMode) or StandbyMode) or PCVMode) or PSVMode))",
            "ft_fetched": "(((! FLin_$scope_mode_ft$) U (FLin_$scope_mode_ft$ & (X (LAST | (X $post_condition_unexp_ft$))))) | (LAST V (! FLin_$scope_mode_ft$)))",
            "ft": "(((! FLin_FailSafeMode) U (FLin_FailSafeMode & (X (LAST | (X (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))))))) | (LAST V (! FLin_FailSafeMode)))",
            "pt_fetched": "((O FLin_$scope_mode_pt$) -> (((Y FLin_$scope_mode_pt$) -> $post_condition_unexp_pt$) S (((Y FLin_$scope_mode_pt$) -> $post_condition_unexp_pt$) & FLin_$scope_mode_pt$)))",
            "pt": "((O FLin_FailSafeMode) -> (((Y FLin_FailSafeMode) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) S (((Y FLin_FailSafeMode) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) & FLin_FailSafeMode)))",
            "ptExpanded_fetched": "((O (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> (((Y (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> $post_condition_SMV_pt$) S (((Y (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))))",
            "ptExpanded": "((O (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> (((Y (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) S (((Y (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) & (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode)))))))))",
            "ptFinBtwExpanded_fetched": "((O (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> (((Y (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> $post_condition_SMV_pt$) S (((Y (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))))))) -> $post_condition_SMV_pt$) & (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) & (Y (H (! ((! $scope_mode_pt$) & (Y $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "((O (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> (((Y (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) S (((Y (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) & (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode)))))))))",
            "ftExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (LAST | (X $post_condition_SMV_ft$))))) | (LAST V (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftExpanded": "(((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) & (X (LAST | (X (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))))))) | (LAST V (! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode))))))",
            "ftInfAUExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (X $post_condition_SMV_ft$)))) | (G (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftInfAUExpanded": "(((! ((FailSafeMode ) & (X (! FailSafeMode)))) U (((FailSafeMode ) & (X (! FailSafeMode))) & (X (X (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode)))))) | (G (! ((FailSafeMode ) & (X (! FailSafeMode))))))",
            "ftInfBtwExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (X $post_condition_SMV_ft$)))) | (G (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftInfBtwExpanded": "(((! ((FailSafeMode ) & (X (! FailSafeMode)))) U (((FailSafeMode ) & (X (! FailSafeMode))) & (X (X (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode)))))) | (G (! ((FailSafeMode ) & (X (! FailSafeMode))))))",
            "ftFinBtwExpanded_fetched": "(((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) & (X (LAST | (X $post_condition_SMV_ft$))))) | (LAST V (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))",
            "ftFinBtwExpanded": "(((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) & (X (LAST | (X (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))))))) | (LAST V (! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode))))))",
            "CoCoSpecCode_fetched": "((O((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) and YtoPre(H( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))))))) => (SI( ((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) and YtoPre(H( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))))), ((YtoPre((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) and YtoPre(H( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))))))) => $post_condition_coco$) )))",
            "CoCoSpecCode": "((O((( not FailSafeMode) and (YtoPre(FailSafeMode))) and YtoPre(H( not (( not FailSafeMode) and (YtoPre(FailSafeMode))))))) => (SI( ((( not FailSafeMode) and (YtoPre(FailSafeMode))) and YtoPre(H( not (( not FailSafeMode) and (YtoPre(FailSafeMode)))))), ((YtoPre((( not FailSafeMode) and (YtoPre(FailSafeMode))) and YtoPre(H( not (( not FailSafeMode) and (YtoPre(FailSafeMode))))))) => ( not ((((StartUpMode or SelfTestMode) or StandbyMode) or PCVMode) or PSVMode))) )))",
            "component": "System"
        },
        "_id": "c0d13d20-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT23",
        "parent_reqid": "FUN29",
        "project": "Ventilator v0.5",
        "rationale": "At the end of an inspiration phase, if the Inspiratory Pause is set by the GUI, an Inspiratory Pause shall start (see CONT.41).",
        "comments": "Oisín, v0.5: Just a copy of FUN29 specific to PSVMode.",
        "fulltext": "while PCVMode & inspiratoryPauseButton when inspiratoryPhaseEnd System shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "inspiratoryPauseButton",
                "inspiratoryPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(PCVMode & inspiratoryPauseButton)",
            "scopeTextRange": [
                0,
                37
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPhaseEnd)",
            "regular_condition": "(inspiratoryPhaseEnd)",
            "conditionTextRange": [
                39,
                62
            ],
            "component_name": "System",
            "componentTextRange": [
                64,
                69
            ],
            "duration": "40",
            "timingTextRange": [
                77,
                90
            ],
            "post_condition": "(( inspiratoryPauseButton => inValveClose & outValveClose ))",
            "responseTextRange": [
                92,
                155
            ],
            "diagramVariables": "M = <b><i>(PCVMode & inspiratoryPauseButton)</i></b>,, TC = <b><i>(inspiratoryPhaseEnd)</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(( inspiratoryPauseButton => inValveClose & outValveClose ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PCVMode & inspiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>40</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>40</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>40</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_for_satisfaction.svg",
            "scope_mode_pt": "(PCVMode & inspiratoryPauseButton)",
            "scope_mode_coco": "(PCVMode and inspiratoryPauseButton)",
            "scope_mode_ft": "(PCVMode & inspiratoryPauseButton)",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_unexp_ft": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_pt": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_ft": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco_smv": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco": "(inspiratoryPauseButton => (inValveClose and outValveClose))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_(PCVMode & inspiratoryPauseButton) & (! LAST))) | (X (((Lin_(PCVMode & inspiratoryPauseButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PCVMode & inspiratoryPauseButton) | LAST))))) -> ((X ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PCVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_(PCVMode & inspiratoryPauseButton) | LAST))))) & (inspiratoryPhaseEnd -> ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PCVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & ((PCVMode & inspiratoryPauseButton) -> (((Lin_(PCVMode & inspiratoryPauseButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PCVMode & inspiratoryPauseButton) | LAST))))) -> ((X ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PCVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_(PCVMode & inspiratoryPauseButton) | LAST))))) & (inspiratoryPhaseEnd -> ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_(PCVMode & inspiratoryPauseButton) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_(PCVMode & inspiratoryPauseButton) -> (Y (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PCVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PCVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PCVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PCVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_(PCVMode & inspiratoryPauseButton)))))) & (((! Lin_(PCVMode & inspiratoryPauseButton)) S ((! Lin_(PCVMode & inspiratoryPauseButton)) & Fin_(PCVMode & inspiratoryPauseButton))) -> (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PCVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PCVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PCVMode & inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PCVMode & inspiratoryPauseButton))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_(PCVMode & inspiratoryPauseButton)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton))) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))))) & (((! ((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton)))) S ((! ((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton)))) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) -> (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton))) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PCVMode & inspiratoryPauseButton)))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PCVMode & inspiratoryPauseButton))))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PCVMode & inspiratoryPauseButton)))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PCVMode & inspiratoryPauseButton))))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PCVMode & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! (PCVMode & inspiratoryPauseButton))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! (PCVMode & inspiratoryPauseButton)) & (! LAST)) & (X (PCVMode & inspiratoryPauseButton))) & (! LAST))) | (X ((((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & ((PCVMode & inspiratoryPauseButton) -> ((((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! (PCVMode & inspiratoryPauseButton)) ) & (X (PCVMode & inspiratoryPauseButton)))) | (X (((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & ((PCVMode & inspiratoryPauseButton) -> (((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! (PCVMode & inspiratoryPauseButton)) ) & (X (PCVMode & inspiratoryPauseButton)))) | (X ((F (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton))))) -> (((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & ((PCVMode & inspiratoryPauseButton) -> ((F (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton))))) -> (((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) ) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PCVMode & inspiratoryPauseButton)) & (! LAST)) & (X (PCVMode & inspiratoryPauseButton))) & (! LAST))) | (X (((! LAST) U (((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton))))) -> (((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & ((PCVMode & inspiratoryPauseButton) -> (((! LAST) U (((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton))))) -> (((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((PCVMode & inspiratoryPauseButton) & (! LAST)) & (X (! (PCVMode & inspiratoryPauseButton)))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not (PCVMode and inspiratoryPauseButton)) and (YtoPre((PCVMode and inspiratoryPauseButton)))) => (YtoPre(SI( ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))), ((OT(40,0,(inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))))))) => ((SI( ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))), ( not inspiratoryPhaseEnd) )) or (inspiratoryPauseButton => (inValveClose and outValveClose)))) ))))) and ((SI( ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))), ( not (( not (PCVMode and inspiratoryPauseButton)) and (YtoPre((PCVMode and inspiratoryPauseButton))))) )) => (SI( ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))), ((OT(40,0,(inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))))))) => ((SI( ((PCVMode and inspiratoryPauseButton) and (FTP or (YtoPre( not (PCVMode and inspiratoryPauseButton))))), ( not inspiratoryPhaseEnd) )) or (inspiratoryPauseButton => (inValveClose and outValveClose)))) ))))",
            "component": "System"
        },
        "_id": "c0d18b40-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT43_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The Recruitment Maneuver, if not actively stopped by the GUI, has a timeout (max_rm_time). After the Recruitment Maneuver phase expiration phase begins.\nRationale: It is not reasonable to keep the patient in this emergency state without letting him breathe.",
        "comments": "Oisín, v0.5: Note that max_rm_time is set to 10 seconds by default in PER3.2.",
        "fulltext": "when RM System shall after 10 seconds satisfy !RM & expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "RM",
                "expirationPhaseStart"
            ],
            "qualifier_word": "when",
            "pre_condition": "(RM)",
            "regular_condition": "(RM)",
            "conditionTextRange": [
                0,
                6
            ],
            "component_name": "System",
            "componentTextRange": [
                8,
                13
            ],
            "duration": "10",
            "timingTextRange": [
                21,
                36
            ],
            "post_condition": "(! RM & expirationPhaseStart)",
            "responseTextRange": [
                38,
                71
            ],
            "diagramVariables": "TC = <b><i>(RM)</i></b>,  n = <b><i>10</i></b>, Response = <b><i>(! RM & expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(RM)</i></b> is true and any point in the interval where <b><i>(RM)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>10</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>10</i></b>). Moreover, RES must hold at the point that is at distance <b><i>10</i></b>+1 from the trigger, that is, trigger+<b><i>10</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "RM",
            "regular_condition_unexp_ft": "RM",
            "regular_condition_SMV_pt": "RM",
            "regular_condition_SMV_ft": "RM",
            "regular_condition_coco_smv": "RM",
            "regular_condition_coco": "RM",
            "post_condition_unexp_pt": "((! RM) & expirationPhaseStart)",
            "post_condition_unexp_ft": "((! RM) & expirationPhaseStart)",
            "post_condition_SMV_pt": "((! RM) & expirationPhaseStart)",
            "post_condition_SMV_ft": "((! RM) & expirationPhaseStart)",
            "post_condition_coco_smv": "((! RM) & expirationPhaseStart)",
            "post_condition_coco": "(( not RM) and expirationPhaseStart)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_unexp_ft$ -> (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))",
            "ft": "((LAST V (((! RM) & ((! LAST) & (X RM))) -> (X (((G[<=10] (! ((! RM) & expirationPhaseStart))) | (LAST V (! ((! RM) & expirationPhaseStart)))) & ((F[<=10+1] ((! RM) & expirationPhaseStart)) | (F[<10+1] LAST)))))) & (RM -> (((G[<=10] (! ((! RM) & expirationPhaseStart))) | (LAST V (! ((! RM) & expirationPhaseStart)))) & ((F[<=10+1] ((! RM) & expirationPhaseStart)) | (F[<10+1] LAST)))))",
            "pt_fetched": "((H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$+1] (FTP | $post_condition_unexp_pt$)))))",
            "pt": "((H ((O[<=10] (RM & ((Y (! RM)) | FTP))) -> ((H (! RM)) | (! ((! RM) & expirationPhaseStart))))) & (H ((O[=10+1] ((RM & ((Y (! RM)) | FTP)) & (! ((! RM) & expirationPhaseStart)))) -> (O[<10+1] (FTP | ((! RM) & expirationPhaseStart))))))",
            "ptExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptExpanded": "((H ((O[0,10] (RM & ((Y (! RM)) | (! (Y TRUE))))) -> ((H (! RM)) | (! ((! RM) & expirationPhaseStart))))) & (H ((O[11,11] ((RM & ((Y (! RM)) | (! (Y TRUE)))) & (! ((! RM) & expirationPhaseStart)))) -> (O[0,10] ((! (Y TRUE)) | ((! RM) & expirationPhaseStart))))))",
            "ptFinBtwExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "((H ((O[0,10] (RM & ((Y (! RM)) | (! (Y TRUE))))) -> ((H (! RM)) | (! ((! RM) & expirationPhaseStart))))) & (H ((O[11,11] ((RM & ((Y (! RM)) | (! (Y TRUE)))) & (! ((! RM) & expirationPhaseStart)))) -> (O[0,10] ((! (Y TRUE)) | ((! RM) & expirationPhaseStart))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftExpanded": "((LAST V (((! RM) & ((! LAST) & (X RM))) -> (X (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (LAST V (! ((! RM) & expirationPhaseStart)))) & ((F[0,11] ((! RM) & expirationPhaseStart)) | (F[0,10] LAST)))))) & (RM -> (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (LAST V (! ((! RM) & expirationPhaseStart)))) & ((F[0,11] ((! RM) & expirationPhaseStart)) | (F[0,10] LAST)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! RM) & (X RM)) -> (X (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (G (! ((! RM) & expirationPhaseStart)))) & (F[0,11] ((! RM) & expirationPhaseStart)))))) & (RM -> (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (G (! ((! RM) & expirationPhaseStart)))) & (F[0,11] ((! RM) & expirationPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! RM) & (X RM)) -> (X (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (G (! ((! RM) & expirationPhaseStart)))) & (F[0,11] ((! RM) & expirationPhaseStart)))))) & (RM -> (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (G (! ((! RM) & expirationPhaseStart)))) & (F[0,11] ((! RM) & expirationPhaseStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftFinBtwExpanded": "((LAST V (((! RM) & ((! LAST) & (X RM))) -> (X (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (LAST V (! ((! RM) & expirationPhaseStart)))) & ((F[0,11] ((! RM) & expirationPhaseStart)) | (F[0,10] LAST)))))) & (RM -> (((G[0,10] (! ((! RM) & expirationPhaseStart))) | (LAST V (! ((! RM) & expirationPhaseStart)))) & ((F[0,11] ((! RM) & expirationPhaseStart)) | (F[0,10] LAST)))))",
            "CoCoSpecCode_fetched": "((H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))) and (H((OT($duration$+1,$duration$+1,(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) and ( not $post_condition_coco$)))) => (OT($duration$,0,(FTP or $post_condition_coco$))))))",
            "CoCoSpecCode": "((H((OT(10,0,(RM and ((YtoPre( not RM)) or FTP)))) => ((H( not RM)) or ( not (( not RM) and expirationPhaseStart))))) and (H((OT(10+1,10+1,((RM and ((YtoPre( not RM)) or FTP)) and ( not (( not RM) and expirationPhaseStart))))) => (OT(10,0,(FTP or (( not RM) and expirationPhaseStart)))))))",
            "component": "System"
        },
        "_id": "c0d1d960-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1_6",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Fail-safe: the controller forces input and output valves to their de-energized states (in valve close and out valve open)",
        "comments": "Oisín: I wonder if this should be \"shall always satisfy\", or if the default 'eventually' is fine?\n\nAlso this requirement doesn't have in \"input ref\", but it's effectively a child of FUN32.",
        "fulltext": "in FailSafeMode System shall satisfy inValveClose & outValveOpen",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "FailSafeMode",
                "inValveClose",
                "outValveOpen"
            ],
            "scope_mode": "FailSafeMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(inValveClose & outValveOpen)",
            "responseTextRange": [
                29,
                63
            ],
            "diagramVariables": "M = <b><i>FailSafeMode</i></b>,, Response = <b><i>(inValveClose & outValveOpen)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>FailSafeMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "FailSafeMode",
            "scope_mode_coco": "FailSafeMode",
            "scope_mode_ft": "FailSafeMode",
            "post_condition_unexp_pt": "(inValveClose & outValveOpen)",
            "post_condition_unexp_ft": "(inValveClose & outValveOpen)",
            "post_condition_SMV_pt": "(inValveClose & outValveOpen)",
            "post_condition_SMV_ft": "(inValveClose & outValveOpen)",
            "post_condition_coco_smv": "(inValveClose & outValveOpen)",
            "post_condition_coco": "(inValveClose and outValveOpen)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_FailSafeMode & (! LAST))) | (X ((! (Lin_FailSafeMode | LAST)) U (inValveClose & outValveOpen))))) & (FailSafeMode -> ((! (Lin_FailSafeMode | LAST)) U (inValveClose & outValveOpen))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_FailSafeMode -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & Fin_FailSafeMode)))))) & (((! Lin_FailSafeMode) S ((! Lin_FailSafeMode) & Fin_FailSafeMode)) -> (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & Fin_FailSafeMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! FailSafeMode) & (Y FailSafeMode)) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & (FailSafeMode & (Z (! FailSafeMode))))))))) & (((! ((! FailSafeMode) & (Y FailSafeMode))) S ((! ((! FailSafeMode) & (Y FailSafeMode))) & (FailSafeMode & (Z (! FailSafeMode))))) -> (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & (FailSafeMode & (Z (! FailSafeMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! FailSafeMode) & (Y FailSafeMode)) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & (FailSafeMode & ((! (Y TRUE)) | (Y (! FailSafeMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! FailSafeMode) & (! LAST)) & (X FailSafeMode)) & (! LAST))) | (X ((! (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) | LAST)) U (inValveClose & outValveOpen))))) & (FailSafeMode -> ((! (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) | LAST)) U (inValveClose & outValveOpen))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! FailSafeMode) ) & (X FailSafeMode))) | (X ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U (inValveClose & outValveOpen))))) & (FailSafeMode -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U (inValveClose & outValveOpen))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! FailSafeMode) ) & (X FailSafeMode))) | (X ((F ((FailSafeMode ) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U (inValveClose & outValveOpen)))))) & (FailSafeMode -> ((F ((FailSafeMode ) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U (inValveClose & outValveOpen)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! FailSafeMode) & (! LAST)) & (X FailSafeMode)) & (! LAST))) | (X (((! LAST) U ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U (inValveClose & outValveOpen)))))) & (FailSafeMode -> (((! LAST) U ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U (inValveClose & outValveOpen)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not FailSafeMode) and (YtoPre(FailSafeMode))) => (YtoPre( not (SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not (inValveClose and outValveOpen)) )))))) and ((SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not (( not FailSafeMode) and (YtoPre(FailSafeMode)))) )) => ( not (SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not (inValveClose and outValveOpen)) )))))",
            "component": "System"
        },
        "_id": "c0d20070-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT42",
        "parent_reqid": "FUN28",
        "project": "Ventilator v0.5",
        "rationale": "In PCV and PSV modes there shall be the possibility to initiate an Expiratory Pause if it is set by the GUI.\nRationale: The Expiratory Pause will initiate a forced hold at the end of expiration, allowing the measurement of the AutoPEEP level for the patient, providing information on the level of obstruction in the exhalation channel. AutoPEEP may be zero for most patients or significantly different from zero for patients that have obstructions in the exhalation channel, as possibly generated by secretions. In this case, the small flow during exhalation may result in an incomplete drain of the alveoli during the expiration phase.",
        "comments": "Oisín, v0.5: Same as CONT 41, just for expiration instead of inspiration.",
        "fulltext": "while (PCVMode | PSVMode) when expiratoryPauseButton System shall eventually satisfy expiratoryPause | !expiratoryPauseButton",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVMode",
                "expiratoryPauseButton",
                "expiratoryPause"
            ],
            "scope_mode": "(( PCVMode | PSVMode ))",
            "scopeTextRange": [
                0,
                24
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPauseButton)",
            "regular_condition": "(expiratoryPauseButton)",
            "conditionTextRange": [
                26,
                51
            ],
            "component_name": "System",
            "componentTextRange": [
                53,
                58
            ],
            "timingTextRange": [
                66,
                75
            ],
            "post_condition": "(expiratoryPause | ! expiratoryPauseButton)",
            "responseTextRange": [
                77,
                124
            ],
            "diagramVariables": "M = <b><i>(( PCVMode | PSVMode ))</i></b>,, TC = <b><i>(expiratoryPauseButton)</i></b>, Response = <b><i>(expiratoryPause | ! expiratoryPauseButton)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(( PCVMode | PSVMode ))</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(expiratoryPauseButton)</i></b> is true and any point in the interval where <b><i>(expiratoryPauseButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "(PCVMode | PSVMode)",
            "scope_mode_coco": "(PCVMode or PSVMode)",
            "scope_mode_ft": "(PCVMode | PSVMode)",
            "regular_condition_unexp_pt": "expiratoryPauseButton",
            "regular_condition_unexp_ft": "expiratoryPauseButton",
            "regular_condition_SMV_pt": "expiratoryPauseButton",
            "regular_condition_SMV_ft": "expiratoryPauseButton",
            "regular_condition_coco_smv": "expiratoryPauseButton",
            "regular_condition_coco": "expiratoryPauseButton",
            "post_condition_unexp_pt": "(expiratoryPause | (! expiratoryPauseButton))",
            "post_condition_unexp_ft": "(expiratoryPause | (! expiratoryPauseButton))",
            "post_condition_SMV_pt": "(expiratoryPause | (! expiratoryPauseButton))",
            "post_condition_SMV_ft": "(expiratoryPause | (! expiratoryPauseButton))",
            "post_condition_coco_smv": "(expiratoryPause | (! expiratoryPauseButton))",
            "post_condition_coco": "(expiratoryPause or ( not expiratoryPauseButton))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_(PCVMode | PSVMode) & (! LAST))) | (X (((Lin_(PCVMode | PSVMode) | LAST) V (((! expiratoryPauseButton) & ((! LAST) & ((X expiratoryPauseButton) & (! (Lin_(PCVMode | PSVMode) | LAST))))) -> ((X ((! (Lin_(PCVMode | PSVMode) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (Lin_(PCVMode | PSVMode) | LAST))))) & (expiratoryPauseButton -> ((! (Lin_(PCVMode | PSVMode) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))))))) & ((PCVMode | PSVMode) -> (((Lin_(PCVMode | PSVMode) | LAST) V (((! expiratoryPauseButton) & ((! LAST) & ((X expiratoryPauseButton) & (! (Lin_(PCVMode | PSVMode) | LAST))))) -> ((X ((! (Lin_(PCVMode | PSVMode) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (Lin_(PCVMode | PSVMode) | LAST))))) & (expiratoryPauseButton -> ((! (Lin_(PCVMode | PSVMode) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_(PCVMode | PSVMode) -> (Y (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & Fin_(PCVMode | PSVMode))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | Fin_(PCVMode | PSVMode)))))))))) & (((! Lin_(PCVMode | PSVMode)) S ((! Lin_(PCVMode | PSVMode)) & Fin_(PCVMode | PSVMode))) -> (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & Fin_(PCVMode | PSVMode))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | Fin_(PCVMode | PSVMode)))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode))) -> (Y (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))))) & (((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) S ((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) -> (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode))) -> (Y (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & ((PCVMode | PSVMode) & ((! (Y TRUE)) | (Y (! (PCVMode | PSVMode))))))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | ((PCVMode | PSVMode) & ((! (Y TRUE)) | (Y (! (PCVMode | PSVMode))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! (PCVMode | PSVMode)) & (! LAST)) & (X (PCVMode | PSVMode))) & (! LAST))) | (X ((((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST) V (((! expiratoryPauseButton) & ((! LAST) & ((X expiratoryPauseButton) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) -> ((X ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) & (expiratoryPauseButton -> ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))))))) & ((PCVMode | PSVMode) -> ((((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST) V (((! expiratoryPauseButton) & ((! LAST) & ((X expiratoryPauseButton) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) -> ((X ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))) & (! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST))))) & (expiratoryPauseButton -> ((! ((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) | LAST)) U (expiratoryPause | (! expiratoryPauseButton)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! (PCVMode | PSVMode)) ) & (X (PCVMode | PSVMode)))) | (X (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! expiratoryPauseButton) & ((X expiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (expiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))))))) & ((PCVMode | PSVMode) -> (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! expiratoryPauseButton) & ((X expiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (expiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! (PCVMode | PSVMode)) ) & (X (PCVMode | PSVMode)))) | (X ((F (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! expiratoryPauseButton) & ((X expiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (expiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton))))))))) & ((PCVMode | PSVMode) -> ((F (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))) V (((! expiratoryPauseButton) & ((X expiratoryPauseButton) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))))) -> ((X ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode)))))))) & (expiratoryPauseButton -> ((! (((PCVMode | PSVMode) ) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PCVMode | PSVMode)) & (! LAST)) & (X (PCVMode | PSVMode))) & (! LAST))) | (X (((! LAST) U (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) V (((! expiratoryPauseButton) & ((! LAST) & ((X expiratoryPauseButton) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) -> ((X ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) & (expiratoryPauseButton -> ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton))))))))) & ((PCVMode | PSVMode) -> (((! LAST) U (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) -> (((((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))) V (((! expiratoryPauseButton) & ((! LAST) & ((X expiratoryPauseButton) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) -> ((X ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton)))) & (! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode)))))))) & (expiratoryPauseButton -> ((! (((PCVMode | PSVMode) & (! LAST)) & (X (! (PCVMode | PSVMode))))) U (expiratoryPause | (! expiratoryPauseButton))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not (PCVMode or PSVMode)) and (YtoPre((PCVMode or PSVMode)))) => (YtoPre((SI( ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))), ( not expiratoryPauseButton) )) or ( not (SI( (expiratoryPauseButton and ((YtoPre( not expiratoryPauseButton)) or ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))))), ( not (expiratoryPause or ( not expiratoryPauseButton))) ))))))) and ((SI( ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))), ( not (( not (PCVMode or PSVMode)) and (YtoPre((PCVMode or PSVMode))))) )) => ((SI( ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))), ( not expiratoryPauseButton) )) or ( not (SI( (expiratoryPauseButton and ((YtoPre( not expiratoryPauseButton)) or ((PCVMode or PSVMode) and (FTP or (YtoPre( not (PCVMode or PSVMode))))))), ( not (expiratoryPause or ( not expiratoryPauseButton))) ))))))",
            "component": "System"
        },
        "_id": "c0d22780-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT17",
        "parent_reqid": "FUN6",
        "project": "Ventilator v0.5",
        "rationale": "During the self test mode the controller shall allow the GUI to perform all the self-test specified in the FUN.6.\n",
        "comments": "Oisín, v0.5: Talking about the GUI so I have ignored it for now",
        "fulltext": "",
        "semantics": {},
        "_id": "c0d24e90-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT39",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "CONT39: When the ventilator is in an Inspiration state, the out valve shall be closed and the in valve pressure shall be set to target inspiratory pressure (P_insp of the corresponding mode).\n\nCONT39_1: P_inspPCV if current mode is PCV.\nCONT39_2: P_inspPSV if current mode is PSV.\nCONT39_3: P_inspAP if current  model is PCV from apnea backup.",
        "comments": "Oisín, v0.5: I have essentially inlined CONT39_1, 39_2 and 39_2 into this one, since they just say explicitly each of the modes. No reason to make them separate.",
        "fulltext": "while inspiratoryPhase System shall satisfy outValveClose & (PCVMode & !apnea => P_insp = P_isnpPCV) & (PSVMode => P_insp = P_inspPSV) & (PCVMode & apnea => P_insp = P_inspAP)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "inspiratoryPhase",
                "outValveClose",
                "PCVMode",
                "apnea",
                "P_insp",
                "P_isnpPCV",
                "PSVMode",
                "P_inspPSV",
                "P_inspAP"
            ],
            "scope_mode": "(inspiratoryPhase)",
            "scopeTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "post_condition": "(outValveClose & ( PCVMode & ! apnea => P_insp = P_isnpPCV ) & ( PSVMode => P_insp = P_inspPSV ) & ( PCVMode & apnea => P_insp = P_inspAP ))",
            "responseTextRange": [
                36,
                174
            ],
            "diagramVariables": "M = <b><i>(inspiratoryPhase)</i></b>,, Response = <b><i>(outValveClose & ( PCVMode & ! apnea => P_insp = P_isnpPCV ) & ( PSVMode => P_insp = P_inspPSV ) & ( PCVMode & apnea => P_insp = P_inspAP ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(inspiratoryPhase)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "inspiratoryPhase",
            "scope_mode_coco": "inspiratoryPhase",
            "scope_mode_ft": "inspiratoryPhase",
            "post_condition_unexp_pt": "(((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))",
            "post_condition_unexp_ft": "(((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))",
            "post_condition_SMV_pt": "(((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))",
            "post_condition_SMV_ft": "(((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))",
            "post_condition_coco_smv": "(((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))",
            "post_condition_coco": "(((outValveClose and ((PCVMode and ( not apnea)) => (P_insp = P_isnpPCV))) and (PSVMode => (P_insp = P_inspPSV))) and ((PCVMode and apnea) => (P_insp = P_inspAP)))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_inspiratoryPhase & (! LAST))) | (X ((! (Lin_inspiratoryPhase | LAST)) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP))))))) & (inspiratoryPhase -> ((! (Lin_inspiratoryPhase | LAST)) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_inspiratoryPhase -> (Y (! ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) S ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) & Fin_inspiratoryPhase)))))) & (((! Lin_inspiratoryPhase) S ((! Lin_inspiratoryPhase) & Fin_inspiratoryPhase)) -> (! ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) S ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) & Fin_inspiratoryPhase)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! inspiratoryPhase) & (Y inspiratoryPhase)) -> (Y (! ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) S ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) & (inspiratoryPhase & (Z (! inspiratoryPhase))))))))) & (((! ((! inspiratoryPhase) & (Y inspiratoryPhase))) S ((! ((! inspiratoryPhase) & (Y inspiratoryPhase))) & (inspiratoryPhase & (Z (! inspiratoryPhase))))) -> (! ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) S ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) & (inspiratoryPhase & (Z (! inspiratoryPhase))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! inspiratoryPhase) & (Y inspiratoryPhase)) -> (Y (! ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) S ((! (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))) & (inspiratoryPhase & ((! (Y TRUE)) | (Y (! inspiratoryPhase))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! inspiratoryPhase) & (! LAST)) & (X inspiratoryPhase)) & (! LAST))) | (X ((! (((inspiratoryPhase & (! LAST)) & (X (! inspiratoryPhase))) | LAST)) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP))))))) & (inspiratoryPhase -> ((! (((inspiratoryPhase & (! LAST)) & (X (! inspiratoryPhase))) | LAST)) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! inspiratoryPhase) ) & (X inspiratoryPhase))) | (X ((! ((inspiratoryPhase ) & (X (! inspiratoryPhase)))) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP))))))) & (inspiratoryPhase -> ((! ((inspiratoryPhase ) & (X (! inspiratoryPhase)))) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! inspiratoryPhase) ) & (X inspiratoryPhase))) | (X ((F ((inspiratoryPhase ) & (X (! inspiratoryPhase)))) -> ((! ((inspiratoryPhase ) & (X (! inspiratoryPhase)))) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))))))) & (inspiratoryPhase -> ((F ((inspiratoryPhase ) & (X (! inspiratoryPhase)))) -> ((! ((inspiratoryPhase ) & (X (! inspiratoryPhase)))) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! inspiratoryPhase) & (! LAST)) & (X inspiratoryPhase)) & (! LAST))) | (X (((! LAST) U ((inspiratoryPhase & (! LAST)) & (X (! inspiratoryPhase)))) -> ((! ((inspiratoryPhase & (! LAST)) & (X (! inspiratoryPhase)))) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))))))) & (inspiratoryPhase -> (((! LAST) U ((inspiratoryPhase & (! LAST)) & (X (! inspiratoryPhase)))) -> ((! ((inspiratoryPhase & (! LAST)) & (X (! inspiratoryPhase)))) U (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_isnpPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not inspiratoryPhase) and (YtoPre(inspiratoryPhase))) => (YtoPre( not (SI( (inspiratoryPhase and (FTP or (YtoPre( not inspiratoryPhase)))), ( not (((outValveClose and ((PCVMode and ( not apnea)) => (P_insp = P_isnpPCV))) and (PSVMode => (P_insp = P_inspPSV))) and ((PCVMode and apnea) => (P_insp = P_inspAP)))) )))))) and ((SI( (inspiratoryPhase and (FTP or (YtoPre( not inspiratoryPhase)))), ( not (( not inspiratoryPhase) and (YtoPre(inspiratoryPhase)))) )) => ( not (SI( (inspiratoryPhase and (FTP or (YtoPre( not inspiratoryPhase)))), ( not (((outValveClose and ((PCVMode and ( not apnea)) => (P_insp = P_isnpPCV))) and (PSVMode => (P_insp = P_inspPSV))) and ((PCVMode and apnea) => (P_insp = P_inspAP)))) )))))",
            "component": "System"
        },
        "_id": "c0d275a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT5",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The transition from VentilationOff to PSV shall occur if the change mode command is received from the GUI.\nRationale: the ventilation starts in PCV mode when the user selects the start command from the GUI.",
        "comments": "Oisín: Using StandbyMode here instead of VentilationOff.",
        "fulltext": "in StandbyMode if PSVModeSelected System shall satisfy PSVMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StandbyMode",
                "PSVModeSelected",
                "PSVMode"
            ],
            "scope_mode": "StandbyMode",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "if",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                15,
                32
            ],
            "component_name": "System",
            "componentTextRange": [
                34,
                39
            ],
            "post_condition": "(PSVMode)",
            "responseTextRange": [
                47,
                61
            ],
            "diagramVariables": "M = <b><i>StandbyMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(PSVMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StandbyMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "StandbyMode",
            "scope_mode_coco": "StandbyMode",
            "scope_mode_ft": "StandbyMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "PSVMode",
            "post_condition_unexp_ft": "PSVMode",
            "post_condition_SMV_pt": "PSVMode",
            "post_condition_SMV_ft": "PSVMode",
            "post_condition_coco_smv": "PSVMode",
            "post_condition_coco": "PSVMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_StandbyMode & (! LAST))) | (X (((Lin_StandbyMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_StandbyMode | LAST))))) -> ((X ((! (Lin_StandbyMode | LAST)) U PSVMode)) & (! (Lin_StandbyMode | LAST))))) & (PSVModeSelected -> ((! (Lin_StandbyMode | LAST)) U PSVMode)))))) & (StandbyMode -> (((Lin_StandbyMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_StandbyMode | LAST))))) -> ((X ((! (Lin_StandbyMode | LAST)) U PSVMode)) & (! (Lin_StandbyMode | LAST))))) & (PSVModeSelected -> ((! (Lin_StandbyMode | LAST)) U PSVMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_StandbyMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_StandbyMode)) | (! ((! PSVMode) S ((! PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_StandbyMode))))))))) & (((! Lin_StandbyMode) S ((! Lin_StandbyMode) & Fin_StandbyMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_StandbyMode)) | (! ((! PSVMode) S ((! PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_StandbyMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! StandbyMode) & (Y StandbyMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (StandbyMode & (Z (! StandbyMode))))) | (! ((! PSVMode) S ((! PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))))))))) & (((! ((! StandbyMode) & (Y StandbyMode))) S ((! ((! StandbyMode) & (Y StandbyMode))) & (StandbyMode & (Z (! StandbyMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (StandbyMode & (Z (! StandbyMode))))) | (! ((! PSVMode) S ((! PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! StandbyMode) & (Y StandbyMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (StandbyMode & ((! (Y TRUE)) | (Y (! StandbyMode)))))) | (! ((! PSVMode) S ((! PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & ((! (Y TRUE)) | (Y (! StandbyMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X (((((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) -> ((X ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PSVMode)) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) & (PSVModeSelected -> ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PSVMode)))))) & (StandbyMode -> (((((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) -> ((X ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PSVMode)) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) & (PSVModeSelected -> ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PSVMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((((StandbyMode ) & (X (! StandbyMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PSVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode)))))) & (StandbyMode -> ((((StandbyMode ) & (X (! StandbyMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PSVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((((StandbyMode ) & (X (! StandbyMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PSVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode))))))) & (StandbyMode -> ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((((StandbyMode ) & (X (! StandbyMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PSVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PSVMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((((StandbyMode & (! LAST)) & (X (! StandbyMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) -> ((X ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PSVMode)) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) & (PSVModeSelected -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PSVMode))))))) & (StandbyMode -> (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((((StandbyMode & (! LAST)) & (X (! StandbyMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) -> ((X ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PSVMode)) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) & (PSVModeSelected -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PSVMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not StandbyMode) and (YtoPre(StandbyMode))) => (YtoPre((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (StandbyMode and (FTP or (YtoPre( not StandbyMode)))))), ( not PSVMode) ))))))) and ((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (( not StandbyMode) and (YtoPre(StandbyMode)))) )) => ((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (StandbyMode and (FTP or (YtoPre( not StandbyMode)))))), ( not PSVMode) ))))))",
            "component": "System"
        },
        "_id": "c0d29cb0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT28",
        "parent_reqid": "FUN20",
        "project": "Ventilator v0.5",
        "rationale": "The target inspiratory pressure level shall be controlled by the Inspiratory Pressure parameter (P_inspPCV ) and it is kept constant.",
        "comments": "Oisín, v0.5: Filled this one in after discussion in a meeting.",
        "fulltext": "in PCVMode System shall satisfy P_insp = P_inspPCV",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "P_insp",
                "P_inspPCV"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(P_insp = P_inspPCV)",
            "responseTextRange": [
                24,
                49
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(P_insp = P_inspPCV)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "(P_insp = P_inspPCV)",
            "post_condition_unexp_ft": "(P_insp = P_inspPCV)",
            "post_condition_SMV_pt": "(P_insp = P_inspPCV)",
            "post_condition_SMV_ft": "(P_insp = P_inspPCV)",
            "post_condition_coco_smv": "(P_insp = P_inspPCV)",
            "post_condition_coco": "(P_insp = P_inspPCV)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U (P_insp = P_inspPCV))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U (P_insp = P_inspPCV))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! (P_insp = P_inspPCV)) S ((! (P_insp = P_inspPCV)) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! (P_insp = P_inspPCV)) S ((! (P_insp = P_inspPCV)) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (P_insp = P_inspPCV)) S ((! (P_insp = P_inspPCV)) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! (P_insp = P_inspPCV)) S ((! (P_insp = P_inspPCV)) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (P_insp = P_inspPCV)) S ((! (P_insp = P_inspPCV)) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (P_insp = P_inspPCV))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (P_insp = P_inspPCV))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U (P_insp = P_inspPCV))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U (P_insp = P_inspPCV))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (P_insp = P_inspPCV)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (P_insp = P_inspPCV)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (P_insp = P_inspPCV)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (P_insp = P_inspPCV)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (P_insp = P_inspPCV)) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (P_insp = P_inspPCV)) )))))",
            "component": "System"
        },
        "_id": "c0d2c3c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT36",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If the patient is in expiration phase:",
        "comments": "Oisín, v0.5: Another fake requirement",
        "fulltext": "while expiratoryPhase System shall",
        "semantics": {},
        "_id": "c0d2ead0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT43",
        "parent_reqid": "FUN22",
        "project": "Ventilator v0.5",
        "rationale": "In PCV and PSV mode, at the end of an inspiration and if inspiratory pause is not required, it shall be possible to initiate a lung recruitment procedure, termed Recruitment Maneuver (RM), if it is required by the GUI.\nNot available in North America. \nRationale: The RM is an emergency procedure required immediately after the end of the intubation. RM consists in the prolonged lung inflation at increased inspiratory set pressure, as necessary to reactivate the alveoli immediately after intubation.",
        "comments": "",
        "fulltext": "while (PCVMode | PSVMode) & RMButton & !inspiratoryPauseButton when inspiratoryPhaseEnd System shall satisfy RM",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVMode",
                "RMButton",
                "inspiratoryPauseButton",
                "inspiratoryPhaseEnd",
                "RM"
            ],
            "scope_mode": "(( PCVMode | PSVMode ) & RMButton & ! inspiratoryPauseButton)",
            "scopeTextRange": [
                0,
                61
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPhaseEnd)",
            "regular_condition": "(inspiratoryPhaseEnd)",
            "conditionTextRange": [
                63,
                86
            ],
            "component_name": "System",
            "componentTextRange": [
                88,
                93
            ],
            "post_condition": "(RM)",
            "responseTextRange": [
                101,
                110
            ],
            "diagramVariables": "M = <b><i>(( PCVMode | PSVMode ) & RMButton & ! inspiratoryPauseButton)</i></b>,, TC = <b><i>(inspiratoryPhaseEnd)</i></b>, Response = <b><i>(RM)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(( PCVMode | PSVMode ) & RMButton & ! inspiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))",
            "scope_mode_coco": "(((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton))",
            "scope_mode_ft": "(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "RM",
            "post_condition_unexp_ft": "RM",
            "post_condition_SMV_pt": "RM",
            "post_condition_SMV_ft": "RM",
            "post_condition_coco_smv": "RM",
            "post_condition_coco": "RM",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST))) | (X (((Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST))))) -> ((X ((! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST)) U RM)) & (! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST)) U RM)))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) -> (((Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST))))) -> ((X ((! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST)) U RM)) & (! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) | LAST)) U RM)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))))) & (((! Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) S ((! Lin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & Fin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))))))))) & (((! ((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) S ((! ((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & ((! (Y TRUE)) | (Y (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & ((! (Y TRUE)) | (Y (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (! LAST)) & (X (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) & (! LAST))) | (X ((((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST))))) -> ((X ((! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST)) U RM)) & (! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST))))) & (inspiratoryPhaseEnd -> ((! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST)) U RM)))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) -> ((((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST))))) -> ((X ((! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST)) U RM)) & (! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST))))) & (inspiratoryPhaseEnd -> ((! ((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | LAST)) U RM)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) ) & (X (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | (X (((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> ((X ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) -> (((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> ((X ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) ) & (X (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) | (X ((F (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) -> (((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> ((X ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM))))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) -> ((F (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) -> (((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> ((X ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) ) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (! LAST)) & (X (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) & (! LAST))) | (X (((! LAST) U (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) -> (((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) -> ((X ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM))))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) -> (((! LAST) U (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) -> (((((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) -> ((X ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM)) & (! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (! LAST)) & (X (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))) U RM))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton))) and (YtoPre((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton))))) => (YtoPre((SI( ((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)) and (FTP or (YtoPre( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)) and (FTP or (YtoPre( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)))))))), ( not RM) ))))))) and ((SI( ((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)) and (FTP or (YtoPre( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)))))), ( not (( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton))) and (YtoPre((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)))))) )) => ((SI( ((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)) and (FTP or (YtoPre( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)) and (FTP or (YtoPre( not (((PCVMode or PSVMode) and RMButton) and ( not inspiratoryPauseButton)))))))), ( not RM) ))))))",
            "component": "System"
        },
        "_id": "c0d311e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT10",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The transition from PSV to VentilationOff shall occur if the user stops the ventilation in PSV mode. Rationale: the ventilation stops when the user selects the\nstop command from the GUI.",
        "comments": "Exactly the same as CONT8, just with PSVMode",
        "fulltext": "in PSVMode if stopVentilation System shall satisfy StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "stopVentilation",
                "StandbyMode"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "if",
            "pre_condition": "(stopVentilation)",
            "regular_condition": "(stopVentilation)",
            "conditionTextRange": [
                11,
                28
            ],
            "component_name": "System",
            "componentTextRange": [
                30,
                35
            ],
            "post_condition": "(StandbyMode)",
            "responseTextRange": [
                43,
                61
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(stopVentilation)</i></b>, Response = <b><i>(StandbyMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(stopVentilation)</i></b> is true and any point in the interval where <b><i>(stopVentilation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "stopVentilation",
            "regular_condition_unexp_ft": "stopVentilation",
            "regular_condition_SMV_pt": "stopVentilation",
            "regular_condition_SMV_ft": "stopVentilation",
            "regular_condition_coco_smv": "stopVentilation",
            "regular_condition_coco": "stopVentilation",
            "post_condition_unexp_pt": "StandbyMode",
            "post_condition_unexp_ft": "StandbyMode",
            "post_condition_SMV_pt": "StandbyMode",
            "post_condition_SMV_ft": "StandbyMode",
            "post_condition_coco_smv": "StandbyMode",
            "post_condition_coco": "StandbyMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U StandbyMode)) & (! (Lin_PSVMode | LAST))))) & (stopVentilation -> ((! (Lin_PSVMode | LAST)) U StandbyMode)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U StandbyMode)) & (! (Lin_PSVMode | LAST))))) & (stopVentilation -> ((! (Lin_PSVMode | LAST)) U StandbyMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! stopVentilation) S ((! stopVentilation) & Fin_PSVMode)) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! stopVentilation) S ((! stopVentilation) & Fin_PSVMode)) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! stopVentilation) S ((! stopVentilation) & (PSVMode & (Z (! PSVMode))))) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! stopVentilation) S ((! stopVentilation) & (PSVMode & (Z (! PSVMode))))) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! stopVentilation) S ((! stopVentilation) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U StandbyMode)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & (stopVentilation -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U StandbyMode)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U StandbyMode)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & (stopVentilation -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U StandbyMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode)) & (! ((PSVMode ) & (X (! PSVMode))))))) & (stopVentilation -> ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode)) & (! ((PSVMode ) & (X (! PSVMode))))))) & (stopVentilation -> ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode)) & (! ((PSVMode ) & (X (! PSVMode))))))) & (stopVentilation -> ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode)) & (! ((PSVMode ) & (X (! PSVMode))))))) & (stopVentilation -> ((! ((PSVMode ) & (X (! PSVMode)))) U StandbyMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U StandbyMode)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & (stopVentilation -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U StandbyMode))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U StandbyMode)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & (stopVentilation -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U StandbyMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not stopVentilation) )) or ( not (SI( (stopVentilation and ((YtoPre( not stopVentilation)) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not StandbyMode) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not stopVentilation) )) or ( not (SI( (stopVentilation and ((YtoPre( not stopVentilation)) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not StandbyMode) ))))))",
            "component": "System"
        },
        "_id": "c0d338f0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT24",
        "parent_reqid": "FUN22",
        "project": "Ventilator v0.5",
        "rationale": "At the end of an inspiration phase, if inspiratory pause is not required and the Recruitment Maneuver (RM) is set by the GUI, a Recruitment Maneuver shall start (see CONT.43).",
        "comments": "Oisín, v0.5: Copied the structure of FUN29/CONT23 for this one. Oddly, FUN22 doesn't say the RM occurs at the end of an inspiration phase, and thus we say there that it happens immediately.",
        "fulltext": "while PCVMode & RMButton when inspiratoryPhaseEnd System shall satisfy RM",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "RMButton",
                "inspiratoryPhaseEnd",
                "RM"
            ],
            "scope_mode": "(PCVMode & RMButton)",
            "scopeTextRange": [
                0,
                23
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPhaseEnd)",
            "regular_condition": "(inspiratoryPhaseEnd)",
            "conditionTextRange": [
                25,
                48
            ],
            "component_name": "System",
            "componentTextRange": [
                50,
                55
            ],
            "post_condition": "(RM)",
            "responseTextRange": [
                63,
                72
            ],
            "diagramVariables": "M = <b><i>(PCVMode & RMButton)</i></b>,, TC = <b><i>(inspiratoryPhaseEnd)</i></b>, Response = <b><i>(RM)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PCVMode & RMButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "(PCVMode & RMButton)",
            "scope_mode_coco": "(PCVMode and RMButton)",
            "scope_mode_ft": "(PCVMode & RMButton)",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "RM",
            "post_condition_unexp_ft": "RM",
            "post_condition_SMV_pt": "RM",
            "post_condition_SMV_ft": "RM",
            "post_condition_coco_smv": "RM",
            "post_condition_coco": "RM",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_(PCVMode & RMButton) & (! LAST))) | (X (((Lin_(PCVMode & RMButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PCVMode & RMButton) | LAST))))) -> ((X ((! (Lin_(PCVMode & RMButton) | LAST)) U RM)) & (! (Lin_(PCVMode & RMButton) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_(PCVMode & RMButton) | LAST)) U RM)))))) & ((PCVMode & RMButton) -> (((Lin_(PCVMode & RMButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_(PCVMode & RMButton) | LAST))))) -> ((X ((! (Lin_(PCVMode & RMButton) | LAST)) U RM)) & (! (Lin_(PCVMode & RMButton) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_(PCVMode & RMButton) | LAST)) U RM)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_(PCVMode & RMButton) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PCVMode & RMButton))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PCVMode & RMButton)))))))))) & (((! Lin_(PCVMode & RMButton)) S ((! Lin_(PCVMode & RMButton)) & Fin_(PCVMode & RMButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_(PCVMode & RMButton))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_(PCVMode & RMButton)))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))))))))) & (((! ((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton)))) S ((! ((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton)))) & ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & RMButton) & ((! (Y TRUE)) | (Y (! (PCVMode & RMButton))))))) | (! ((! RM) S ((! RM) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & ((! (Y TRUE)) | (Y (! (PCVMode & RMButton))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! (PCVMode & RMButton)) & (! LAST)) & (X (PCVMode & RMButton))) & (! LAST))) | (X ((((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST))))) -> ((X ((! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST)) U RM)) & (! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST)) U RM)))))) & ((PCVMode & RMButton) -> ((((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST))))) -> ((X ((! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST)) U RM)) & (! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) | LAST)) U RM)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! (PCVMode & RMButton)) ) & (X (PCVMode & RMButton)))) | (X (((((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))))) -> ((X ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM)) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM)))))) & ((PCVMode & RMButton) -> (((((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))))) -> ((X ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM)) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! (PCVMode & RMButton)) ) & (X (PCVMode & RMButton)))) | (X ((F (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) -> (((((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))))) -> ((X ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM)) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM))))))) & ((PCVMode & RMButton) -> ((F (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) -> (((((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))))) -> ((X ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM)) & (! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PCVMode & RMButton) ) & (X (! (PCVMode & RMButton))))) U RM))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PCVMode & RMButton)) & (! LAST)) & (X (PCVMode & RMButton))) & (! LAST))) | (X (((! LAST) U (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton))))) -> (((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))))))) -> ((X ((! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton))))) U RM)) & (! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton))))) U RM))))))) & ((PCVMode & RMButton) -> (((! LAST) U (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton))))) -> (((((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))))))) -> ((X ((! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton))))) U RM)) & (! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton)))))))) & (inspiratoryPhaseEnd -> ((! (((PCVMode & RMButton) & (! LAST)) & (X (! (PCVMode & RMButton))))) U RM))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not (PCVMode and RMButton)) and (YtoPre((PCVMode and RMButton)))) => (YtoPre((SI( ((PCVMode and RMButton) and (FTP or (YtoPre( not (PCVMode and RMButton))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PCVMode and RMButton) and (FTP or (YtoPre( not (PCVMode and RMButton))))))), ( not RM) ))))))) and ((SI( ((PCVMode and RMButton) and (FTP or (YtoPre( not (PCVMode and RMButton))))), ( not (( not (PCVMode and RMButton)) and (YtoPre((PCVMode and RMButton))))) )) => ((SI( ((PCVMode and RMButton) and (FTP or (YtoPre( not (PCVMode and RMButton))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or ((PCVMode and RMButton) and (FTP or (YtoPre( not (PCVMode and RMButton))))))), ( not RM) ))))))",
            "component": "System"
        },
        "_id": "c0d36000-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT42_1",
        "parent_reqid": "FUN28",
        "project": "Ventilator v0.5",
        "rationale": "When the Expiratory Pause is set by the GUI, the ventilator shall wait for the end of the next expiration phase, and if the Expiratory Pause is still required, both the inspiratory and expiratory valves will close until the expiratory pause is stopped by the GUI.",
        "comments": "",
        "fulltext": "while (PCVMode | PSVMode) & expiratoryPauseButton when expiratoryPhaseEnd System shall satisfy (expiratoryPauseButton => expiratoryPause & inValveClose & outValveClose)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVMode",
                "expiratoryPauseButton",
                "expiratoryPhaseEnd",
                "expiratoryPause",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(( PCVMode | PSVMode ) & expiratoryPauseButton)",
            "scopeTextRange": [
                0,
                48
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPhaseEnd)",
            "regular_condition": "(expiratoryPhaseEnd)",
            "conditionTextRange": [
                50,
                72
            ],
            "component_name": "System",
            "componentTextRange": [
                74,
                79
            ],
            "post_condition": "(( expiratoryPauseButton => expiratoryPause & inValveClose & outValveClose ))",
            "responseTextRange": [
                87,
                167
            ],
            "diagramVariables": "M = <b><i>(( PCVMode | PSVMode ) & expiratoryPauseButton)</i></b>,, TC = <b><i>(expiratoryPhaseEnd)</i></b>, Response = <b><i>(( expiratoryPauseButton => expiratoryPause & inValveClose & outValveClose ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(( PCVMode | PSVMode ) & expiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(expiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(expiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "((PCVMode | PSVMode) & expiratoryPauseButton)",
            "scope_mode_coco": "((PCVMode or PSVMode) and expiratoryPauseButton)",
            "scope_mode_ft": "((PCVMode | PSVMode) & expiratoryPauseButton)",
            "regular_condition_unexp_pt": "expiratoryPhaseEnd",
            "regular_condition_unexp_ft": "expiratoryPhaseEnd",
            "regular_condition_SMV_pt": "expiratoryPhaseEnd",
            "regular_condition_SMV_ft": "expiratoryPhaseEnd",
            "regular_condition_coco_smv": "expiratoryPhaseEnd",
            "regular_condition_coco": "expiratoryPhaseEnd",
            "post_condition_unexp_pt": "(expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))",
            "post_condition_unexp_ft": "(expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))",
            "post_condition_SMV_pt": "(expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))",
            "post_condition_SMV_ft": "(expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))",
            "post_condition_coco_smv": "(expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))",
            "post_condition_coco": "(expiratoryPauseButton => ((expiratoryPause and inValveClose) and outValveClose))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST))) | (X (((Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST) V (((! expiratoryPhaseEnd) & ((! LAST) & ((X expiratoryPhaseEnd) & (! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST))))) -> ((X ((! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST))))) & (expiratoryPhaseEnd -> ((! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) -> (((Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST) V (((! expiratoryPhaseEnd) & ((! LAST) & ((X expiratoryPhaseEnd) & (! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST))))) -> ((X ((! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST))))) & (expiratoryPhaseEnd -> ((! (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_((PCVMode | PSVMode) & expiratoryPauseButton) -> (Y (((! expiratoryPhaseEnd) S ((! expiratoryPhaseEnd) & Fin_((PCVMode | PSVMode) & expiratoryPauseButton))) | (! ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) S ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) & (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | Fin_((PCVMode | PSVMode) & expiratoryPauseButton)))))))))) & (((! Lin_((PCVMode | PSVMode) & expiratoryPauseButton)) S ((! Lin_((PCVMode | PSVMode) & expiratoryPauseButton)) & Fin_((PCVMode | PSVMode) & expiratoryPauseButton))) -> (((! expiratoryPhaseEnd) S ((! expiratoryPhaseEnd) & Fin_((PCVMode | PSVMode) & expiratoryPauseButton))) | (! ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) S ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) & (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | Fin_((PCVMode | PSVMode) & expiratoryPauseButton)))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton))) -> (Y (((! expiratoryPhaseEnd) S ((! expiratoryPhaseEnd) & (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) | (! ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) S ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) & (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))))))))) & (((! ((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton)))) S ((! ((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton)))) & (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) -> (((! expiratoryPhaseEnd) S ((! expiratoryPhaseEnd) & (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) | (! ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) S ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) & (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton))) -> (Y (((! expiratoryPhaseEnd) S ((! expiratoryPhaseEnd) & (((PCVMode | PSVMode) & expiratoryPauseButton) & ((! (Y TRUE)) | (Y (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) | (! ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) S ((! (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))) & (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & ((! (Y TRUE)) | (Y (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (! LAST)) & (X ((PCVMode | PSVMode) & expiratoryPauseButton))) & (! LAST))) | (X (((((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST) V (((! expiratoryPhaseEnd) & ((! LAST) & ((X expiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST))))) -> ((X ((! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST))))) & (expiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) -> (((((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST) V (((! expiratoryPhaseEnd) & ((! LAST) & ((X expiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST))))) -> ((X ((! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST))))) & (expiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) | LAST)) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! ((PCVMode | PSVMode) & expiratoryPauseButton)) ) & (X ((PCVMode | PSVMode) & expiratoryPauseButton)))) | (X ((((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) V (((! expiratoryPhaseEnd) & ((X expiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) & (expiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) -> ((((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) V (((! expiratoryPhaseEnd) & ((X expiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) & (expiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! ((PCVMode | PSVMode) & expiratoryPauseButton)) ) & (X ((PCVMode | PSVMode) & expiratoryPauseButton)))) | (X ((F ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) V (((! expiratoryPhaseEnd) & ((X expiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) & (expiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))))))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) -> ((F ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) V (((! expiratoryPhaseEnd) & ((X expiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) & (expiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (! LAST)) & (X ((PCVMode | PSVMode) & expiratoryPauseButton))) & (! LAST))) | (X (((! LAST) U ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) V (((! expiratoryPhaseEnd) & ((! LAST) & ((X expiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) -> ((X ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) & (expiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))))))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) -> (((! LAST) U ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))) V (((! expiratoryPhaseEnd) & ((! LAST) & ((X expiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) -> ((X ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))))) & (expiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & expiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & expiratoryPauseButton))))) U (expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not ((PCVMode or PSVMode) and expiratoryPauseButton)) and (YtoPre(((PCVMode or PSVMode) and expiratoryPauseButton)))) => (YtoPre((SI( (((PCVMode or PSVMode) and expiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and expiratoryPauseButton))))), ( not expiratoryPhaseEnd) )) or ( not (SI( (expiratoryPhaseEnd and ((YtoPre( not expiratoryPhaseEnd)) or (((PCVMode or PSVMode) and expiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and expiratoryPauseButton))))))), ( not (expiratoryPauseButton => ((expiratoryPause and inValveClose) and outValveClose))) ))))))) and ((SI( (((PCVMode or PSVMode) and expiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and expiratoryPauseButton))))), ( not (( not ((PCVMode or PSVMode) and expiratoryPauseButton)) and (YtoPre(((PCVMode or PSVMode) and expiratoryPauseButton))))) )) => ((SI( (((PCVMode or PSVMode) and expiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and expiratoryPauseButton))))), ( not expiratoryPhaseEnd) )) or ( not (SI( (expiratoryPhaseEnd and ((YtoPre( not expiratoryPhaseEnd)) or (((PCVMode or PSVMode) and expiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and expiratoryPauseButton))))))), ( not (expiratoryPauseButton => ((expiratoryPause and inValveClose) and outValveClose))) ))))))",
            "component": "System"
        },
        "_id": "c0d36001-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT6",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The transition from VentilationOff to PCV mode shall occur if the change mode command is received from the GUI.\nRationale: the ventilation starts in PSV mode when the user selects the start command from the GUI.",
        "comments": "Oisín: Again, replacing VentilationOff with StandbyMode",
        "fulltext": "in StandbyMode if PCVModeSelected System shall satisfy PCVMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StandbyMode",
                "PCVModeSelected",
                "PCVMode"
            ],
            "scope_mode": "StandbyMode",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "if",
            "pre_condition": "(PCVModeSelected)",
            "regular_condition": "(PCVModeSelected)",
            "conditionTextRange": [
                15,
                32
            ],
            "component_name": "System",
            "componentTextRange": [
                34,
                39
            ],
            "post_condition": "(PCVMode)",
            "responseTextRange": [
                47,
                61
            ],
            "diagramVariables": "M = <b><i>StandbyMode</i></b>,, TC = <b><i>(PCVModeSelected)</i></b>, Response = <b><i>(PCVMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StandbyMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PCVModeSelected)</i></b> is true and any point in the interval where <b><i>(PCVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "StandbyMode",
            "scope_mode_coco": "StandbyMode",
            "scope_mode_ft": "StandbyMode",
            "regular_condition_unexp_pt": "PCVModeSelected",
            "regular_condition_unexp_ft": "PCVModeSelected",
            "regular_condition_SMV_pt": "PCVModeSelected",
            "regular_condition_SMV_ft": "PCVModeSelected",
            "regular_condition_coco_smv": "PCVModeSelected",
            "regular_condition_coco": "PCVModeSelected",
            "post_condition_unexp_pt": "PCVMode",
            "post_condition_unexp_ft": "PCVMode",
            "post_condition_SMV_pt": "PCVMode",
            "post_condition_SMV_ft": "PCVMode",
            "post_condition_coco_smv": "PCVMode",
            "post_condition_coco": "PCVMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_StandbyMode & (! LAST))) | (X (((Lin_StandbyMode | LAST) V (((! PCVModeSelected) & ((! LAST) & ((X PCVModeSelected) & (! (Lin_StandbyMode | LAST))))) -> ((X ((! (Lin_StandbyMode | LAST)) U PCVMode)) & (! (Lin_StandbyMode | LAST))))) & (PCVModeSelected -> ((! (Lin_StandbyMode | LAST)) U PCVMode)))))) & (StandbyMode -> (((Lin_StandbyMode | LAST) V (((! PCVModeSelected) & ((! LAST) & ((X PCVModeSelected) & (! (Lin_StandbyMode | LAST))))) -> ((X ((! (Lin_StandbyMode | LAST)) U PCVMode)) & (! (Lin_StandbyMode | LAST))))) & (PCVModeSelected -> ((! (Lin_StandbyMode | LAST)) U PCVMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_StandbyMode -> (Y (((! PCVModeSelected) S ((! PCVModeSelected) & Fin_StandbyMode)) | (! ((! PCVMode) S ((! PCVMode) & (PCVModeSelected & ((Y (! PCVModeSelected)) | Fin_StandbyMode))))))))) & (((! Lin_StandbyMode) S ((! Lin_StandbyMode) & Fin_StandbyMode)) -> (((! PCVModeSelected) S ((! PCVModeSelected) & Fin_StandbyMode)) | (! ((! PCVMode) S ((! PCVMode) & (PCVModeSelected & ((Y (! PCVModeSelected)) | Fin_StandbyMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! StandbyMode) & (Y StandbyMode)) -> (Y (((! PCVModeSelected) S ((! PCVModeSelected) & (StandbyMode & (Z (! StandbyMode))))) | (! ((! PCVMode) S ((! PCVMode) & (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))))))))) & (((! ((! StandbyMode) & (Y StandbyMode))) S ((! ((! StandbyMode) & (Y StandbyMode))) & (StandbyMode & (Z (! StandbyMode))))) -> (((! PCVModeSelected) S ((! PCVModeSelected) & (StandbyMode & (Z (! StandbyMode))))) | (! ((! PCVMode) S ((! PCVMode) & (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! StandbyMode) & (Y StandbyMode)) -> (Y (((! PCVModeSelected) S ((! PCVModeSelected) & (StandbyMode & ((! (Y TRUE)) | (Y (! StandbyMode)))))) | (! ((! PCVMode) S ((! PCVMode) & (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & ((! (Y TRUE)) | (Y (! StandbyMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X (((((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST) V (((! PCVModeSelected) & ((! LAST) & ((X PCVModeSelected) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) -> ((X ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PCVMode)) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) & (PCVModeSelected -> ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PCVMode)))))) & (StandbyMode -> (((((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST) V (((! PCVModeSelected) & ((! LAST) & ((X PCVModeSelected) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) -> ((X ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PCVMode)) & (! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST))))) & (PCVModeSelected -> ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U PCVMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((((StandbyMode ) & (X (! StandbyMode))) V (((! PCVModeSelected) & ((X PCVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PCVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode)))))) & (StandbyMode -> ((((StandbyMode ) & (X (! StandbyMode))) V (((! PCVModeSelected) & ((X PCVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PCVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((((StandbyMode ) & (X (! StandbyMode))) V (((! PCVModeSelected) & ((X PCVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PCVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode))))))) & (StandbyMode -> ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((((StandbyMode ) & (X (! StandbyMode))) V (((! PCVModeSelected) & ((X PCVModeSelected) & (! ((StandbyMode ) & (X (! StandbyMode)))))) -> ((X ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode)) & (! ((StandbyMode ) & (X (! StandbyMode))))))) & (PCVModeSelected -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U PCVMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((((StandbyMode & (! LAST)) & (X (! StandbyMode))) V (((! PCVModeSelected) & ((! LAST) & ((X PCVModeSelected) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) -> ((X ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PCVMode)) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) & (PCVModeSelected -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PCVMode))))))) & (StandbyMode -> (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((((StandbyMode & (! LAST)) & (X (! StandbyMode))) V (((! PCVModeSelected) & ((! LAST) & ((X PCVModeSelected) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) -> ((X ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PCVMode)) & (! ((StandbyMode & (! LAST)) & (X (! StandbyMode))))))) & (PCVModeSelected -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U PCVMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not StandbyMode) and (YtoPre(StandbyMode))) => (YtoPre((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not PCVModeSelected) )) or ( not (SI( (PCVModeSelected and ((YtoPre( not PCVModeSelected)) or (StandbyMode and (FTP or (YtoPre( not StandbyMode)))))), ( not PCVMode) ))))))) and ((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (( not StandbyMode) and (YtoPre(StandbyMode)))) )) => ((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not PCVModeSelected) )) or ( not (SI( (PCVModeSelected and ((YtoPre( not PCVModeSelected)) or (StandbyMode and (FTP or (YtoPre( not StandbyMode)))))), ( not PCVMode) ))))))",
            "component": "System"
        },
        "_id": "c0d38710-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT41_1",
        "parent_reqid": "FUN29",
        "project": "Ventilator v0.5",
        "rationale": "When the Inspiratory Pause is set by the GUI, the ventilator shall wait for the end of the next inspiration phase, and if the Inspiratory Pause still required, both the inspiratory and expiratory valves will close until the inspiratory pause is stopped by the GUI.",
        "comments": "FUN29: while inspiratoryPauseButton when (inspiratoryPhaseEnd) System shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose)\n\nOisín, v0.5: This is basically just a copy of FUN29, just without the time limit.",
        "fulltext": "while (PCVMode | PSVMode) & inspiratoryPauseButton when inspiratoryPhaseEnd System shall satisfy (inspiratoryPauseButton => inspiratoryPause & inValveClose & outValveClose)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVMode",
                "inspiratoryPauseButton",
                "inspiratoryPhaseEnd",
                "inspiratoryPause",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(( PCVMode | PSVMode ) & inspiratoryPauseButton)",
            "scopeTextRange": [
                0,
                49
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPhaseEnd)",
            "regular_condition": "(inspiratoryPhaseEnd)",
            "conditionTextRange": [
                51,
                74
            ],
            "component_name": "System",
            "componentTextRange": [
                76,
                81
            ],
            "post_condition": "(( inspiratoryPauseButton => inspiratoryPause & inValveClose & outValveClose ))",
            "responseTextRange": [
                89,
                171
            ],
            "diagramVariables": "M = <b><i>(( PCVMode | PSVMode ) & inspiratoryPauseButton)</i></b>,, TC = <b><i>(inspiratoryPhaseEnd)</i></b>, Response = <b><i>(( inspiratoryPauseButton => inspiratoryPause & inValveClose & outValveClose ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(( PCVMode | PSVMode ) & inspiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "((PCVMode | PSVMode) & inspiratoryPauseButton)",
            "scope_mode_coco": "((PCVMode or PSVMode) and inspiratoryPauseButton)",
            "scope_mode_ft": "((PCVMode | PSVMode) & inspiratoryPauseButton)",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "(inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))",
            "post_condition_unexp_ft": "(inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))",
            "post_condition_SMV_pt": "(inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))",
            "post_condition_SMV_ft": "(inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))",
            "post_condition_coco_smv": "(inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))",
            "post_condition_coco": "(inspiratoryPauseButton => ((inspiratoryPause and inValveClose) and outValveClose))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST))) | (X (((Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST))))) -> ((X ((! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) -> (((Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST))))) -> ((X ((! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST))))) & (inspiratoryPhaseEnd -> ((! (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_((PCVMode | PSVMode) & inspiratoryPauseButton) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_((PCVMode | PSVMode) & inspiratoryPauseButton))) | (! ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) S ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_((PCVMode | PSVMode) & inspiratoryPauseButton)))))))))) & (((! Lin_((PCVMode | PSVMode) & inspiratoryPauseButton)) S ((! Lin_((PCVMode | PSVMode) & inspiratoryPauseButton)) & Fin_((PCVMode | PSVMode) & inspiratoryPauseButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_((PCVMode | PSVMode) & inspiratoryPauseButton))) | (! ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) S ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_((PCVMode | PSVMode) & inspiratoryPauseButton)))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) | (! ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) S ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))))))))) & (((! ((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton)))) S ((! ((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton)))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) | (! ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) S ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton))) -> (Y (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) | (! ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) S ((! (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))) & (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & ((! (Y TRUE)) | (Y (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (! LAST)) & (X ((PCVMode | PSVMode) & inspiratoryPauseButton))) & (! LAST))) | (X (((((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST))))) -> ((X ((! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) -> (((((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST))))) -> ((X ((! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST))))) & (inspiratoryPhaseEnd -> ((! (((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | LAST)) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) ) & (X ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | (X ((((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) -> ((((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) ) & (X ((PCVMode | PSVMode) & inspiratoryPauseButton)))) | (X ((F ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))))))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) -> ((F ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((X ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) ) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (! LAST)) & (X ((PCVMode | PSVMode) & inspiratoryPauseButton))) & (! LAST))) | (X (((! LAST) U ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) -> ((X ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))))))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) -> (((! LAST) U ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) -> ((((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) -> ((X ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)))) & (! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))))) & (inspiratoryPhaseEnd -> ((! ((((PCVMode | PSVMode) & inspiratoryPauseButton) & (! LAST)) & (X (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))) U (inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not ((PCVMode or PSVMode) and inspiratoryPauseButton)) and (YtoPre(((PCVMode or PSVMode) and inspiratoryPauseButton)))) => (YtoPre((SI( (((PCVMode or PSVMode) and inspiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and inspiratoryPauseButton))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or (((PCVMode or PSVMode) and inspiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and inspiratoryPauseButton))))))), ( not (inspiratoryPauseButton => ((inspiratoryPause and inValveClose) and outValveClose))) ))))))) and ((SI( (((PCVMode or PSVMode) and inspiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and inspiratoryPauseButton))))), ( not (( not ((PCVMode or PSVMode) and inspiratoryPauseButton)) and (YtoPre(((PCVMode or PSVMode) and inspiratoryPauseButton))))) )) => ((SI( (((PCVMode or PSVMode) and inspiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and inspiratoryPauseButton))))), ( not inspiratoryPhaseEnd) )) or ( not (SI( (inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or (((PCVMode or PSVMode) and inspiratoryPauseButton) and (FTP or (YtoPre( not ((PCVMode or PSVMode) and inspiratoryPauseButton))))))), ( not (inspiratoryPauseButton => ((inspiratoryPause and inValveClose) and outValveClose))) ))))))",
            "component": "System"
        },
        "_id": "c0d3ae20-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT18",
        "parent_reqid": "FUN6",
        "project": "Ventilator v0.5",
        "rationale": "During the self test mode the controller shall perform the self-test specified in the FUN.6.",
        "comments": "Oisín, v0.5: Feel like this one should just be the same as FUN6",
        "fulltext": "in SelfTestMode System shall eventually satisfy selfTestPassed | selfTestFailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "selfTestPassed",
                "selfTestFailed"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "timingTextRange": [
                29,
                38
            ],
            "post_condition": "(selfTestPassed | selfTestFailed)",
            "responseTextRange": [
                40,
                78
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(selfTestPassed | selfTestFailed)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "(selfTestPassed | selfTestFailed)",
            "post_condition_unexp_ft": "(selfTestPassed | selfTestFailed)",
            "post_condition_SMV_pt": "(selfTestPassed | selfTestFailed)",
            "post_condition_SMV_ft": "(selfTestPassed | selfTestFailed)",
            "post_condition_coco_smv": "(selfTestPassed | selfTestFailed)",
            "post_condition_coco": "(selfTestPassed or selfTestFailed)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U (selfTestPassed | selfTestFailed))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (selfTestPassed | selfTestFailed))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or selfTestFailed)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or selfTestFailed)) )))))",
            "component": "System"
        },
        "_id": "c0d3d530-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN26",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PSV mode the expiration phase shall start when the inspiratory flow drops below a setable fraction of the peak flow (Expiratory Trigger Setting) \n\nRationale: Dropping inspiratory flow indicates the end of the inspiration\n\nAssuming that \"inspiratory flow\" is measured by Fl1 in figure 2.2",
        "comments": "Oisín, v0.3: renamed \"ExpiratoryTrigger\" to \"ExpiratoryTriggerSensitivity\" for consistency",
        "fulltext": "in PSVMode when Fl1 < ExpiratoryTriggerSensitivity System shall satisfy expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "Fl1",
                "ExpiratoryTriggerSensitivity",
                "expirationPhaseStart"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "conditionTextRange": [
                11,
                49
            ],
            "component_name": "System",
            "componentTextRange": [
                51,
                56
            ],
            "post_condition": "(expirationPhaseStart)",
            "responseTextRange": [
                64,
                91
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(Fl1 < ExpiratoryTriggerSensitivity)</i></b>, Response = <b><i>(expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(Fl1 < ExpiratoryTriggerSensitivity)</i></b> is true and any point in the interval where <b><i>(Fl1 < ExpiratoryTriggerSensitivity)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_unexp_ft": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_SMV_pt": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_SMV_ft": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_coco_smv": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "regular_condition_coco": "(Fl1 < ExpiratoryTriggerSensitivity)",
            "post_condition_unexp_pt": "expirationPhaseStart",
            "post_condition_unexp_ft": "expirationPhaseStart",
            "post_condition_SMV_pt": "expirationPhaseStart",
            "post_condition_SMV_ft": "expirationPhaseStart",
            "post_condition_coco_smv": "expirationPhaseStart",
            "post_condition_coco": "expirationPhaseStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)) & (! (Lin_PSVMode | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)) & (! (Lin_PSVMode | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (Lin_PSVMode | LAST)) U expirationPhaseStart)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & Fin_PSVMode)) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & Fin_PSVMode)) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & (PSVMode & (Z (! PSVMode))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & (PSVMode & (Z (! PSVMode))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (Fl1 < ExpiratoryTriggerSensitivity)) S ((! (Fl1 < ExpiratoryTriggerSensitivity)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! expirationPhaseStart) S ((! expirationPhaseStart) & ((Fl1 < ExpiratoryTriggerSensitivity) & ((Y (! (Fl1 < ExpiratoryTriggerSensitivity))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U expirationPhaseStart)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode ) & (X (! PSVMode)))) U expirationPhaseStart))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (Fl1 < ExpiratoryTriggerSensitivity)) & ((! LAST) & ((X (Fl1 < ExpiratoryTriggerSensitivity)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((Fl1 < ExpiratoryTriggerSensitivity) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U expirationPhaseStart))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (Fl1 < ExpiratoryTriggerSensitivity)) )) or ( not (SI( ((Fl1 < ExpiratoryTriggerSensitivity) and ((YtoPre( not (Fl1 < ExpiratoryTriggerSensitivity))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not expirationPhaseStart) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (Fl1 < ExpiratoryTriggerSensitivity)) )) or ( not (SI( ((Fl1 < ExpiratoryTriggerSensitivity) and ((YtoPre( not (Fl1 < ExpiratoryTriggerSensitivity))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not expirationPhaseStart) ))))))",
            "component": "System"
        },
        "_id": "c0d3d531-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_12",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall log user-set ventilation and alarm parameters as well as the current calibration parameters. \n\nRationale: user-set ventilation and alarm parameters need to be able for the resumption of ventilation in case the system has to be briefly turned off.",
        "comments": "",
        "fulltext": "System shall satisfy logVentilationParams & logAlarmParams & logCalibrationParams",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "logVentilationParams",
                "logAlarmParams",
                "logCalibrationParams"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(logVentilationParams & logAlarmParams & logCalibrationParams)",
            "responseTextRange": [
                13,
                80
            ],
            "diagramVariables": "Response = <b><i>(logVentilationParams & logAlarmParams & logCalibrationParams)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_unexp_ft": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_SMV_pt": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_SMV_ft": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_coco_smv": "((logVentilationParams & logAlarmParams) & logCalibrationParams)",
            "post_condition_coco": "((logVentilationParams and logAlarmParams) and logCalibrationParams)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((logVentilationParams & logAlarmParams) & logCalibrationParams))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((logVentilationParams and logAlarmParams) and logCalibrationParams)))",
            "component": "System"
        },
        "_id": "c0d3fc40-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN30",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The high-level operation sequence shall follow the scheme shown in Figure 2.1",
        "comments": "This is an activity diagram that shows the high-level mode changes. This should really be several requirements, this feels messy\n\nMatt, v0.4: Updating to match Fig 2.1 (updated in v1.3 of the natural language specification). Adding startPCV and startPSV, adding runSelfTest.\n\nOisín, v0.5: Noticed that this mistakenly had \"StandByMode\" instead of \"StandbyMode\" like everywhere else, so I changed it.",
        "fulltext": "System shall satisfy if StartUpMode then (if newPatient then SelfTestMode & if !newPatient then StandbyMode) & if SelfTestMode then (if selfTestPassed then StandbyMode) & if StandbyMode then (if startPCV then PCVMode & if startPSV then PSVMode & if runSelfTest then SelfTestMode) & if error then FailSafeMode & if powerOff then off",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "newPatient",
                "SelfTestMode",
                "StandbyMode",
                "selfTestPassed",
                "startPCV",
                "PCVMode",
                "startPSV",
                "PSVMode",
                "runSelfTest",
                "error",
                "FailSafeMode",
                "powerOff",
                "off"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(StartUpMode => ( newPatient => SelfTestMode & ! newPatient => StandbyMode ) & SelfTestMode => ( selfTestPassed => StandbyMode ) & StandbyMode => ( startPCV => PCVMode & startPSV => PSVMode & runSelfTest => SelfTestMode ) & error => FailSafeMode & powerOff => off)",
            "responseTextRange": [
                13,
                330
            ],
            "diagramVariables": "Response = <b><i>(StartUpMode => ( newPatient => SelfTestMode & ! newPatient => StandbyMode ) & SelfTestMode => ( selfTestPassed => StandbyMode ) & StandbyMode => ( startPCV => PCVMode & startPSV => PSVMode & runSelfTest => SelfTestMode ) & error => FailSafeMode & powerOff => off)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off)))))",
            "post_condition_unexp_ft": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off)))))",
            "post_condition_SMV_pt": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off)))))",
            "post_condition_SMV_ft": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off)))))",
            "post_condition_coco_smv": "(StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off)))))",
            "post_condition_coco": "(StartUpMode => (((newPatient => ((SelfTestMode and ( not newPatient)) => StandbyMode)) and SelfTestMode) => (((selfTestPassed => StandbyMode) and StandbyMode) => (((startPCV => ((PCVMode and startPSV) => ((PSVMode and runSelfTest) => SelfTestMode))) and error) => ((FailSafeMode and powerOff) => off)))))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((StartUpMode => (((newPatient => ((SelfTestMode and ( not newPatient)) => StandbyMode)) and SelfTestMode) => (((selfTestPassed => StandbyMode) and StandbyMode) => (((startPCV => ((PCVMode and startPSV) => ((PSVMode and runSelfTest) => SelfTestMode))) and error) => ((FailSafeMode and powerOff) => off)))))))",
            "component": "System"
        },
        "_id": "c0d44a60-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN23_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "When a PCV-to-PSV switch is initiated by the user the  system shall ask the user for confirmation/setting of PSV parameters to be used",
        "comments": "",
        "fulltext": "in PCVMode when PSVModeSelected System shall satisfy confirmPSVParameters",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVModeSelected",
                "confirmPSVParameters"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                11,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(confirmPSVParameters)",
            "responseTextRange": [
                45,
                72
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(confirmPSVParameters)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "confirmPSVParameters",
            "post_condition_unexp_ft": "confirmPSVParameters",
            "post_condition_SMV_pt": "confirmPSVParameters",
            "post_condition_SMV_ft": "confirmPSVParameters",
            "post_condition_coco_smv": "confirmPSVParameters",
            "post_condition_coco": "confirmPSVParameters",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U confirmPSVParameters)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U confirmPSVParameters)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U confirmPSVParameters))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U confirmPSVParameters))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not confirmPSVParameters) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not confirmPSVParameters) ))))))",
            "component": "System"
        },
        "_id": "c0d47170-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN40",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall react to the inspiratory airway pressure at the patient being exceeded (Max P insp alarm SAV.4) (e.g. by coughing) by truncating the inspiratory phase and immediately transitioning to expiration, quickly relieving the pressure. \n\nRationale: need to avoid excessive pressure in the lungs",
        "comments": "Matt, v0.4: Separating the subscripts with underscores.",
        "fulltext": "if P_insp > MaxP_insp System shall satisfy inspiratoryPhaseEnd & expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "P_insp",
                "MaxP_insp",
                "inspiratoryPhaseEnd",
                "expirationPhaseStart"
            ],
            "qualifier_word": "if",
            "pre_condition": "(P_insp > MaxP_insp)",
            "regular_condition": "(P_insp > MaxP_insp)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "post_condition": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "responseTextRange": [
                35,
                84
            ],
            "diagramVariables": "TC = <b><i>(P_insp > MaxP_insp)</i></b>, Response = <b><i>(inspiratoryPhaseEnd & expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P_insp > MaxP_insp)</i></b> is true and any point in the interval where <b><i>(P_insp > MaxP_insp)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(P_insp > MaxP_insp)",
            "regular_condition_unexp_ft": "(P_insp > MaxP_insp)",
            "regular_condition_SMV_pt": "(P_insp > MaxP_insp)",
            "regular_condition_SMV_ft": "(P_insp > MaxP_insp)",
            "regular_condition_coco_smv": "(P_insp > MaxP_insp)",
            "regular_condition_coco": "(P_insp > MaxP_insp)",
            "post_condition_unexp_pt": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_unexp_ft": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_SMV_pt": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_SMV_ft": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_coco_smv": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_coco": "(inspiratoryPhaseEnd and expirationPhaseStart)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (P_insp > MaxP_insp)) & (X (P_insp > MaxP_insp))) -> (X (F (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> (F (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (P_insp > MaxP_insp)) & (X (P_insp > MaxP_insp))) -> (X (F (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> (F (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (P_insp > MaxP_insp))) or ( not (SI( ((P_insp > MaxP_insp) and ((YtoPre( not (P_insp > MaxP_insp))) or FTP)), ( not (inspiratoryPhaseEnd and expirationPhaseStart)) ))))",
            "component": "System"
        },
        "_id": "c0d49880-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_4",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall not lose the contents of the alarm system log during a loss of power for less than 7 d unless erased by authorized personnel of the hospital.",
        "comments": "Not sure how to formalise this.",
        "fulltext": "",
        "semantics": {},
        "_id": "c0d4bf90-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN38_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall raise an alarm when a parameter value goes outside the range defined for its associated alarm.",
        "comments": "",
        "fulltext": "if param_V > paramMax_V | param_V < paramMin_V System shall satisfy paramAlarm_V",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "param_V",
                "paramMax_V",
                "paramMin_V",
                "paramAlarm_V"
            ],
            "qualifier_word": "if",
            "pre_condition": "(param_V > paramMax_V | param_V < paramMin_V)",
            "regular_condition": "(param_V > paramMax_V | param_V < paramMin_V)",
            "conditionTextRange": [
                0,
                45
            ],
            "component_name": "System",
            "componentTextRange": [
                47,
                52
            ],
            "post_condition": "(paramAlarm_V)",
            "responseTextRange": [
                60,
                79
            ],
            "diagramVariables": "TC = <b><i>(param_V > paramMax_V | param_V < paramMin_V)</i></b>, Response = <b><i>(paramAlarm_V)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(param_V > paramMax_V | param_V < paramMin_V)</i></b> is true and any point in the interval where <b><i>(param_V > paramMax_V | param_V < paramMin_V)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_unexp_ft": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_SMV_pt": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_SMV_ft": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_coco_smv": "((param_V > paramMax_V) | (param_V < paramMin_V))",
            "regular_condition_coco": "((param_V > paramMax_V) or (param_V < paramMin_V))",
            "post_condition_unexp_pt": "paramAlarm_V",
            "post_condition_unexp_ft": "paramAlarm_V",
            "post_condition_SMV_pt": "paramAlarm_V",
            "post_condition_SMV_ft": "paramAlarm_V",
            "post_condition_coco_smv": "paramAlarm_V",
            "post_condition_coco": "paramAlarm_V",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & ((! LAST) & (X ((param_V > paramMax_V) | (param_V < paramMin_V))))) -> (X ((! LAST) U paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> ((! LAST) U paramAlarm_V)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! ((! paramAlarm_V) S ((! paramAlarm_V) & (((param_V > paramMax_V) | (param_V < paramMin_V)) & ((Y (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! ((! paramAlarm_V) S ((! paramAlarm_V) & (((param_V > paramMax_V) | (param_V < paramMin_V)) & ((Y (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! ((! paramAlarm_V) S ((! paramAlarm_V) & (((param_V > paramMax_V) | (param_V < paramMin_V)) & ((Y (! ((param_V > paramMax_V) | (param_V < paramMin_V)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & ((! LAST) & (X ((param_V > paramMax_V) | (param_V < paramMin_V))))) -> (X ((! LAST) U paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> ((! LAST) U paramAlarm_V)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & (X ((param_V > paramMax_V) | (param_V < paramMin_V)))) -> (X (F paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> (F paramAlarm_V)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & (X ((param_V > paramMax_V) | (param_V < paramMin_V)))) -> (X (F paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> (F paramAlarm_V)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! ((param_V > paramMax_V) | (param_V < paramMin_V))) & ((! LAST) & (X ((param_V > paramMax_V) | (param_V < paramMin_V))))) -> (X ((! LAST) U paramAlarm_V)))) & (((param_V > paramMax_V) | (param_V < paramMin_V)) -> ((! LAST) U paramAlarm_V)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not ((param_V > paramMax_V) or (param_V < paramMin_V)))) or ( not (SI( (((param_V > paramMax_V) or (param_V < paramMin_V)) and ((YtoPre( not ((param_V > paramMax_V) or (param_V < paramMin_V)))) or FTP)), ( not paramAlarm_V) ))))",
            "component": "System"
        },
        "_id": "c0d4e6a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The self-test procedure shall confirm the FI2 flow meter in the patient breathing circuit is connected in the right direction and is calibrated.",
        "comments": "Oisín, v0.3.1: Changed the response from just \"satisfy testFl2\" to \"satisfy testFl2Pass | testFl2Fail | testFl2Skip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testFl2Pass | testFl2Fail | testFl2Skip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testFl2Pass",
                "testFl2Fail",
                "testFl2Skip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testFl2Pass | testFl2Fail | testFl2Skip)",
            "responseTextRange": [
                29,
                75
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testFl2Pass | testFl2Fail | testFl2Skip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_unexp_ft": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_SMV_pt": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_SMV_ft": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_coco_smv": "((testFl2Pass | testFl2Fail) | testFl2Skip)",
            "post_condition_coco": "((testFl2Pass or testFl2Fail) or testFl2Skip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) S ((! ((testFl2Pass | testFl2Fail) | testFl2Skip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testFl2Pass | testFl2Fail) | testFl2Skip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testFl2Pass or testFl2Fail) or testFl2Skip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testFl2Pass or testFl2Fail) or testFl2Skip)) )))))",
            "component": "System"
        },
        "_id": "c0d50db0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN15",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall measure the Ventilatorv0.2 pressure at/near the inlet to the patient. \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function\n\nAssuming that \"Ventilatorv0.2 pressure at/near the inlet to the patient\" is the same as PSins (pressure in the entrance to the patient) in Figure 2.2",
        "comments": "",
        "fulltext": "System shall satisfy measurePSins",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measurePSins"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measurePSins)",
            "responseTextRange": [
                13,
                32
            ],
            "diagramVariables": "Response = <b><i>(measurePSins)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "measurePSins",
            "post_condition_unexp_ft": "measurePSins",
            "post_condition_SMV_pt": "measurePSins",
            "post_condition_SMV_ft": "measurePSins",
            "post_condition_coco_smv": "measurePSins",
            "post_condition_coco": "measurePSins",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U measurePSins)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O measurePSins)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O measurePSins)",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O measurePSins)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U measurePSins)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F measurePSins)",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F measurePSins)",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U measurePSins)",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(measurePSins))",
            "component": "System"
        },
        "_id": "c0d534c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN5_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Upon initiation of the Start-up Mode, the system shall go through an initialization process that loads default parameters and checks the system memory and the communication of the controller with the sensors and valves, as well as between the controller and the GUI. \n\nRationale: Need to ensure that the system properly started.",
        "comments": "Oisin, v.0.3: changed \"shall satisfy initDone\" to \"shall satisfy initStart\", since I think that more accurately captures what's happening. The NL requirement has more detail on the initialisation process, maybe that could be a further child requirement? Or just included here\n\nOisín, v0.5: I decided to make this more detailed now since CONT13 and CONT14 are child requirements of this one. Previous text:\n\"in StartUpMode System shall satisfy initStart\"",
        "fulltext": "in StartUpMode System shall satisfy initStart & checkCommsSensors & checkCommsValves & checkCommsGUI",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "initStart",
                "checkCommsSensors",
                "checkCommsValves",
                "checkCommsGUI"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(initStart & checkCommsSensors & checkCommsValves & checkCommsGUI)",
            "responseTextRange": [
                28,
                99
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(initStart & checkCommsSensors & checkCommsValves & checkCommsGUI)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "(((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)",
            "post_condition_unexp_ft": "(((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)",
            "post_condition_SMV_pt": "(((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)",
            "post_condition_SMV_ft": "(((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)",
            "post_condition_coco_smv": "(((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)",
            "post_condition_coco": "(((initStart and checkCommsSensors) and checkCommsValves) and checkCommsGUI)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI))))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI))))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI))))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (((initStart and checkCommsSensors) and checkCommsValves) and checkCommsGUI)) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (((initStart and checkCommsSensors) and checkCommsValves) and checkCommsGUI)) )))))",
            "component": "System"
        },
        "_id": "c0d55bd0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN41",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "A failure of the GUI (e.g. GUI freezes) or a loss of communication between the GUI and the Controller shall raise a high-priority alarm and any ongoing ventilation process shall not be interrupted. \n\nRationale: in order to keep the patient safe, the ventilation needs to continue even if there is no connection between the controller and the GUI",
        "comments": "",
        "fulltext": "if GUIFailue | !GUIConnected System shall satisfy ventilating & highPriorityAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "GUIFailue",
                "GUIConnected",
                "ventilating",
                "highPriorityAlarm"
            ],
            "qualifier_word": "if",
            "pre_condition": "(GUIFailue | ! GUIConnected)",
            "regular_condition": "(GUIFailue | ! GUIConnected)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "post_condition": "(ventilating & highPriorityAlarm)",
            "responseTextRange": [
                42,
                80
            ],
            "diagramVariables": "TC = <b><i>(GUIFailue | ! GUIConnected)</i></b>, Response = <b><i>(ventilating & highPriorityAlarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(GUIFailue | ! GUIConnected)</i></b> is true and any point in the interval where <b><i>(GUIFailue | ! GUIConnected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(GUIFailue | (! GUIConnected))",
            "regular_condition_unexp_ft": "(GUIFailue | (! GUIConnected))",
            "regular_condition_SMV_pt": "(GUIFailue | (! GUIConnected))",
            "regular_condition_SMV_ft": "(GUIFailue | (! GUIConnected))",
            "regular_condition_coco_smv": "(GUIFailue | (! GUIConnected))",
            "regular_condition_coco": "(GUIFailue or ( not GUIConnected))",
            "post_condition_unexp_pt": "(ventilating & highPriorityAlarm)",
            "post_condition_unexp_ft": "(ventilating & highPriorityAlarm)",
            "post_condition_SMV_pt": "(ventilating & highPriorityAlarm)",
            "post_condition_SMV_ft": "(ventilating & highPriorityAlarm)",
            "post_condition_coco_smv": "(ventilating & highPriorityAlarm)",
            "post_condition_coco": "(ventilating and highPriorityAlarm)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (GUIFailue | (! GUIConnected))) & ((! LAST) & (X (GUIFailue | (! GUIConnected))))) -> (X ((! LAST) U (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> ((! LAST) U (ventilating & highPriorityAlarm))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (GUIFailue | (! GUIConnected)))) | (! ((! (ventilating & highPriorityAlarm)) S ((! (ventilating & highPriorityAlarm)) & ((GUIFailue | (! GUIConnected)) & ((Y (! (GUIFailue | (! GUIConnected)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (GUIFailue | (! GUIConnected)))) | (! ((! (ventilating & highPriorityAlarm)) S ((! (ventilating & highPriorityAlarm)) & ((GUIFailue | (! GUIConnected)) & ((Y (! (GUIFailue | (! GUIConnected)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (GUIFailue | (! GUIConnected)))) | (! ((! (ventilating & highPriorityAlarm)) S ((! (ventilating & highPriorityAlarm)) & ((GUIFailue | (! GUIConnected)) & ((Y (! (GUIFailue | (! GUIConnected)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (GUIFailue | (! GUIConnected))) & ((! LAST) & (X (GUIFailue | (! GUIConnected))))) -> (X ((! LAST) U (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> ((! LAST) U (ventilating & highPriorityAlarm))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (GUIFailue | (! GUIConnected))) & (X (GUIFailue | (! GUIConnected)))) -> (X (F (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> (F (ventilating & highPriorityAlarm))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (GUIFailue | (! GUIConnected))) & (X (GUIFailue | (! GUIConnected)))) -> (X (F (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> (F (ventilating & highPriorityAlarm))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (GUIFailue | (! GUIConnected))) & ((! LAST) & (X (GUIFailue | (! GUIConnected))))) -> (X ((! LAST) U (ventilating & highPriorityAlarm))))) & ((GUIFailue | (! GUIConnected)) -> ((! LAST) U (ventilating & highPriorityAlarm))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (GUIFailue or ( not GUIConnected)))) or ( not (SI( ((GUIFailue or ( not GUIConnected)) and ((YtoPre( not (GUIFailue or ( not GUIConnected)))) or FTP)), ( not (ventilating and highPriorityAlarm)) ))))",
            "component": "System"
        },
        "_id": "c0d582e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN9",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Once the self-test has been completed successfully and configurations have been loaded properly the system shall start monitoring and reporting health parameters.\n\nRationale: At this point the monitoring module is able to carry out its assigned functionality.",
        "comments": "Oisin, v0.3: Changed \"selfTestDone\" to \"selfTestPassed\"\nMatt, v0.4: Added transition to Standby Mode (as per Fig 2.1 and via conversation with Angelo Garagantini on github); SelfTestPass -> SelfTestPassed (as per Fig 2.1 since v1.3 of the natural language specification)\n",
        "fulltext": "when selfTestPassed System shall satisfy startMonitoring & startReportingHealthParams & StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "selfTestPassed",
                "startMonitoring",
                "startReportingHealthParams",
                "StandbyMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(selfTestPassed)",
            "regular_condition": "(selfTestPassed)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(startMonitoring & startReportingHealthParams & StandbyMode)",
            "responseTextRange": [
                33,
                98
            ],
            "diagramVariables": "TC = <b><i>(selfTestPassed)</i></b>, Response = <b><i>(startMonitoring & startReportingHealthParams & StandbyMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(selfTestPassed)</i></b> is true and any point in the interval where <b><i>(selfTestPassed)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "selfTestPassed",
            "regular_condition_unexp_ft": "selfTestPassed",
            "regular_condition_SMV_pt": "selfTestPassed",
            "regular_condition_SMV_ft": "selfTestPassed",
            "regular_condition_coco_smv": "selfTestPassed",
            "regular_condition_coco": "selfTestPassed",
            "post_condition_unexp_pt": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_unexp_ft": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_SMV_pt": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_SMV_ft": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_coco_smv": "((startMonitoring & startReportingHealthParams) & StandbyMode)",
            "post_condition_coco": "((startMonitoring and startReportingHealthParams) and StandbyMode)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! selfTestPassed)) | (! ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) S ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) & (selfTestPassed & ((Y (! selfTestPassed)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! selfTestPassed)) | (! ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) S ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! selfTestPassed)) | (! ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) S ((! ((startMonitoring & startReportingHealthParams) & StandbyMode)) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> (F ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))) & (selfTestPassed -> ((! LAST) U ((startMonitoring & startReportingHealthParams) & StandbyMode))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not selfTestPassed)) or ( not (SI( (selfTestPassed and ((YtoPre( not selfTestPassed)) or FTP)), ( not ((startMonitoring and startReportingHealthParams) and StandbyMode)) ))))",
            "component": "System"
        },
        "_id": "c0d5a9f0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN31",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Any normal operating mode or identified failure mode of the system and its components shall always result in a state of the system that is safe for the patient. \n\nRationale: patient safety is primary concern",
        "comments": "",
        "fulltext": "System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "patientSafe"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                13,
                31
            ],
            "diagramVariables": "Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U patientSafe)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O patientSafe)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O patientSafe)",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O patientSafe)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U patientSafe)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F patientSafe)",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F patientSafe)",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U patientSafe)",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(patientSafe))",
            "component": "System"
        },
        "_id": "c0d5a9f1-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN19",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have a pressure control ventilation (PCV) mode, as characterized by the following plots of pressure and flow versus time. [Plots are on page 10 of the spec] \n\nRationale: this is the most appropriate procedure for COVID-19 patients as it allows the immediate reopening of the alveoli and is strongly recommended by the doctors and nurses in the COVID-19 wards of Lombardy, rather than the constant flow procedure. These characteristics of the Ventilatorv0.2 pressure transient during the inspiratory cycle are crucial to avoid barotrauma and to minimise long term fatigue of muscles and alveoli induced by forced mechanical ventilation.",
        "comments": "Not sure that this one can be formalised",
        "fulltext": "",
        "semantics": {},
        "_id": "c0d5d100-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If “Resume Ventilation” is selected, every step of the self-test procedure FUN.6 can be skipped or optionally rerun individually.",
        "comments": " Original version: \"when resumeVentilation System shall satisfy skipSelfTest | rerunIndividualSelfTests\"\nOisín, v0.3.1: Changed to specify the transition to SelfTestMode and to include the definition of 'selfTestPass' to allow for tests to be skipped\nMatt, v0.4: SelfTestPass -> SelfTestPassed (as per Fig 2.1 since v1.3 of the natural language specification). Leaving the individual tests as \"pass\" because they're not mentioned in Fig 2.1.\n",
        "fulltext": "when resumeVentilation System shall satisfy SelfTestMode & (( (testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip) & (testFl2Pass | testFl2Skip) & (testPSExpPass | testPSExpSkip) & (testOxygenSensorPass | testOxygenSensorSkip) & (testAlarmsPass | testAlarmsSkip) ) => selfTestPassed)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "resumeVentilation",
                "SelfTestMode",
                "testPowerSwitchPass",
                "testPowerSwitchSkip",
                "testLeaksPass",
                "testLeaksSkip",
                "testFl2Pass",
                "testFl2Skip",
                "testPSExpPass",
                "testPSExpSkip",
                "testOxygenSensorPass",
                "testOxygenSensorSkip",
                "testAlarmsPass",
                "testAlarmsSkip",
                "selfTestPassed"
            ],
            "qualifier_word": "when",
            "pre_condition": "(resumeVentilation)",
            "regular_condition": "(resumeVentilation)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "post_condition": "(SelfTestMode & ( ( ( testPowerSwitchPass | testPowerSwitchSkip ) & ( testLeaksPass | testLeaksSkip ) & ( testFl2Pass | testFl2Skip ) & ( testPSExpPass | testPSExpSkip ) & ( testOxygenSensorPass | testOxygenSensorSkip ) & ( testAlarmsPass | testAlarmsSkip ) ) => selfTestPassed ))",
            "responseTextRange": [
                36,
                307
            ],
            "diagramVariables": "TC = <b><i>(resumeVentilation)</i></b>, Response = <b><i>(SelfTestMode & ( ( ( testPowerSwitchPass | testPowerSwitchSkip ) & ( testLeaksPass | testLeaksSkip ) & ( testFl2Pass | testFl2Skip ) & ( testPSExpPass | testPSExpSkip ) & ( testOxygenSensorPass | testOxygenSensorSkip ) & ( testAlarmsPass | testAlarmsSkip ) ) => selfTestPassed ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(resumeVentilation)</i></b> is true and any point in the interval where <b><i>(resumeVentilation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "resumeVentilation",
            "regular_condition_unexp_ft": "resumeVentilation",
            "regular_condition_SMV_pt": "resumeVentilation",
            "regular_condition_SMV_ft": "resumeVentilation",
            "regular_condition_coco_smv": "resumeVentilation",
            "regular_condition_coco": "resumeVentilation",
            "post_condition_unexp_pt": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_unexp_ft": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_SMV_pt": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_SMV_ft": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_coco_smv": "(SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))",
            "post_condition_coco": "(SelfTestMode and (((((((testPowerSwitchPass or testPowerSwitchSkip) and (testLeaksPass or testLeaksSkip)) and (testFl2Pass or testFl2Skip)) and (testPSExpPass or testPSExpSkip)) and (testOxygenSensorPass or testOxygenSensorSkip)) and (testAlarmsPass or testAlarmsSkip)) => selfTestPassed))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! resumeVentilation)) | (! ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) S ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) & (resumeVentilation & ((Y (! resumeVentilation)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! resumeVentilation)) | (! ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) S ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! resumeVentilation)) | (! ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) S ((! (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed))) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> (F (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))) & (resumeVentilation -> ((! LAST) U (SelfTestMode & (((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFl2Pass | testFl2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip)) -> selfTestPassed)))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not resumeVentilation)) or ( not (SI( (resumeVentilation and ((YtoPre( not resumeVentilation)) or FTP)), ( not (SelfTestMode and (((((((testPowerSwitchPass or testPowerSwitchSkip) and (testLeaksPass or testLeaksSkip)) and (testFl2Pass or testFl2Skip)) and (testPSExpPass or testPSExpSkip)) and (testOxygenSensorPass or testOxygenSensorSkip)) and (testAlarmsPass or testAlarmsSkip)) => selfTestPassed))) ))))",
            "component": "System"
        },
        "_id": "c0d5f810-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN27",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PSV mode the system shall check for the presence of apnea, which occurs when a patient does not take new breath within the allowable apnea lag time. \n\nRationale: In case the patient stops breathing (apnea) the system needs to be able to ensure that the patient continues to be ventilated.",
        "comments": "",
        "fulltext": "in PSVMode when breathingTime >= apneaLagTime System shall satisfy apnea",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "breathingTime",
                "apneaLagTime",
                "apnea"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(breathingTime >= apneaLagTime)",
            "regular_condition": "(breathingTime >= apneaLagTime)",
            "conditionTextRange": [
                11,
                44
            ],
            "component_name": "System",
            "componentTextRange": [
                46,
                51
            ],
            "post_condition": "(apnea)",
            "responseTextRange": [
                59,
                71
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(breathingTime >= apneaLagTime)</i></b>, Response = <b><i>(apnea)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(breathingTime >= apneaLagTime)</i></b> is true and any point in the interval where <b><i>(breathingTime >= apneaLagTime)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(breathingTime >= apneaLagTime)",
            "regular_condition_unexp_ft": "(breathingTime >= apneaLagTime)",
            "regular_condition_SMV_pt": "(breathingTime >= apneaLagTime)",
            "regular_condition_SMV_ft": "(breathingTime >= apneaLagTime)",
            "regular_condition_coco_smv": "(breathingTime >= apneaLagTime)",
            "regular_condition_coco": "(breathingTime >= apneaLagTime)",
            "post_condition_unexp_pt": "apnea",
            "post_condition_unexp_ft": "apnea",
            "post_condition_SMV_pt": "apnea",
            "post_condition_SMV_ft": "apnea",
            "post_condition_coco_smv": "apnea",
            "post_condition_coco": "apnea",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U apnea)) & (! (Lin_PSVMode | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U apnea)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U apnea)) & (! (Lin_PSVMode | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U apnea)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & Fin_PSVMode)) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & Fin_PSVMode)) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! apnea) S ((! apnea) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U apnea)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U apnea))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U apnea))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (breathingTime >= apneaLagTime)) )) or ( not (SI( ((breathingTime >= apneaLagTime) and ((YtoPre( not (breathingTime >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not apnea) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (breathingTime >= apneaLagTime)) )) or ( not (SI( ((breathingTime >= apneaLagTime) and ((YtoPre( not (breathingTime >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not apnea) ))))))",
            "component": "System"
        },
        "_id": "c0d61f20-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_5",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall not permit the healthcare professional operator to erase the contents of the alarm system log.",
        "comments": "",
        "fulltext": "System shall satisfy if user = operator then !eraseLog",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "user",
                "operator",
                "eraseLog"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(user = operator => ! eraseLog)",
            "responseTextRange": [
                13,
                53
            ],
            "diagramVariables": "Response = <b><i>(user = operator => ! eraseLog)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((user = operator) -> (! eraseLog))",
            "post_condition_unexp_ft": "((user = operator) -> (! eraseLog))",
            "post_condition_SMV_pt": "((user = operator) -> (! eraseLog))",
            "post_condition_SMV_ft": "((user = operator) -> (! eraseLog))",
            "post_condition_coco_smv": "((user = operator) -> (! eraseLog))",
            "post_condition_coco": "((user = operator) => ( not eraseLog))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((user = operator) -> (! eraseLog)))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((user = operator) -> (! eraseLog)))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((user = operator) -> (! eraseLog)))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((user = operator) -> (! eraseLog)))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((user = operator) -> (! eraseLog)))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((user = operator) -> (! eraseLog)))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((user = operator) -> (! eraseLog)))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((user = operator) -> (! eraseLog)))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((user = operator) => ( not eraseLog))))",
            "component": "System"
        },
        "_id": "c0d61f21-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN16",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall measure and display the volume of gas delivered to the patient per breathing cycle (tidal volume). \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function",
        "comments": "TV = Tidal Volume",
        "fulltext": "System shall satisfy measureTV & displayTV",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureTV",
                "displayTV"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureTV & displayTV)",
            "responseTextRange": [
                13,
                41
            ],
            "diagramVariables": "Response = <b><i>(measureTV & displayTV)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureTV & displayTV)",
            "post_condition_unexp_ft": "(measureTV & displayTV)",
            "post_condition_SMV_pt": "(measureTV & displayTV)",
            "post_condition_SMV_ft": "(measureTV & displayTV)",
            "post_condition_coco_smv": "(measureTV & displayTV)",
            "post_condition_coco": "(measureTV and displayTV)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureTV & displayTV))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureTV & displayTV))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureTV & displayTV))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureTV & displayTV))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureTV & displayTV))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureTV & displayTV))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureTV & displayTV))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureTV & displayTV))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureTV and displayTV)))",
            "component": "System"
        },
        "_id": "c0d64630-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN18",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have a leak compensation feature for leaks in the patient breathing circuit which shall be disabled by default. Rationale: regulatory requirement",
        "comments": "Oisín, v0.3: Added brackets for clarity, and renamed first variable for consistency",
        "fulltext": "System shall satisfy (if enableLeakCompensation then leakCompensation) | !leakCompensation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "enableLeakCompensation",
                "leakCompensation"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(( enableLeakCompensation => leakCompensation ) | ! leakCompensation)",
            "responseTextRange": [
                13,
                89
            ],
            "diagramVariables": "Response = <b><i>(( enableLeakCompensation => leakCompensation ) | ! leakCompensation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_unexp_ft": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_SMV_pt": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_SMV_ft": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_coco_smv": "((enableLeakCompensation -> leakCompensation) | (! leakCompensation))",
            "post_condition_coco": "((enableLeakCompensation => leakCompensation) or ( not leakCompensation))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((enableLeakCompensation => leakCompensation) or ( not leakCompensation))))",
            "component": "System"
        },
        "_id": "c0d66d40-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN5_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The patient shall not be connected to the breathing circuit when the system is powered on and through start-up and self-test.",
        "comments": "",
        "fulltext": "System shall satisfy  (StartUpMode | SelfTestMode) -> !patientConnected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "SelfTestMode",
                "patientConnected"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(( StartUpMode | SelfTestMode ) -> ! patientConnected)",
            "responseTextRange": [
                13,
                70
            ],
            "diagramVariables": "Response = <b><i>(( StartUpMode | SelfTestMode ) -> ! patientConnected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_unexp_ft": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_SMV_pt": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_SMV_ft": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_coco_smv": "((StartUpMode | SelfTestMode) -> (! patientConnected))",
            "post_condition_coco": "((StartUpMode or SelfTestMode) => ( not patientConnected))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((StartUpMode | SelfTestMode) -> (! patientConnected)))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((StartUpMode or SelfTestMode) => ( not patientConnected))))",
            "component": "System"
        },
        "_id": "c0d69450-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN42",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The communication between Controller and GUI shall be reliable.",
        "comments": "Unsure how to formalise this wishful thinking.",
        "fulltext": "",
        "semantics": {},
        "_id": "c0d6e270-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN28",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PCV and PSV mode there shall be the possibility to press a single button to initiate an Expiratory Pause that closes both inspiratory and expiratory valve at the end of the expiration phase as long as the operator holds the button but no longer than 60 sec \n\nRationale: The expiratory pause allows the determination of the residual pressure above the PEEP level, the residual value being PEEP + AutoPEEP. AutoPEEP level for the patient, providing information on the level of obstruction in the exhalation channel. AutoPEEP may be zero for most patients or significantly different from zero for patients that have obstructions in the exhalation channel, as possibly generated by secretions. In this case, the small flow during exhalation may result in an incomplete drain of the alveoli during the expiration phase.",
        "comments": "This is a messy timing property, but I can't see a clean way to do this in one FRETISH requirement.\n\nOisín, v0.3: added a condition that this happens at the end of the expiratory phase. I've left in the boolean in the responses for discussion purposes but I think having it in the conditions makes more sense. And yeah this is hard to do in a way that feels satisfying\n\nOisín, v0.5: changed the condition from \"when (PCVExpiratoryPhaseEnd | PSVExpiratoryPhaseEnd)\" to just \"when (ExpiratoryPhaseEnd)\", since those variables were only used here.",
        "fulltext": "when expiratoryPauseButton & (ExpiratoryPhaseEnd) System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "expiratoryPauseButton",
                "ExpiratoryPhaseEnd",
                "buttonUnPressOr60Seconds",
                "expirationPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPauseButton & ( ExpiratoryPhaseEnd ))",
            "regular_condition": "(expiratoryPauseButton & ( ExpiratoryPhaseEnd ))",
            "conditionTextRange": [
                0,
                48
            ],
            "component_name": "System",
            "componentTextRange": [
                50,
                55
            ],
            "stop_condition": "(buttonUnPressOr60Seconds)",
            "timingTextRange": [
                63,
                92
            ],
            "post_condition": "(expirationPhaseEnd & inValveClose & outValveClose)",
            "responseTextRange": [
                94,
                150
            ],
            "diagramVariables": "TC = <b><i>(expiratoryPauseButton & ( ExpiratoryPhaseEnd ))</i></b>, SC = <b><i>(buttonUnPressOr60Seconds)</i></b>, Response = <b><i>(expirationPhaseEnd & inValveClose & outValveClose)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(expiratoryPauseButton & ( ExpiratoryPhaseEnd ))</i></b> is true and any point in the interval where <b><i>(expiratoryPauseButton & ( ExpiratoryPhaseEnd ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_until_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(expiratoryPauseButton & ExpiratoryPhaseEnd)",
            "regular_condition_unexp_ft": "(expiratoryPauseButton & ExpiratoryPhaseEnd)",
            "regular_condition_SMV_pt": "(expiratoryPauseButton & ExpiratoryPhaseEnd)",
            "regular_condition_SMV_ft": "(expiratoryPauseButton & ExpiratoryPhaseEnd)",
            "regular_condition_coco_smv": "(expiratoryPauseButton & ExpiratoryPhaseEnd)",
            "regular_condition_coco": "(expiratoryPauseButton and ExpiratoryPhaseEnd)",
            "post_condition_unexp_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_unexp_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco_smv": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco": "((expirationPhaseEnd and inValveClose) and outValveClose)",
            "stop_condition_unexp_pt": "buttonUnPressOr60Seconds",
            "stop_condition_unexp_ft": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_pt": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_ft": "buttonUnPressOr60Seconds",
            "stop_condition_coco_smv": "buttonUnPressOr60Seconds",
            "stop_condition_coco": "buttonUnPressOr60Seconds",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (($stop_condition_unexp_ft$ V ($post_condition_unexp_ft$ | $stop_condition_unexp_ft$)) | (LAST V $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! (expiratoryPauseButton & ExpiratoryPhaseEnd)) & ((! LAST) & (X (expiratoryPauseButton & ExpiratoryPhaseEnd)))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)))) -> $post_condition_unexp_pt$)))",
            "pt": "(H ((H (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) & ((Y (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | FTP)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))))",
            "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))))) -> $post_condition_SMV_pt$)))",
            "ptExpanded": "(H ((H (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) & ((Y (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | (! (Y TRUE)))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))))",
            "ptFinBtwExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))))) -> $post_condition_SMV_pt$)))",
            "ptFinBtwExpanded": "(H ((H (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) & ((Y (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | (! (Y TRUE)))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! (expiratoryPauseButton & ExpiratoryPhaseEnd)) & ((! LAST) & (X (expiratoryPauseButton & ExpiratoryPhaseEnd)))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! (expiratoryPauseButton & ExpiratoryPhaseEnd)) & (X (expiratoryPauseButton & ExpiratoryPhaseEnd))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (G $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! (expiratoryPauseButton & ExpiratoryPhaseEnd)) & (X (expiratoryPauseButton & ExpiratoryPhaseEnd))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (G ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (($stop_condition_SMV_ft$ V ($post_condition_SMV_ft$ | $stop_condition_SMV_ft$)) | (LAST V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! (expiratoryPauseButton & ExpiratoryPhaseEnd)) & ((! LAST) & (X (expiratoryPauseButton & ExpiratoryPhaseEnd)))) -> (X ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) -> ((buttonUnPressOr60Seconds V (((expirationPhaseEnd & inValveClose) & outValveClose) | buttonUnPressOr60Seconds)) | (LAST V ((expirationPhaseEnd & inValveClose) & outValveClose)))))",
            "CoCoSpecCode_fetched": "(H((H( not $regular_condition_coco$)) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $stop_condition_coco$) )) => $post_condition_coco$)))",
            "CoCoSpecCode": "(H((H( not (expiratoryPauseButton and ExpiratoryPhaseEnd))) or ((SI( ((expiratoryPauseButton and ExpiratoryPhaseEnd) and ((YtoPre( not (expiratoryPauseButton and ExpiratoryPhaseEnd))) or FTP)), ( not buttonUnPressOr60Seconds) )) => ((expirationPhaseEnd and inValveClose) and outValveClose))))",
            "component": "System"
        },
        "_id": "c0d70980-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN39",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall prompt the user before ventilation is started to enter user-controlled alarm thresholds for SAV.3- SAV.9 \n\nRationale: alarm thresholds may vary from patient to patient",
        "comments": "",
        "fulltext": "before PSVMode | PCVMode System shall satisfy enterAlarmThresholds",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "before",
                "exclusive": false,
                "required": false
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "PCVMode",
                "enterAlarmThresholds"
            ],
            "scope_mode": "(PSVMode | PCVMode)",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "System",
            "componentTextRange": [
                25,
                30
            ],
            "post_condition": "(enterAlarmThresholds)",
            "responseTextRange": [
                38,
                65
            ],
            "diagramVariables": "M = <b><i>(PSVMode | PCVMode)</i></b>,, Response = <b><i>(enterAlarmThresholds)</i></b>.",
            "description": "ENFORCED: in the interval (if defined) from the start of the execution to (and exclusive of) the first point where <b><i>(PSVMode | PCVMode)</i></b> holds. In the interval defined by the entire execution, if <b><i>(PSVMode | PCVMode)</i></b> never holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/before_null_null_satisfaction.svg",
            "scope_mode_pt": "(PSVMode | PCVMode)",
            "scope_mode_coco": "(PSVMode or PCVMode)",
            "scope_mode_ft": "(PSVMode | PCVMode)",
            "post_condition_unexp_pt": "enterAlarmThresholds",
            "post_condition_unexp_ft": "enterAlarmThresholds",
            "post_condition_SMV_pt": "enterAlarmThresholds",
            "post_condition_SMV_ft": "enterAlarmThresholds",
            "post_condition_coco_smv": "enterAlarmThresholds",
            "post_condition_coco": "enterAlarmThresholds",
            "ft_fetched": "(((! (FFin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$) | $scope_mode_ft$)",
            "ft": "(((! (FFin_(PSVMode | PCVMode) | LAST)) U enterAlarmThresholds) | (PSVMode | PCVMode))",
            "pt_fetched": "((H ((FFin_$scope_mode_pt$ & (! FTP)) -> (Y (O $post_condition_unexp_pt$)))) & ((H (! FFin_$scope_mode_pt$)) -> (O $post_condition_unexp_pt$)))",
            "pt": "((H ((FFin_(PSVMode | PCVMode) & (! FTP)) -> (Y (O enterAlarmThresholds)))) & ((H (! FFin_(PSVMode | PCVMode))) -> (O enterAlarmThresholds)))",
            "ptExpanded_fetched": "((H (((($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) & ((Y (H (! $scope_mode_pt$))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O $post_condition_SMV_pt$)))) & ((H (! (($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) & ((Y (H (! $scope_mode_pt$))) | (! (Y TRUE)))))) -> (O $post_condition_SMV_pt$)))",
            "ptExpanded": "((H (((((PSVMode | PCVMode) & (Z (! (PSVMode | PCVMode)))) & ((Y (H (! (PSVMode | PCVMode)))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O enterAlarmThresholds)))) & ((H (! (((PSVMode | PCVMode) & (Z (! (PSVMode | PCVMode)))) & ((Y (H (! (PSVMode | PCVMode)))) | (! (Y TRUE)))))) -> (O enterAlarmThresholds)))",
            "ptFinBtwExpanded_fetched": "(H (((($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) & ((Y (H (! $scope_mode_pt$))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O $post_condition_SMV_pt$))))",
            "ptFinBtwExpanded": "(H (((((PSVMode | PCVMode) & ((! (Y TRUE)) | (Y (! (PSVMode | PCVMode))))) & ((Y (H (! (PSVMode | PCVMode)))) | (! (Y TRUE)))) & (Y TRUE)) -> (Y (O enterAlarmThresholds))))",
            "ftExpanded_fetched": "(((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) | LAST)) U $post_condition_SMV_ft$) | $scope_mode_ft$)",
            "ftExpanded": "(((! ((((! (PSVMode | PCVMode)) & (! LAST)) & (X (PSVMode | PCVMode))) | LAST)) U enterAlarmThresholds) | (PSVMode | PCVMode))",
            "ftInfAUExpanded_fetched": "(((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) U $post_condition_SMV_ft$) | $scope_mode_ft$)",
            "ftInfAUExpanded": "(((! (((! (PSVMode | PCVMode)) ) & (X (PSVMode | PCVMode)))) U enterAlarmThresholds) | (PSVMode | PCVMode))",
            "ftInfBtwExpanded_fetched": "(((F (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) -> ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) U $post_condition_SMV_ft$)) | $scope_mode_ft$)",
            "ftInfBtwExpanded": "(((F (((! (PSVMode | PCVMode)) ) & (X (PSVMode | PCVMode)))) -> ((! (((! (PSVMode | PCVMode)) ) & (X (PSVMode | PCVMode)))) U enterAlarmThresholds)) | (PSVMode | PCVMode))",
            "ftFinBtwExpanded_fetched": "((((! LAST) U (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) -> ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) U $post_condition_SMV_ft$)) | $scope_mode_ft$)",
            "ftFinBtwExpanded": "((((! LAST) U (((! (PSVMode | PCVMode)) & (! LAST)) & (X (PSVMode | PCVMode)))) -> ((! (((! (PSVMode | PCVMode)) & (! LAST)) & (X (PSVMode | PCVMode)))) U enterAlarmThresholds)) | (PSVMode | PCVMode))",
            "CoCoSpecCode_fetched": "((H(((($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))) and ((YtoPre(H( not $scope_mode_coco$))) or FTP)) and ( not FTP)) => (YtoPre(O($post_condition_coco$))))) and ((H( not (($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))) and ((YtoPre(H( not $scope_mode_coco$))) or FTP)))) => (O($post_condition_coco$))))",
            "CoCoSpecCode": "((H(((((PSVMode or PCVMode) and (FTP or (YtoPre( not (PSVMode or PCVMode))))) and ((YtoPre(H( not (PSVMode or PCVMode)))) or FTP)) and ( not FTP)) => (YtoPre(O(enterAlarmThresholds))))) and ((H( not (((PSVMode or PCVMode) and (FTP or (YtoPre( not (PSVMode or PCVMode))))) and ((YtoPre(H( not (PSVMode or PCVMode)))) or FTP)))) => (O(enterAlarmThresholds))))",
            "component": "System"
        },
        "_id": "c0d73090-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN21",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PCV mode, a new breathing cycle shall be initiated either after a breathing cycle is over, or by patient request during expiration. \n\nRationale: while the main mode of PCV is the control of the breathing cycle timing by the Ventilatorv0.2, the patient has to have the ability to trigger a breath on his own",
        "comments": "",
        "fulltext": "in PCVMode System shall satisfy (breathingCycleDone | patientBreathingRequest) => breathingCycleStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "breathingCycleDone",
                "patientBreathingRequest",
                "breathingCycleStart"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(( breathingCycleDone | patientBreathingRequest ) => breathingCycleStart)",
            "responseTextRange": [
                24,
                100
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(( breathingCycleDone | patientBreathingRequest ) => breathingCycleStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_unexp_ft": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_SMV_pt": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_SMV_ft": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_coco_smv": "((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)",
            "post_condition_coco": "((breathingCycleDone or patientBreathingRequest) => breathingCycleStart)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) S ((! ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleDone or patientBreathingRequest) => breathingCycleStart)) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleDone or patientBreathingRequest) => breathingCycleStart)) )))))",
            "component": "System"
        },
        "_id": "c0d757a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN27_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If apnea is detected, the system shall automatically switch from PSV to PCV mode with pre-determined apnea backup settings for RR AP , PinspAP , I:E AP . RRAP and PinspAP shall be set by the user. I:E AP will be fixed at 1:2 \n\nRationale: in case of apnea the Ventilatorv0.2 needs to take over and ensure that ventilation continues to assure patient safety",
        "comments": "Matt, v0.4: \"I:E\" -> \"ItoE\" to fix a silent FRET error. Changing ItoE = 1:2 to ItoE = ItoE_Ap to fix the same error. Separating the subscripts with underscores.",
        "fulltext": "if apnea System shall satisfy PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "apnea",
                "PCVMode",
                "RR",
                "RR_AP",
                "P_insp",
                "P_inspAP",
                "ItoE",
                "ItoE_AP"
            ],
            "qualifier_word": "if",
            "pre_condition": "(apnea)",
            "regular_condition": "(apnea)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "post_condition": "(PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)",
            "responseTextRange": [
                22,
                86
            ],
            "diagramVariables": "TC = <b><i>(apnea)</i></b>, Response = <b><i>(PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(apnea)</i></b> is true and any point in the interval where <b><i>(apnea)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "apnea",
            "regular_condition_unexp_ft": "apnea",
            "regular_condition_SMV_pt": "apnea",
            "regular_condition_SMV_ft": "apnea",
            "regular_condition_coco_smv": "apnea",
            "regular_condition_coco": "apnea",
            "post_condition_unexp_pt": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_unexp_ft": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_pt": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_ft": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco_smv": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco": "(((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! apnea)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & (apnea & ((Y (! apnea)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! apnea)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! apnea)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! apnea) & (X apnea)) -> (X (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! apnea) & (X apnea)) -> (X (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> (F (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))) & (apnea -> ((! LAST) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not apnea)) or ( not (SI( (apnea and ((YtoPre( not apnea)) or FTP)), ( not (((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))) ))))",
            "component": "System"
        },
        "_id": "c0d7a5c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6_4",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The self-test procedure shall confirm the expiratory valve is functional.\n\nAssuming \"expiratory valve\" is \"PS Exp\" in Figure 2.2",
        "comments": "Oisín, v0.3.1: Changed the response from just \"satisfy testPSExp\" to \"satisfy testPSExpPass | testPSExpFail | testPSExpSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testPSExpPass | testPSExpFail | testPSExpSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testPSExpPass",
                "testPSExpFail",
                "testPSExpSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testPSExpPass | testPSExpFail | testPSExpSkip)",
            "responseTextRange": [
                29,
                81
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testPSExpPass | testPSExpFail | testPSExpSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_unexp_ft": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_SMV_pt": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_SMV_ft": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_coco_smv": "((testPSExpPass | testPSExpFail) | testPSExpSkip)",
            "post_condition_coco": "((testPSExpPass or testPSExpFail) or testPSExpSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPSExpPass | testPSExpFail) | testPSExpSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPSExpPass or testPSExpFail) or testPSExpSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPSExpPass or testPSExpFail) or testPSExpSkip)) )))))",
            "component": "System"
        },
        "_id": "c0d7ccd0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN27_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If apnea is detected, an apnea alarm shall be triggered. \n\nRationale: Clinician needs to be made aware of the fact that patient stops breathing",
        "comments": "Oisín, v0.3.1: Noticed a typo, the response was \"shall satisfy anpeaAlarm\" instead of \"apneaAlarm\"",
        "fulltext": "if apnea System shall satisfy apneaAlarm",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "apnea",
                "apneaAlarm"
            ],
            "qualifier_word": "if",
            "pre_condition": "(apnea)",
            "regular_condition": "(apnea)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "post_condition": "(apneaAlarm)",
            "responseTextRange": [
                22,
                39
            ],
            "diagramVariables": "TC = <b><i>(apnea)</i></b>, Response = <b><i>(apneaAlarm)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(apnea)</i></b> is true and any point in the interval where <b><i>(apnea)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "apnea",
            "regular_condition_unexp_ft": "apnea",
            "regular_condition_SMV_pt": "apnea",
            "regular_condition_SMV_ft": "apnea",
            "regular_condition_coco_smv": "apnea",
            "regular_condition_coco": "apnea",
            "post_condition_unexp_pt": "apneaAlarm",
            "post_condition_unexp_ft": "apneaAlarm",
            "post_condition_SMV_pt": "apneaAlarm",
            "post_condition_SMV_ft": "apneaAlarm",
            "post_condition_coco_smv": "apneaAlarm",
            "post_condition_coco": "apneaAlarm",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U apneaAlarm)))) & (apnea -> ((! LAST) U apneaAlarm)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! apnea)) | (! ((! apneaAlarm) S ((! apneaAlarm) & (apnea & ((Y (! apnea)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! apnea)) | (! ((! apneaAlarm) S ((! apneaAlarm) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! apnea)) | (! ((! apneaAlarm) S ((! apneaAlarm) & (apnea & ((Y (! apnea)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U apneaAlarm)))) & (apnea -> ((! LAST) U apneaAlarm)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! apnea) & (X apnea)) -> (X (F apneaAlarm)))) & (apnea -> (F apneaAlarm)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! apnea) & (X apnea)) -> (X (F apneaAlarm)))) & (apnea -> (F apneaAlarm)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! apnea) & ((! LAST) & (X apnea))) -> (X ((! LAST) U apneaAlarm)))) & (apnea -> ((! LAST) U apneaAlarm)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not apnea)) or ( not (SI( (apnea and ((YtoPre( not apnea)) or FTP)), ( not apneaAlarm) ))))",
            "component": "System"
        },
        "_id": "c0d7f3e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10_4",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Once all self-test steps have been completed successfully, it shall be possible to proceed to the Standby Mode.",
        "comments": "Oisín, v0.3.1: changed \"when selfTestDone\" to \"when selfTestPass\". I must have missed this before, but with the changed this was the only use of selfTestDone left.",
        "fulltext": "when selfTestPassed System shall satisfy StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "selfTestPassed",
                "StandbyMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(selfTestPassed)",
            "regular_condition": "(selfTestPassed)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(StandbyMode)",
            "responseTextRange": [
                33,
                51
            ],
            "diagramVariables": "TC = <b><i>(selfTestPassed)</i></b>, Response = <b><i>(StandbyMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(selfTestPassed)</i></b> is true and any point in the interval where <b><i>(selfTestPassed)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "selfTestPassed",
            "regular_condition_unexp_ft": "selfTestPassed",
            "regular_condition_SMV_pt": "selfTestPassed",
            "regular_condition_SMV_ft": "selfTestPassed",
            "regular_condition_coco_smv": "selfTestPassed",
            "regular_condition_coco": "selfTestPassed",
            "post_condition_unexp_pt": "StandbyMode",
            "post_condition_unexp_ft": "StandbyMode",
            "post_condition_SMV_pt": "StandbyMode",
            "post_condition_SMV_ft": "StandbyMode",
            "post_condition_coco_smv": "StandbyMode",
            "post_condition_coco": "StandbyMode",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U StandbyMode)))) & (selfTestPassed -> ((! LAST) U StandbyMode)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! selfTestPassed)) | (! ((! StandbyMode) S ((! StandbyMode) & (selfTestPassed & ((Y (! selfTestPassed)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! selfTestPassed)) | (! ((! StandbyMode) S ((! StandbyMode) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! selfTestPassed)) | (! ((! StandbyMode) S ((! StandbyMode) & (selfTestPassed & ((Y (! selfTestPassed)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U StandbyMode)))) & (selfTestPassed -> ((! LAST) U StandbyMode)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F StandbyMode)))) & (selfTestPassed -> (F StandbyMode)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! selfTestPassed) & (X selfTestPassed)) -> (X (F StandbyMode)))) & (selfTestPassed -> (F StandbyMode)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! selfTestPassed) & ((! LAST) & (X selfTestPassed))) -> (X ((! LAST) U StandbyMode)))) & (selfTestPassed -> ((! LAST) U StandbyMode)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not selfTestPassed)) or ( not (SI( (selfTestPassed and ((YtoPre( not selfTestPassed)) or FTP)), ( not StandbyMode) ))))",
            "component": "System"
        },
        "_id": "c0d81af0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_6",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide a log to include any change of Ventilatorv0.2 settings, including the value applied",
        "comments": "Oisín: changed variables to specify that these are ventilator settings",
        "fulltext": "when ventilatorSettingsChanged System shall satisfy logVentilatorSettings",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "ventilatorSettingsChanged",
                "logVentilatorSettings"
            ],
            "qualifier_word": "when",
            "pre_condition": "(ventilatorSettingsChanged)",
            "regular_condition": "(ventilatorSettingsChanged)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "System",
            "componentTextRange": [
                31,
                36
            ],
            "post_condition": "(logVentilatorSettings)",
            "responseTextRange": [
                44,
                72
            ],
            "diagramVariables": "TC = <b><i>(ventilatorSettingsChanged)</i></b>, Response = <b><i>(logVentilatorSettings)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(ventilatorSettingsChanged)</i></b> is true and any point in the interval where <b><i>(ventilatorSettingsChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "ventilatorSettingsChanged",
            "regular_condition_unexp_ft": "ventilatorSettingsChanged",
            "regular_condition_SMV_pt": "ventilatorSettingsChanged",
            "regular_condition_SMV_ft": "ventilatorSettingsChanged",
            "regular_condition_coco_smv": "ventilatorSettingsChanged",
            "regular_condition_coco": "ventilatorSettingsChanged",
            "post_condition_unexp_pt": "logVentilatorSettings",
            "post_condition_unexp_ft": "logVentilatorSettings",
            "post_condition_SMV_pt": "logVentilatorSettings",
            "post_condition_SMV_ft": "logVentilatorSettings",
            "post_condition_coco_smv": "logVentilatorSettings",
            "post_condition_coco": "logVentilatorSettings",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! ventilatorSettingsChanged) & ((! LAST) & (X ventilatorSettingsChanged))) -> (X ((! LAST) U logVentilatorSettings)))) & (ventilatorSettingsChanged -> ((! LAST) U logVentilatorSettings)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! ventilatorSettingsChanged)) | (! ((! logVentilatorSettings) S ((! logVentilatorSettings) & (ventilatorSettingsChanged & ((Y (! ventilatorSettingsChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! ventilatorSettingsChanged)) | (! ((! logVentilatorSettings) S ((! logVentilatorSettings) & (ventilatorSettingsChanged & ((Y (! ventilatorSettingsChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! ventilatorSettingsChanged)) | (! ((! logVentilatorSettings) S ((! logVentilatorSettings) & (ventilatorSettingsChanged & ((Y (! ventilatorSettingsChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! ventilatorSettingsChanged) & ((! LAST) & (X ventilatorSettingsChanged))) -> (X ((! LAST) U logVentilatorSettings)))) & (ventilatorSettingsChanged -> ((! LAST) U logVentilatorSettings)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! ventilatorSettingsChanged) & (X ventilatorSettingsChanged)) -> (X (F logVentilatorSettings)))) & (ventilatorSettingsChanged -> (F logVentilatorSettings)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! ventilatorSettingsChanged) & (X ventilatorSettingsChanged)) -> (X (F logVentilatorSettings)))) & (ventilatorSettingsChanged -> (F logVentilatorSettings)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! ventilatorSettingsChanged) & ((! LAST) & (X ventilatorSettingsChanged))) -> (X ((! LAST) U logVentilatorSettings)))) & (ventilatorSettingsChanged -> ((! LAST) U logVentilatorSettings)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not ventilatorSettingsChanged)) or ( not (SI( (ventilatorSettingsChanged and ((YtoPre( not ventilatorSettingsChanged)) or FTP)), ( not logVentilatorSettings) ))))",
            "component": "System"
        },
        "_id": "c0d81af1-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have a self-test procedure that ensures the system and its accessories are fully functional and the alarms work.\n\nISO80601-2-12201.7.9.2.8.101",
        "comments": "Oisin, v0.3: Changed \"shall satisfy selfTestDone\" to \"shall eventually satisfy selfTestPass | selfTestFail\". Adds some more detail and defines selfTestFail for FUN7. Maybe the eventually should instead be \"before standByMode\"?\nMatt, v0.4: \"SelfTestPass/Fail\" -> \"SelfTestPassed/Failed\" to be consistent with Fig 2.1 (from v1.3 onwards) and with each other's tenses. ",
        "fulltext": "in SelfTestMode System shall eventually satisfy selfTestPassed | selfTestFailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "selfTestPassed",
                "selfTestFailed"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "timingTextRange": [
                29,
                38
            ],
            "post_condition": "(selfTestPassed | selfTestFailed)",
            "responseTextRange": [
                40,
                78
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(selfTestPassed | selfTestFailed)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_eventually_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "(selfTestPassed | selfTestFailed)",
            "post_condition_unexp_ft": "(selfTestPassed | selfTestFailed)",
            "post_condition_SMV_pt": "(selfTestPassed | selfTestFailed)",
            "post_condition_SMV_ft": "(selfTestPassed | selfTestFailed)",
            "post_condition_coco_smv": "(selfTestPassed | selfTestFailed)",
            "post_condition_coco": "(selfTestPassed or selfTestFailed)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U (selfTestPassed | selfTestFailed))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (selfTestPassed | selfTestFailed))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (selfTestPassed | selfTestFailed)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or selfTestFailed)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (selfTestPassed or selfTestFailed)) )))))",
            "component": "System"
        },
        "_id": "c0d84200-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Once the start-up has been completed successfully the user must select “New Patient” or “Resume Ventilation” before the system transitions to self-test mode \n\nRationale: in order to quickly resume ventilation for the same patient in case the unit had to be powered down",
        "comments": "Oisin, v0.3: Added the transition to selfTestMode, since I think that aligns with the NL better. The NL is written more like a precondition on selfTestMode, but I'm not sure if we should translate it like that\n\nOisín, v0.3.1: After discussion, reverted this change. The transition to selfTestMode is covered in the child requirements.",
        "fulltext": "when startUpDone System shall satisfy newPatient | resumeVentilation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "startUpDone",
                "newPatient",
                "resumeVentilation"
            ],
            "qualifier_word": "when",
            "pre_condition": "(startUpDone)",
            "regular_condition": "(startUpDone)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "System",
            "componentTextRange": [
                17,
                22
            ],
            "post_condition": "(newPatient | resumeVentilation)",
            "responseTextRange": [
                30,
                67
            ],
            "diagramVariables": "TC = <b><i>(startUpDone)</i></b>, Response = <b><i>(newPatient | resumeVentilation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(startUpDone)</i></b> is true and any point in the interval where <b><i>(startUpDone)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "startUpDone",
            "regular_condition_unexp_ft": "startUpDone",
            "regular_condition_SMV_pt": "startUpDone",
            "regular_condition_SMV_ft": "startUpDone",
            "regular_condition_coco_smv": "startUpDone",
            "regular_condition_coco": "startUpDone",
            "post_condition_unexp_pt": "(newPatient | resumeVentilation)",
            "post_condition_unexp_ft": "(newPatient | resumeVentilation)",
            "post_condition_SMV_pt": "(newPatient | resumeVentilation)",
            "post_condition_SMV_ft": "(newPatient | resumeVentilation)",
            "post_condition_coco_smv": "(newPatient | resumeVentilation)",
            "post_condition_coco": "(newPatient or resumeVentilation)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! startUpDone) & ((! LAST) & (X startUpDone))) -> (X ((! LAST) U (newPatient | resumeVentilation))))) & (startUpDone -> ((! LAST) U (newPatient | resumeVentilation))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! startUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (startUpDone & ((Y (! startUpDone)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! startUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (startUpDone & ((Y (! startUpDone)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! startUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (startUpDone & ((Y (! startUpDone)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! startUpDone) & ((! LAST) & (X startUpDone))) -> (X ((! LAST) U (newPatient | resumeVentilation))))) & (startUpDone -> ((! LAST) U (newPatient | resumeVentilation))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! startUpDone) & (X startUpDone)) -> (X (F (newPatient | resumeVentilation))))) & (startUpDone -> (F (newPatient | resumeVentilation))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! startUpDone) & (X startUpDone)) -> (X (F (newPatient | resumeVentilation))))) & (startUpDone -> (F (newPatient | resumeVentilation))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! startUpDone) & ((! LAST) & (X startUpDone))) -> (X ((! LAST) U (newPatient | resumeVentilation))))) & (startUpDone -> ((! LAST) U (newPatient | resumeVentilation))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not startUpDone)) or ( not (SI( (startUpDone and ((YtoPre( not startUpDone)) or FTP)), ( not (newPatient or resumeVentilation)) ))))",
            "component": "System"
        },
        "_id": "c0d86910-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN4",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall implement the following operating modes:\n\n1. Start-up Mode: The Start-up Mode initializes the system and is part of a start-up procedure to get the system ready to be used to ventilate a patient. \n\n2. Self-test Mode: The Self-test Mode ensures that the system is fully functional and is part of the start-up procedure to get the system ready to be used to ventilate a new patient\n\n3. Standby Mode: In the Standby Mode the ventilation is ready for ventilating a patient, ventilation is off, and ventilation parameters can be set.\n\n4. Alarm Test Mode: The Alarm Test Mode allows the user to test the alarms.\n\n5. Pressure Controlled Ventilation Mode (PCV): Pressure Controlled Ventilation mode is a normal operating mode that is used when patients have no spontaneous respiration.\n\n6. Pressure Support Ventilation Mode (PSV): Pressure Support Ventilation is a normal operating mode that during which the patient initiates each breath and the Ventilatorv0.2 supports the breath at the appropriate pressure level.\n\n7. Fail-safe mode: the controller detects a severe condition that required an alarm to be raised and to bring the machine to a fail-safe mode (in valve closed and out valve open).\n\nRationale: Pressure Controlled and Pressure Support Ventilation are the two basic modes of pressure regulated support needed for COVID-19 patients. A Start-up mode is needed to properly ensure that the system is fully functional before starting the ventilation of a patient. Pressure Controlled Ventilation is needed for patients in respiratory failure or fully sedated. Pressure Support Ventilation is needed for patients able to breathe on their own, in particular during the weaning process.",
        "comments": "Oisín, v0.5: Removed AlarmTestMode as it isn't mentioned anymore",
        "fulltext": "System shall satisfy StartUpMode | SelfTestMode | StandbyMode |  PCVMode | PSVMode | FailSafeMode ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "SelfTestMode",
                "StandbyMode",
                "PCVMode",
                "PSVMode",
                "FailSafeMode"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode)",
            "responseTextRange": [
                13,
                96
            ],
            "diagramVariables": "Response = <b><i>(StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_unexp_ft": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_SMV_pt": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_SMV_ft": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_coco_smv": "(((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode)",
            "post_condition_coco": "(((((StartUpMode or SelfTestMode) or StandbyMode) or PCVMode) or PSVMode) or FailSafeMode)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((((((StartUpMode or SelfTestMode) or StandbyMode) or PCVMode) or PSVMode) or FailSafeMode)))",
            "component": "System"
        },
        "_id": "c0d89020-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN17",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall measure and display the flow of gas delivered to the patient per breathing cycle. \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function\n\n\nAssuming that the \"flow of gas...\" is the same as Fl1 in Figure 2.2",
        "comments": "",
        "fulltext": "System shall satisfy measureFl1 & display Fl1",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureFl1",
                "display"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureFl1 & display)",
            "responseTextRange": [
                13,
                40
            ],
            "diagramVariables": "Response = <b><i>(measureFl1 & display)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureFl1 & display)",
            "post_condition_unexp_ft": "(measureFl1 & display)",
            "post_condition_SMV_pt": "(measureFl1 & display)",
            "post_condition_SMV_ft": "(measureFl1 & display)",
            "post_condition_coco_smv": "(measureFl1 & display)",
            "post_condition_coco": "(measureFl1 and display)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureFl1 & display))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureFl1 & display))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureFl1 & display))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureFl1 & display))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureFl1 & display))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureFl1 & display))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureFl1 & display))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureFl1 & display))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureFl1 and display)))",
            "component": "System"
        },
        "_id": "c0d89021-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN32",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In a worst-case failure, the controller shall leave the system in a state that allows the patient to inhale and exhale unimpeded. \n\nRationale: patient safety is primary concern",
        "comments": "This seems to repeat part of FUN31. But also doesn't specify what patientSafe (my variable, obviously) means. ",
        "fulltext": "in FailSafeMode System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "FailSafeMode",
                "patientSafe"
            ],
            "scope_mode": "FailSafeMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                29,
                47
            ],
            "diagramVariables": "M = <b><i>FailSafeMode</i></b>,, Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>FailSafeMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "FailSafeMode",
            "scope_mode_coco": "FailSafeMode",
            "scope_mode_ft": "FailSafeMode",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_FailSafeMode & (! LAST))) | (X ((! (Lin_FailSafeMode | LAST)) U patientSafe)))) & (FailSafeMode -> ((! (Lin_FailSafeMode | LAST)) U patientSafe)))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_FailSafeMode -> (Y (! ((! patientSafe) S ((! patientSafe) & Fin_FailSafeMode)))))) & (((! Lin_FailSafeMode) S ((! Lin_FailSafeMode) & Fin_FailSafeMode)) -> (! ((! patientSafe) S ((! patientSafe) & Fin_FailSafeMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! FailSafeMode) & (Y FailSafeMode)) -> (Y (! ((! patientSafe) S ((! patientSafe) & (FailSafeMode & (Z (! FailSafeMode))))))))) & (((! ((! FailSafeMode) & (Y FailSafeMode))) S ((! ((! FailSafeMode) & (Y FailSafeMode))) & (FailSafeMode & (Z (! FailSafeMode))))) -> (! ((! patientSafe) S ((! patientSafe) & (FailSafeMode & (Z (! FailSafeMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! FailSafeMode) & (Y FailSafeMode)) -> (Y (! ((! patientSafe) S ((! patientSafe) & (FailSafeMode & ((! (Y TRUE)) | (Y (! FailSafeMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! FailSafeMode) & (! LAST)) & (X FailSafeMode)) & (! LAST))) | (X ((! (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) | LAST)) U patientSafe)))) & (FailSafeMode -> ((! (((FailSafeMode & (! LAST)) & (X (! FailSafeMode))) | LAST)) U patientSafe)))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! FailSafeMode) ) & (X FailSafeMode))) | (X ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe)))) & (FailSafeMode -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! FailSafeMode) ) & (X FailSafeMode))) | (X ((F ((FailSafeMode ) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe))))) & (FailSafeMode -> ((F ((FailSafeMode ) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode ) & (X (! FailSafeMode)))) U patientSafe))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! FailSafeMode) & (! LAST)) & (X FailSafeMode)) & (! LAST))) | (X (((! LAST) U ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U patientSafe))))) & (FailSafeMode -> (((! LAST) U ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) -> ((! ((FailSafeMode & (! LAST)) & (X (! FailSafeMode)))) U patientSafe))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not FailSafeMode) and (YtoPre(FailSafeMode))) => (YtoPre( not (SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not patientSafe) )))))) and ((SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not (( not FailSafeMode) and (YtoPre(FailSafeMode)))) )) => ( not (SI( (FailSafeMode and (FTP or (YtoPre( not FailSafeMode)))), ( not patientSafe) )))))",
            "component": "System"
        },
        "_id": "c0d8b730-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN23_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The switch to PSV shall occur only after the PSV parameters have been confirmed and until that has happened the PCV ventilation shall continue",
        "comments": "Oisín, v0.5: One of the \"confirmPSVParameters\" here was mispelled, fixed it.",
        "fulltext": "in PCVMode System shall satisfy ( (confirmPSVParameters & PSVMode) | (!confirmPSVParameters & PCVMode) )& ventilating",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "confirmPSVParameters",
                "PSVMode",
                "ventilating"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(( ( confirmPSVParameters & PSVMode ) | ( ! confirmPSVParameters & PCVMode ) ) & ventilating)",
            "responseTextRange": [
                24,
                116
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(( ( confirmPSVParameters & PSVMode ) | ( ! confirmPSVParameters & PCVMode ) ) & ventilating)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)",
            "post_condition_unexp_ft": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)",
            "post_condition_SMV_pt": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)",
            "post_condition_SMV_ft": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)",
            "post_condition_coco_smv": "(((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)",
            "post_condition_coco": "(((confirmPSVParameters and PSVMode) or (( not confirmPSVParameters) and PCVMode)) and ventilating)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) S ((! (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (((confirmPSVParameters & PSVMode) | ((! confirmPSVParameters) & PCVMode)) & ventilating)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (((confirmPSVParameters and PSVMode) or (( not confirmPSVParameters) and PCVMode)) and ventilating)) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (((confirmPSVParameters and PSVMode) or (( not confirmPSVParameters) and PCVMode)) and ventilating)) )))))",
            "component": "System"
        },
        "_id": "c0d90550-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_7",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide a log to include any change of alarm settings, including the value applied",
        "comments": "",
        "fulltext": "when alarmSettingsChanged System shall satisfy logAlarmSettings",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "alarmSettingsChanged",
                "logAlarmSettings"
            ],
            "qualifier_word": "when",
            "pre_condition": "(alarmSettingsChanged)",
            "regular_condition": "(alarmSettingsChanged)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "post_condition": "(logAlarmSettings)",
            "responseTextRange": [
                39,
                62
            ],
            "diagramVariables": "TC = <b><i>(alarmSettingsChanged)</i></b>, Response = <b><i>(logAlarmSettings)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(alarmSettingsChanged)</i></b> is true and any point in the interval where <b><i>(alarmSettingsChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "alarmSettingsChanged",
            "regular_condition_unexp_ft": "alarmSettingsChanged",
            "regular_condition_SMV_pt": "alarmSettingsChanged",
            "regular_condition_SMV_ft": "alarmSettingsChanged",
            "regular_condition_coco_smv": "alarmSettingsChanged",
            "regular_condition_coco": "alarmSettingsChanged",
            "post_condition_unexp_pt": "logAlarmSettings",
            "post_condition_unexp_ft": "logAlarmSettings",
            "post_condition_SMV_pt": "logAlarmSettings",
            "post_condition_SMV_ft": "logAlarmSettings",
            "post_condition_coco_smv": "logAlarmSettings",
            "post_condition_coco": "logAlarmSettings",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! alarmSettingsChanged) & ((! LAST) & (X alarmSettingsChanged))) -> (X ((! LAST) U logAlarmSettings)))) & (alarmSettingsChanged -> ((! LAST) U logAlarmSettings)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! alarmSettingsChanged)) | (! ((! logAlarmSettings) S ((! logAlarmSettings) & (alarmSettingsChanged & ((Y (! alarmSettingsChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! alarmSettingsChanged)) | (! ((! logAlarmSettings) S ((! logAlarmSettings) & (alarmSettingsChanged & ((Y (! alarmSettingsChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! alarmSettingsChanged)) | (! ((! logAlarmSettings) S ((! logAlarmSettings) & (alarmSettingsChanged & ((Y (! alarmSettingsChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! alarmSettingsChanged) & ((! LAST) & (X alarmSettingsChanged))) -> (X ((! LAST) U logAlarmSettings)))) & (alarmSettingsChanged -> ((! LAST) U logAlarmSettings)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! alarmSettingsChanged) & (X alarmSettingsChanged)) -> (X (F logAlarmSettings)))) & (alarmSettingsChanged -> (F logAlarmSettings)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! alarmSettingsChanged) & (X alarmSettingsChanged)) -> (X (F logAlarmSettings)))) & (alarmSettingsChanged -> (F logAlarmSettings)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! alarmSettingsChanged) & ((! LAST) & (X alarmSettingsChanged))) -> (X ((! LAST) U logAlarmSettings)))) & (alarmSettingsChanged -> ((! LAST) U logAlarmSettings)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not alarmSettingsChanged)) or ( not (SI( (alarmSettingsChanged and ((YtoPre( not alarmSettingsChanged)) or FTP)), ( not logAlarmSettings) ))))",
            "component": "System"
        },
        "_id": "c0d95370-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10_5",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In Standby Mode ventilation shall be off and it shall be possible to adjust all user-controlled parameters for ventilation and alarms before connecting to the patient and starting patient ventilation.",
        "comments": "",
        "fulltext": "in StandbyMode System shall satisfy ventilationOff & ventilationParmsAdjustable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StandbyMode",
                "ventilationOff",
                "ventilationParmsAdjustable"
            ],
            "scope_mode": "StandbyMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(ventilationOff & ventilationParmsAdjustable)",
            "responseTextRange": [
                28,
                78
            ],
            "diagramVariables": "M = <b><i>StandbyMode</i></b>,, Response = <b><i>(ventilationOff & ventilationParmsAdjustable)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StandbyMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StandbyMode",
            "scope_mode_coco": "StandbyMode",
            "scope_mode_ft": "StandbyMode",
            "post_condition_unexp_pt": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_unexp_ft": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_SMV_pt": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_SMV_ft": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_coco_smv": "(ventilationOff & ventilationParmsAdjustable)",
            "post_condition_coco": "(ventilationOff and ventilationParmsAdjustable)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StandbyMode & (! LAST))) | (X ((! (Lin_StandbyMode | LAST)) U (ventilationOff & ventilationParmsAdjustable))))) & (StandbyMode -> ((! (Lin_StandbyMode | LAST)) U (ventilationOff & ventilationParmsAdjustable))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StandbyMode -> (Y (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & Fin_StandbyMode)))))) & (((! Lin_StandbyMode) S ((! Lin_StandbyMode) & Fin_StandbyMode)) -> (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & Fin_StandbyMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StandbyMode) & (Y StandbyMode)) -> (Y (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & (StandbyMode & (Z (! StandbyMode))))))))) & (((! ((! StandbyMode) & (Y StandbyMode))) S ((! ((! StandbyMode) & (Y StandbyMode))) & (StandbyMode & (Z (! StandbyMode))))) -> (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & (StandbyMode & (Z (! StandbyMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StandbyMode) & (Y StandbyMode)) -> (Y (! ((! (ventilationOff & ventilationParmsAdjustable)) S ((! (ventilationOff & ventilationParmsAdjustable)) & (StandbyMode & ((! (Y TRUE)) | (Y (! StandbyMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U (ventilationOff & ventilationParmsAdjustable))))) & (StandbyMode -> ((! (((StandbyMode & (! LAST)) & (X (! StandbyMode))) | LAST)) U (ventilationOff & ventilationParmsAdjustable))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable))))) & (StandbyMode -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StandbyMode) ) & (X StandbyMode))) | (X ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))) & (StandbyMode -> ((F ((StandbyMode ) & (X (! StandbyMode)))) -> ((! ((StandbyMode ) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StandbyMode) & (! LAST)) & (X StandbyMode)) & (! LAST))) | (X (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))) & (StandbyMode -> (((! LAST) U ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) -> ((! ((StandbyMode & (! LAST)) & (X (! StandbyMode)))) U (ventilationOff & ventilationParmsAdjustable)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StandbyMode) and (YtoPre(StandbyMode))) => (YtoPre( not (SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (ventilationOff and ventilationParmsAdjustable)) )))))) and ((SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (( not StandbyMode) and (YtoPre(StandbyMode)))) )) => ( not (SI( (StandbyMode and (FTP or (YtoPre( not StandbyMode)))), ( not (ventilationOff and ventilationParmsAdjustable)) )))))",
            "component": "System"
        },
        "_id": "c0d9a190-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN5_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall indicate to the user that the initialization process has been completed successfully or failed. In case of a failure the user shall be warned that the system is out-of-service. In addition, any other operations shall be not allowed. \n\nRationale: only a fully functional unit shall be used with a patient",
        "comments": "Assumes that \"other operations shall not be allowed\" is the fail safe mode, as per Fig 2.1\n\nOisín, v0.3: Added brackets after the '|' for clarity",
        "fulltext": "in StartUpMode System shall satisfy initDone | (initFail & OutOfServiceWarning &  FailSafeMode)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "initDone",
                "initFail",
                "OutOfServiceWarning",
                "FailSafeMode"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(initDone | ( initFail & OutOfServiceWarning & FailSafeMode ))",
            "responseTextRange": [
                28,
                94
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(initDone | ( initFail & OutOfServiceWarning & FailSafeMode ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "(initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))",
            "post_condition_unexp_ft": "(initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))",
            "post_condition_SMV_pt": "(initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))",
            "post_condition_SMV_ft": "(initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))",
            "post_condition_coco_smv": "(initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))",
            "post_condition_coco": "(initDone or ((initFail and OutOfServiceWarning) and FailSafeMode))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (initDone or ((initFail and OutOfServiceWarning) and FailSafeMode))) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (initDone or ((initFail and OutOfServiceWarning) and FailSafeMode))) )))))",
            "component": "System"
        },
        "_id": "c0d9c8a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN23_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The switch to PSV shall occur at the end of a PCV inspiratory time",
        "comments": "Oisín, v0.3: changed from \"shall satisfy if PCVInspTimeEnd then PSVMode | PCVMode\" to shall satisfy !(PCVInspTimeEnd and PSVMode); I think this requirement really specifies when the switch *can't* happen",
        "fulltext": "in PCVMode when PSVModeSelected System shall satisfy !(PCVInspTimeEnd & PSVMode)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVModeSelected",
                "PCVInspTimeEnd",
                "PSVMode"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                11,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(! ( PCVInspTimeEnd & PSVMode ))",
            "responseTextRange": [
                45,
                79
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(! ( PCVInspTimeEnd & PSVMode ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_unexp_ft": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_SMV_pt": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_SMV_ft": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_coco_smv": "(! (PCVInspTimeEnd & PSVMode))",
            "post_condition_coco": "( not (PCVInspTimeEnd and PSVMode))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (! (PCVInspTimeEnd & PSVMode))) S ((! (! (PCVInspTimeEnd & PSVMode))) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (! (PCVInspTimeEnd & PSVMode))) S ((! (! (PCVInspTimeEnd & PSVMode))) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((PCVInspTimeEnd & PSVMode) S ((PCVInspTimeEnd & PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((PCVInspTimeEnd & PSVMode) S ((PCVInspTimeEnd & PSVMode) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! (! (PCVInspTimeEnd & PSVMode))) S ((! (! (PCVInspTimeEnd & PSVMode))) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (! (PCVInspTimeEnd & PSVMode)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode)))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (! (PCVInspTimeEnd & PSVMode))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not ( not (PCVInspTimeEnd and PSVMode))) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not ( not (PCVInspTimeEnd and PSVMode))) ))))))",
            "component": "System"
        },
        "_id": "c0d9efb0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN33",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Any power failure shall leave the system in a state that allows the patient to inhale and exhale unimpeded. \n\nRationale: patient safety is primary concern",
        "comments": "",
        "fulltext": "if powerFailure System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerFailure",
                "patientSafe"
            ],
            "qualifier_word": "if",
            "pre_condition": "(powerFailure)",
            "regular_condition": "(powerFailure)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                29,
                47
            ],
            "diagramVariables": "TC = <b><i>(powerFailure)</i></b>, Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerFailure)</i></b> is true and any point in the interval where <b><i>(powerFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerFailure",
            "regular_condition_unexp_ft": "powerFailure",
            "regular_condition_SMV_pt": "powerFailure",
            "regular_condition_SMV_ft": "powerFailure",
            "regular_condition_coco_smv": "powerFailure",
            "regular_condition_coco": "powerFailure",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((! LAST) U patientSafe)))) & (powerFailure -> ((! LAST) U patientSafe)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! powerFailure)) | (! ((! patientSafe) S ((! patientSafe) & (powerFailure & ((Y (! powerFailure)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! powerFailure)) | (! ((! patientSafe) S ((! patientSafe) & (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! powerFailure)) | (! ((! patientSafe) S ((! patientSafe) & (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((! LAST) U patientSafe)))) & (powerFailure -> ((! LAST) U patientSafe)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X (F patientSafe)))) & (powerFailure -> (F patientSafe)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X (F patientSafe)))) & (powerFailure -> (F patientSafe)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((! LAST) U patientSafe)))) & (powerFailure -> ((! LAST) U patientSafe)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not powerFailure)) or ( not (SI( (powerFailure and ((YtoPre( not powerFailure)) or FTP)), ( not patientSafe) ))))",
            "component": "System"
        },
        "_id": "c0da3dd0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6_5",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The self-test procedure shall confirm the oxygen sensor is calibrated.\n\nAssuming that the \"oxygen sensor\" is \"OS\" in Figure 2.2 (\"OS\" is \"oxygen concentration sensor\")",
        "comments": "Oisín, v0.3.1: Changed the response from just \"satisfy testOS\" to \"satisfy testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testOxygenSensorPass",
                "testOxygenSensorFail",
                "testOxygenSensorSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip)",
            "responseTextRange": [
                29,
                102
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_unexp_ft": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_SMV_pt": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_SMV_ft": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_coco_smv": "((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)",
            "post_condition_coco": "((testOxygenSensorPass or testOxygenSensorFail) or testOxygenSensorSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testOxygenSensorPass or testOxygenSensorFail) or testOxygenSensorSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testOxygenSensorPass or testOxygenSensorFail) or testOxygenSensorSkip)) )))))",
            "component": "System"
        },
        "_id": "c0da64e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN11",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall connect to pressurized gas supply of oxygen and medical air and accept pressures up to 5.2 bar. \n\nRationale: this covers the range of pressures available in hospital setting\n\nAssuming that the connection goes through the \"GB:Gas Blender with PS (pressure sensor)\" as per Fig 2.2",
        "comments": "I think this is a partial formalisation",
        "fulltext": "System shall satisfy GBPS <= 5.2",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "GBPS"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(GBPS <= 5.2)",
            "responseTextRange": [
                13,
                31
            ],
            "diagramVariables": "Response = <b><i>(GBPS <= 5.2)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(GBPS <= 5.2)",
            "post_condition_unexp_ft": "(GBPS <= 5.2)",
            "post_condition_SMV_pt": "(GBPS <= 5.2)",
            "post_condition_SMV_ft": "(GBPS <= 5.2)",
            "post_condition_coco_smv": "(GBPS <= 5.2)",
            "post_condition_coco": "(GBPS <= 5.2)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (GBPS <= 5.2))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (GBPS <= 5.2))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (GBPS <= 5.2))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (GBPS <= 5.2))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (GBPS <= 5.2))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (GBPS <= 5.2))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (GBPS <= 5.2))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (GBPS <= 5.2))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((GBPS <= 5.2)))",
            "component": "System"
        },
        "_id": "c0da8bf0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_8",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide a log to include change of patient, including the patient attributes;",
        "comments": "",
        "fulltext": "when patientChanged System shall satisfy logPatientChange",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "patientChanged",
                "logPatientChange"
            ],
            "qualifier_word": "when",
            "pre_condition": "(patientChanged)",
            "regular_condition": "(patientChanged)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(logPatientChange)",
            "responseTextRange": [
                33,
                56
            ],
            "diagramVariables": "TC = <b><i>(patientChanged)</i></b>, Response = <b><i>(logPatientChange)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(patientChanged)</i></b> is true and any point in the interval where <b><i>(patientChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "patientChanged",
            "regular_condition_unexp_ft": "patientChanged",
            "regular_condition_SMV_pt": "patientChanged",
            "regular_condition_SMV_ft": "patientChanged",
            "regular_condition_coco_smv": "patientChanged",
            "regular_condition_coco": "patientChanged",
            "post_condition_unexp_pt": "logPatientChange",
            "post_condition_unexp_ft": "logPatientChange",
            "post_condition_SMV_pt": "logPatientChange",
            "post_condition_SMV_ft": "logPatientChange",
            "post_condition_coco_smv": "logPatientChange",
            "post_condition_coco": "logPatientChange",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! patientChanged) & ((! LAST) & (X patientChanged))) -> (X ((! LAST) U logPatientChange)))) & (patientChanged -> ((! LAST) U logPatientChange)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! patientChanged)) | (! ((! logPatientChange) S ((! logPatientChange) & (patientChanged & ((Y (! patientChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! patientChanged)) | (! ((! logPatientChange) S ((! logPatientChange) & (patientChanged & ((Y (! patientChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! patientChanged)) | (! ((! logPatientChange) S ((! logPatientChange) & (patientChanged & ((Y (! patientChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! patientChanged) & ((! LAST) & (X patientChanged))) -> (X ((! LAST) U logPatientChange)))) & (patientChanged -> ((! LAST) U logPatientChange)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! patientChanged) & (X patientChanged)) -> (X (F logPatientChange)))) & (patientChanged -> (F logPatientChange)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! patientChanged) & (X patientChanged)) -> (X (F logPatientChange)))) & (patientChanged -> (F logPatientChange)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! patientChanged) & ((! LAST) & (X patientChanged))) -> (X ((! LAST) U logPatientChange)))) & (patientChanged -> ((! LAST) U logPatientChange)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not patientChanged)) or ( not (SI( (patientChanged and ((YtoPre( not patientChanged)) or FTP)), ( not logPatientChange) ))))",
            "component": "System"
        },
        "_id": "c0dab300-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN24",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have a pressure support ventilation (PSV) mode, as characterized by the following plots of pressure and flow versus time. [Plots are on page 12 of the spec] \n\nRationale: In PSV mode, the Ventilatorv0.2 supports the patient who is supposed to breathe spontaneously. PSV is needed to wean patients off the ventilation by allowing them to strengthen the muscles involved in breathing. PSV is not suitable for patients unable to initiate breaths on their own.",
        "comments": "Not sure how to formalise this one",
        "fulltext": "",
        "semantics": {},
        "_id": "c0db0120-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN21_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "A new breathing cycle shall be initiated by a sudden drop in pressure below a user-settable threshold (Inhale Trigger Sensitivity). \n\nRationale: In a pressure-regulated Ventilatorv0.2, the speed of pressure drop initiated by the patient is the easiest way to detect the spontaneous breathing attempt",
        "comments": "Oisín, v0.3: changed this and FUN25 from \"when pressureDrop\" to \"when inspiratoryPressure < InhaleTriggerSensitivity\". Almost certain this requirement and FUN21_2 should start with 'in PCVMode' but for the sake of accurate translation I'll leave it out for now",
        "fulltext": "when inspiratoryPressure < InhaleTriggerSensitivityPCV System shall satisfy breathingCycleStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "inspiratoryPressure",
                "InhaleTriggerSensitivityPCV",
                "breathingCycleStart"
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "conditionTextRange": [
                0,
                53
            ],
            "component_name": "System",
            "componentTextRange": [
                55,
                60
            ],
            "post_condition": "(breathingCycleStart)",
            "responseTextRange": [
                68,
                94
            ],
            "diagramVariables": "TC = <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPCV)</i></b>, Response = <b><i>(breathingCycleStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPCV)</i></b> is true and any point in the interval where <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPCV)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_unexp_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_SMV_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_SMV_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_coco_smv": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "regular_condition_coco": "(inspiratoryPressure < InhaleTriggerSensitivityPCV)",
            "post_condition_unexp_pt": "breathingCycleStart",
            "post_condition_unexp_ft": "breathingCycleStart",
            "post_condition_SMV_pt": "breathingCycleStart",
            "post_condition_SMV_ft": "breathingCycleStart",
            "post_condition_coco_smv": "breathingCycleStart",
            "post_condition_coco": "breathingCycleStart",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & ((! LAST) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV)))) -> (X ((! LAST) U breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> ((! LAST) U breathingCycleStart)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & ((! LAST) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV)))) -> (X ((! LAST) U breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> ((! LAST) U breathingCycleStart)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV))) -> (X (F breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> (F breathingCycleStart)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV))) -> (X (F breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> (F breathingCycleStart)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (inspiratoryPressure < InhaleTriggerSensitivityPCV)) & ((! LAST) & (X (inspiratoryPressure < InhaleTriggerSensitivityPCV)))) -> (X ((! LAST) U breathingCycleStart)))) & ((inspiratoryPressure < InhaleTriggerSensitivityPCV) -> ((! LAST) U breathingCycleStart)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (inspiratoryPressure < InhaleTriggerSensitivityPCV))) or ( not (SI( ((inspiratoryPressure < InhaleTriggerSensitivityPCV) and ((YtoPre( not (inspiratoryPressure < InhaleTriggerSensitivityPCV))) or FTP)), ( not breathingCycleStart) ))))",
            "component": "System"
        },
        "_id": "c0db2830-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN12",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide breathing air through a standard medical supply single-limbed patient circuit with a pneumatically controlled diaphragm expiration valve. \n\nRationale: this is readily available medical supply",
        "comments": "Not Formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0db2831-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6_6",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The self-test procedure shall confirm the local alarms are functional.",
        "comments": "Oisín, v0.3.1: Changed the response from just \"satisfy testAlarms\" to \"satisfy testAlarmsPass | testAlarmsFail | testAlarmsSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testAlarmsPass | testAlarmsFail | testAlarmsSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testAlarmsPass",
                "testAlarmsFail",
                "testAlarmsSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testAlarmsPass | testAlarmsFail | testAlarmsSkip)",
            "responseTextRange": [
                29,
                84
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testAlarmsPass | testAlarmsFail | testAlarmsSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_unexp_ft": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_SMV_pt": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_SMV_ft": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_coco_smv": "((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)",
            "post_condition_coco": "((testAlarmsPass or testAlarmsFail) or testAlarmsSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testAlarmsPass or testAlarmsFail) or testAlarmsSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testAlarmsPass or testAlarmsFail) or testAlarmsSkip)) )))))",
            "component": "System"
        },
        "_id": "c0db4f40-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN34",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Any failure of the gas supply shall leave the system in a state that allows the patient to inhale and exhale unimpeded. \n\nRationale: patient safety is primary concern",
        "comments": "",
        "fulltext": "if gasSupplyFailure System shall satisfy patientSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "gasSupplyFailure",
                "patientSafe"
            ],
            "qualifier_word": "if",
            "pre_condition": "(gasSupplyFailure)",
            "regular_condition": "(gasSupplyFailure)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(patientSafe)",
            "responseTextRange": [
                33,
                51
            ],
            "diagramVariables": "TC = <b><i>(gasSupplyFailure)</i></b>, Response = <b><i>(patientSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(gasSupplyFailure)</i></b> is true and any point in the interval where <b><i>(gasSupplyFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "gasSupplyFailure",
            "regular_condition_unexp_ft": "gasSupplyFailure",
            "regular_condition_SMV_pt": "gasSupplyFailure",
            "regular_condition_SMV_ft": "gasSupplyFailure",
            "regular_condition_coco_smv": "gasSupplyFailure",
            "regular_condition_coco": "gasSupplyFailure",
            "post_condition_unexp_pt": "patientSafe",
            "post_condition_unexp_ft": "patientSafe",
            "post_condition_SMV_pt": "patientSafe",
            "post_condition_SMV_ft": "patientSafe",
            "post_condition_coco_smv": "patientSafe",
            "post_condition_coco": "patientSafe",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! gasSupplyFailure) & ((! LAST) & (X gasSupplyFailure))) -> (X ((! LAST) U patientSafe)))) & (gasSupplyFailure -> ((! LAST) U patientSafe)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! gasSupplyFailure)) | (! ((! patientSafe) S ((! patientSafe) & (gasSupplyFailure & ((Y (! gasSupplyFailure)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! gasSupplyFailure)) | (! ((! patientSafe) S ((! patientSafe) & (gasSupplyFailure & ((Y (! gasSupplyFailure)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! gasSupplyFailure)) | (! ((! patientSafe) S ((! patientSafe) & (gasSupplyFailure & ((Y (! gasSupplyFailure)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! gasSupplyFailure) & ((! LAST) & (X gasSupplyFailure))) -> (X ((! LAST) U patientSafe)))) & (gasSupplyFailure -> ((! LAST) U patientSafe)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! gasSupplyFailure) & (X gasSupplyFailure)) -> (X (F patientSafe)))) & (gasSupplyFailure -> (F patientSafe)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! gasSupplyFailure) & (X gasSupplyFailure)) -> (X (F patientSafe)))) & (gasSupplyFailure -> (F patientSafe)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! gasSupplyFailure) & ((! LAST) & (X gasSupplyFailure))) -> (X ((! LAST) U patientSafe)))) & (gasSupplyFailure -> ((! LAST) U patientSafe)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not gasSupplyFailure)) or ( not (SI( (gasSupplyFailure and ((YtoPre( not gasSupplyFailure)) or FTP)), ( not patientSafe) ))))",
            "component": "System"
        },
        "_id": "c0db7650-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN18_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The user shall be able to disable/enable the leak compensation feature at any time.",
        "comments": "\"At any time\" seems...strong. \n\nOisín, v0.3: Added brackets for clarity and added that disableLeakCompensation => !enableLeakCompensation",
        "fulltext": "System shall satisfy (if enableLeakCompensation then leakCompensation) & (if disableLeakCompensation then (!leakCompensation & !enableLeakCompensation) )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "enableLeakCompensation",
                "leakCompensation",
                "disableLeakCompensation"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(( enableLeakCompensation => leakCompensation ) & ( disableLeakCompensation => ( ! leakCompensation & ! enableLeakCompensation ) ))",
            "responseTextRange": [
                13,
                152
            ],
            "diagramVariables": "Response = <b><i>(( enableLeakCompensation => leakCompensation ) & ( disableLeakCompensation => ( ! leakCompensation & ! enableLeakCompensation ) ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_unexp_ft": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_SMV_pt": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_SMV_ft": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_coco_smv": "((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation))))",
            "post_condition_coco": "((enableLeakCompensation => leakCompensation) and (disableLeakCompensation => (( not leakCompensation) and ( not enableLeakCompensation))))",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((enableLeakCompensation => leakCompensation) and (disableLeakCompensation => (( not leakCompensation) and ( not enableLeakCompensation))))))",
            "component": "System"
        },
        "_id": "c0db9d60-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10_6",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Once the power of the system has been off for more than 15 minutes it shall not be possible to select “Resume Ventilation”",
        "comments": "",
        "fulltext": "when off System shall after 15 minutes satisfy !resumeVentilation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "off",
                "resumeVentilation"
            ],
            "qualifier_word": "when",
            "pre_condition": "(off)",
            "regular_condition": "(off)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "duration": "15",
            "timingTextRange": [
                22,
                37
            ],
            "post_condition": "(! resumeVentilation)",
            "responseTextRange": [
                39,
                64
            ],
            "diagramVariables": "TC = <b><i>(off)</i></b>,  n = <b><i>15</i></b>, Response = <b><i>(! resumeVentilation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(off)</i></b> is true and any point in the interval where <b><i>(off)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>15</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>15</i></b>). Moreover, RES must hold at the point that is at distance <b><i>15</i></b>+1 from the trigger, that is, trigger+<b><i>15</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "off",
            "regular_condition_unexp_ft": "off",
            "regular_condition_SMV_pt": "off",
            "regular_condition_SMV_ft": "off",
            "regular_condition_coco_smv": "off",
            "regular_condition_coco": "off",
            "post_condition_unexp_pt": "(! resumeVentilation)",
            "post_condition_unexp_ft": "(! resumeVentilation)",
            "post_condition_SMV_pt": "(! resumeVentilation)",
            "post_condition_SMV_ft": "(! resumeVentilation)",
            "post_condition_coco_smv": "(! resumeVentilation)",
            "post_condition_coco": "( not resumeVentilation)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_unexp_ft$ -> (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))",
            "ft": "((LAST V (((! off) & ((! LAST) & (X off))) -> (X (((G[<=15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[<=15+1] (! resumeVentilation)) | (F[<15+1] LAST)))))) & (off -> (((G[<=15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[<=15+1] (! resumeVentilation)) | (F[<15+1] LAST)))))",
            "pt_fetched": "((H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$+1] (FTP | $post_condition_unexp_pt$)))))",
            "pt": "((H ((O[<=15] (off & ((Y (! off)) | FTP))) -> ((H (! off)) | (! (! resumeVentilation))))) & (H ((O[=15+1] ((off & ((Y (! off)) | FTP)) & (! (! resumeVentilation)))) -> (O[<15+1] (FTP | (! resumeVentilation))))))",
            "ptExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptExpanded": "((H ((O[0,15] (off & ((Y (! off)) | (! (Y TRUE))))) -> ((H (! off)) | resumeVentilation))) & (H ((O[16,16] ((off & ((Y (! off)) | (! (Y TRUE)))) & resumeVentilation)) -> (O[0,15] ((! (Y TRUE)) | (! resumeVentilation))))))",
            "ptFinBtwExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "((H ((O[0,15] (off & ((Y (! off)) | (! (Y TRUE))))) -> ((H (! off)) | (! (! resumeVentilation))))) & (H ((O[16,16] ((off & ((Y (! off)) | (! (Y TRUE)))) & (! (! resumeVentilation)))) -> (O[0,15] ((! (Y TRUE)) | (! resumeVentilation))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftExpanded": "((LAST V (((! off) & ((! LAST) & (X off))) -> (X (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! off) & (X off)) -> (X (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! off) & (X off)) -> (X (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (G (! (! resumeVentilation)))) & (F[0,16] (! resumeVentilation)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftFinBtwExpanded": "((LAST V (((! off) & ((! LAST) & (X off))) -> (X (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))) & (off -> (((G[0,15] (! (! resumeVentilation))) | (LAST V (! (! resumeVentilation)))) & ((F[0,16] (! resumeVentilation)) | (F[0,15] LAST)))))",
            "CoCoSpecCode_fetched": "((H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))) and (H((OT($duration$+1,$duration$+1,(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) and ( not $post_condition_coco$)))) => (OT($duration$,0,(FTP or $post_condition_coco$))))))",
            "CoCoSpecCode": "((H((OT(15,0,(off and ((YtoPre( not off)) or FTP)))) => ((H( not off)) or ( not ( not resumeVentilation))))) and (H((OT(15+1,15+1,((off and ((YtoPre( not off)) or FTP)) and ( not ( not resumeVentilation))))) => (OT(15,0,(FTP or ( not resumeVentilation)))))))",
            "component": "System"
        },
        "_id": "c0dbc470-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN35",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall prevent airborne contaminants (particulate, viral, bacterial) being delivered from the Ventilatorv0.2 to the patient.\n\n Rationale: patient safety is primary concern",
        "comments": "This seems unformalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0dbeb80-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_9",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide a log to include power supply source change, including the source utilized",
        "comments": "",
        "fulltext": "when powerSupplyChanged System shall satisfy logPowerSupply",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerSupplyChanged",
                "logPowerSupply"
            ],
            "qualifier_word": "when",
            "pre_condition": "(powerSupplyChanged)",
            "regular_condition": "(powerSupplyChanged)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "System",
            "componentTextRange": [
                24,
                29
            ],
            "post_condition": "(logPowerSupply)",
            "responseTextRange": [
                37,
                58
            ],
            "diagramVariables": "TC = <b><i>(powerSupplyChanged)</i></b>, Response = <b><i>(logPowerSupply)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerSupplyChanged)</i></b> is true and any point in the interval where <b><i>(powerSupplyChanged)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerSupplyChanged",
            "regular_condition_unexp_ft": "powerSupplyChanged",
            "regular_condition_SMV_pt": "powerSupplyChanged",
            "regular_condition_SMV_ft": "powerSupplyChanged",
            "regular_condition_coco_smv": "powerSupplyChanged",
            "regular_condition_coco": "powerSupplyChanged",
            "post_condition_unexp_pt": "logPowerSupply",
            "post_condition_unexp_ft": "logPowerSupply",
            "post_condition_SMV_pt": "logPowerSupply",
            "post_condition_SMV_ft": "logPowerSupply",
            "post_condition_coco_smv": "logPowerSupply",
            "post_condition_coco": "logPowerSupply",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! powerSupplyChanged) & ((! LAST) & (X powerSupplyChanged))) -> (X ((! LAST) U logPowerSupply)))) & (powerSupplyChanged -> ((! LAST) U logPowerSupply)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! powerSupplyChanged)) | (! ((! logPowerSupply) S ((! logPowerSupply) & (powerSupplyChanged & ((Y (! powerSupplyChanged)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! powerSupplyChanged)) | (! ((! logPowerSupply) S ((! logPowerSupply) & (powerSupplyChanged & ((Y (! powerSupplyChanged)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! powerSupplyChanged)) | (! ((! logPowerSupply) S ((! logPowerSupply) & (powerSupplyChanged & ((Y (! powerSupplyChanged)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! powerSupplyChanged) & ((! LAST) & (X powerSupplyChanged))) -> (X ((! LAST) U logPowerSupply)))) & (powerSupplyChanged -> ((! LAST) U logPowerSupply)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! powerSupplyChanged) & (X powerSupplyChanged)) -> (X (F logPowerSupply)))) & (powerSupplyChanged -> (F logPowerSupply)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! powerSupplyChanged) & (X powerSupplyChanged)) -> (X (F logPowerSupply)))) & (powerSupplyChanged -> (F logPowerSupply)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! powerSupplyChanged) & ((! LAST) & (X powerSupplyChanged))) -> (X ((! LAST) U logPowerSupply)))) & (powerSupplyChanged -> ((! LAST) U logPowerSupply)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not powerSupplyChanged)) or ( not (SI( (powerSupplyChanged and ((YtoPre( not powerSupplyChanged)) or FTP)), ( not logPowerSupply) ))))",
            "component": "System"
        },
        "_id": "c0dc39a0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN20",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PCV mode the breathing cycle shall be defined by inspiratory pressure Pinsp_PCV relative to atmosphere, respiratory rate (RRPCV) and the ratio between the inspiratory and expiratory times (I:E PCV ).\n\nRationale: standard parameters to define PCV\n\n(Added in v1.2) \nNote: The time for one breathing cycle will be equal to 1/RR_PCV . The expiratory time will be equal to (1/RR_PCV) / 1+I:E_PCV. For instance, if RR is 10 cycles for minutes [sic] and I:E is 1:2, the respiratory cycle will last 6 seconds, the inspiratory phase will last 2 seconds and the expiratory phase 4 seconds. ",
        "comments": "Matt, v0.1: Not sure how to formalise this\nMatt, v0.4: Adding simple formalisation from extra detail added in v1.2 of the natural language specification.; \"I:E\" -> \"ItoE\" to fix a silent FRET error.\nOisín, v0.5: Fixed a typo, \"breathingCyleTime\".",
        "fulltext": "in PCVMode System shall satisfy breathingCycleTime = 1/RR_PCV & ExpiratoryTime = breathingCycleTime / (1+ItoE_PCV)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "breathingCycleTime",
                "RR_PCV",
                "ExpiratoryTime",
                "ItoE_PCV"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(breathingCycleTime = 1 / RR_PCV & ExpiratoryTime = breathingCycleTime / ( 1 + ItoE_PCV ))",
            "responseTextRange": [
                24,
                113
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(breathingCycleTime = 1 / RR_PCV & ExpiratoryTime = breathingCycleTime / ( 1 + ItoE_PCV ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_unexp_ft": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_SMV_pt": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_SMV_ft": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_coco_smv": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_coco": "((breathingCycleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))) )))))",
            "component": "System"
        },
        "_id": "c0dc60b0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall log key parameters, save them before being powered off and load them upon start-up to be made available on a log page on the GUI.",
        "comments": "",
        "fulltext": "System shall satisfy logParams & saveLog & loadLog",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "logParams",
                "saveLog",
                "loadLog"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(logParams & saveLog & loadLog)",
            "responseTextRange": [
                13,
                49
            ],
            "diagramVariables": "Response = <b><i>(logParams & saveLog & loadLog)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((logParams & saveLog) & loadLog)",
            "post_condition_unexp_ft": "((logParams & saveLog) & loadLog)",
            "post_condition_SMV_pt": "((logParams & saveLog) & loadLog)",
            "post_condition_SMV_ft": "((logParams & saveLog) & loadLog)",
            "post_condition_coco_smv": "((logParams & saveLog) & loadLog)",
            "post_condition_coco": "((logParams and saveLog) and loadLog)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U ((logParams & saveLog) & loadLog))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O ((logParams & saveLog) & loadLog))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O ((logParams & saveLog) & loadLog))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O ((logParams & saveLog) & loadLog))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U ((logParams & saveLog) & loadLog))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F ((logParams & saveLog) & loadLog))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F ((logParams & saveLog) & loadLog))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U ((logParams & saveLog) & loadLog))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(((logParams and saveLog) and loadLog)))",
            "component": "System"
        },
        "_id": "c0dc87c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN21_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "A patient breath trigger shall reset the timer for the time-cycled breathing cycle.\n\nRationale: Avoid breath stacking, which would lead to hyperventilation",
        "comments": "",
        "fulltext": "when patientBreathTrigger System shall satisfy breathingTimerReset",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "patientBreathTrigger",
                "breathingTimerReset"
            ],
            "qualifier_word": "when",
            "pre_condition": "(patientBreathTrigger)",
            "regular_condition": "(patientBreathTrigger)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "System",
            "componentTextRange": [
                26,
                31
            ],
            "post_condition": "(breathingTimerReset)",
            "responseTextRange": [
                39,
                65
            ],
            "diagramVariables": "TC = <b><i>(patientBreathTrigger)</i></b>, Response = <b><i>(breathingTimerReset)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(patientBreathTrigger)</i></b> is true and any point in the interval where <b><i>(patientBreathTrigger)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "patientBreathTrigger",
            "regular_condition_unexp_ft": "patientBreathTrigger",
            "regular_condition_SMV_pt": "patientBreathTrigger",
            "regular_condition_SMV_ft": "patientBreathTrigger",
            "regular_condition_coco_smv": "patientBreathTrigger",
            "regular_condition_coco": "patientBreathTrigger",
            "post_condition_unexp_pt": "breathingTimerReset",
            "post_condition_unexp_ft": "breathingTimerReset",
            "post_condition_SMV_pt": "breathingTimerReset",
            "post_condition_SMV_ft": "breathingTimerReset",
            "post_condition_coco_smv": "breathingTimerReset",
            "post_condition_coco": "breathingTimerReset",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! patientBreathTrigger) & ((! LAST) & (X patientBreathTrigger))) -> (X ((! LAST) U breathingTimerReset)))) & (patientBreathTrigger -> ((! LAST) U breathingTimerReset)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! patientBreathTrigger)) | (! ((! breathingTimerReset) S ((! breathingTimerReset) & (patientBreathTrigger & ((Y (! patientBreathTrigger)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! patientBreathTrigger)) | (! ((! breathingTimerReset) S ((! breathingTimerReset) & (patientBreathTrigger & ((Y (! patientBreathTrigger)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! patientBreathTrigger)) | (! ((! breathingTimerReset) S ((! breathingTimerReset) & (patientBreathTrigger & ((Y (! patientBreathTrigger)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! patientBreathTrigger) & ((! LAST) & (X patientBreathTrigger))) -> (X ((! LAST) U breathingTimerReset)))) & (patientBreathTrigger -> ((! LAST) U breathingTimerReset)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! patientBreathTrigger) & (X patientBreathTrigger)) -> (X (F breathingTimerReset)))) & (patientBreathTrigger -> (F breathingTimerReset)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! patientBreathTrigger) & (X patientBreathTrigger)) -> (X (F breathingTimerReset)))) & (patientBreathTrigger -> (F breathingTimerReset)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! patientBreathTrigger) & ((! LAST) & (X patientBreathTrigger))) -> (X ((! LAST) U breathingTimerReset)))) & (patientBreathTrigger -> ((! LAST) U breathingTimerReset)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not patientBreathTrigger)) or ( not (SI( (patientBreathTrigger and ((YtoPre( not patientBreathTrigger)) or FTP)), ( not breathingTimerReset) ))))",
            "component": "System"
        },
        "_id": "c0dcaed0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN36",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall prevent patient expiratory viral and bacterial contaminants from entering the atmosphere. \n\nRationale: need to ensure that clinicians and other patients are not exposed",
        "comments": "This seems unformalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0dcaed1-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The self-test procedure shall confirm the switchover from external to internal power works.",
        "comments": "Oisín, v0.3.1: Changed the response from just \"satisfy testPowerSwitch\" to \"satisfy testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testPowerSwitchPass",
                "testPowerSwitchFail",
                "testPowerSwitchSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip)",
            "responseTextRange": [
                29,
                99
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_unexp_ft": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_SMV_pt": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_SMV_ft": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_coco_smv": "((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)",
            "post_condition_coco": "((testPowerSwitchPass or testPowerSwitchFail) or testPowerSwitchSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPowerSwitchPass or testPowerSwitchFail) or testPowerSwitchSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testPowerSwitchPass or testPowerSwitchFail) or testPowerSwitchSkip)) )))))",
            "component": "System"
        },
        "_id": "c0dcd5e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN22",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PCV mode it shall be possible to initiate with the push of a single button a lung recruitment procedure, termed Recruitment Maneuver (RM). \n\nNote: This maneuver is not allowed in North America. \n\nRationale: The RM is an emergency procedure required immediately after intubation. RM consists in the prolonged lung inflation at increased inspiratory set pressure, as necessary to reactivate the alveoli immediately after intubation.",
        "comments": "",
        "fulltext": "in PCVMode when RMButton System shall satisfy RM",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "RMButton",
                "RM"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(RMButton)",
            "regular_condition": "(RMButton)",
            "conditionTextRange": [
                11,
                23
            ],
            "component_name": "System",
            "componentTextRange": [
                25,
                30
            ],
            "post_condition": "(RM)",
            "responseTextRange": [
                38,
                47
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(RMButton)</i></b>, Response = <b><i>(RM)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(RMButton)</i></b> is true and any point in the interval where <b><i>(RMButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "RMButton",
            "regular_condition_unexp_ft": "RMButton",
            "regular_condition_SMV_pt": "RMButton",
            "regular_condition_SMV_ft": "RMButton",
            "regular_condition_coco_smv": "RMButton",
            "regular_condition_coco": "RMButton",
            "post_condition_unexp_pt": "RM",
            "post_condition_unexp_ft": "RM",
            "post_condition_SMV_pt": "RM",
            "post_condition_SMV_ft": "RM",
            "post_condition_coco_smv": "RM",
            "post_condition_coco": "RM",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U RM)) & (! (Lin_PCVMode | LAST))))) & (RMButton -> ((! (Lin_PCVMode | LAST)) U RM)))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U RM)) & (! (Lin_PCVMode | LAST))))) & (RMButton -> ((! (Lin_PCVMode | LAST)) U RM)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! RMButton) S ((! RMButton) & Fin_PCVMode)) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! RMButton) S ((! RMButton) & Fin_PCVMode)) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! RMButton) S ((! RMButton) & (PCVMode & (Z (! PCVMode))))) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! RMButton) S ((! RMButton) & (PCVMode & (Z (! PCVMode))))) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! RMButton) S ((! RMButton) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! RM) S ((! RM) & (RMButton & ((Y (! RMButton)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (RMButton -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (RMButton -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U RM)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM)))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! RMButton) & ((X RMButton) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U RM)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode ) & (X (! PCVMode)))) U RM))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! RMButton) & ((! LAST) & ((X RMButton) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (RMButton -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U RM))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not RMButton) )) or ( not (SI( (RMButton and ((YtoPre( not RMButton)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not RM) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not RMButton) )) or ( not (SI( (RMButton and ((YtoPre( not RMButton)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not RM) ))))))",
            "component": "System"
        },
        "_id": "c0dcfcf0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN18_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "When enabled, the leak compensation shall be activated by the MinPEEP alarm (SAV.15)",
        "comments": "",
        "fulltext": "when leakCompensationEnable if MinPEEPAlarm System shall satisfy leakCompensationActive",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "leakCompensationEnable",
                "MinPEEPAlarm",
                "leakCompensationActive"
            ],
            "qualifier_word": "if",
            "pre_condition": "(MinPEEPAlarm)",
            "regular_condition": "((leakCompensationEnable) & (MinPEEPAlarm))",
            "conditionTextRange": [
                0,
                42
            ],
            "component_name": "System",
            "componentTextRange": [
                44,
                49
            ],
            "post_condition": "(leakCompensationActive)",
            "responseTextRange": [
                57,
                86
            ],
            "diagramVariables": "TC = <b><i>((leakCompensationEnable) & (MinPEEPAlarm))</i></b>, Response = <b><i>(leakCompensationActive)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>((leakCompensationEnable) & (MinPEEPAlarm))</i></b> is true and any point in the interval where <b><i>((leakCompensationEnable) & (MinPEEPAlarm))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_unexp_ft": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_SMV_pt": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_SMV_ft": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_coco_smv": "(leakCompensationEnable & MinPEEPAlarm)",
            "regular_condition_coco": "(leakCompensationEnable and MinPEEPAlarm)",
            "post_condition_unexp_pt": "leakCompensationActive",
            "post_condition_unexp_ft": "leakCompensationActive",
            "post_condition_SMV_pt": "leakCompensationActive",
            "post_condition_SMV_ft": "leakCompensationActive",
            "post_condition_coco_smv": "leakCompensationActive",
            "post_condition_coco": "leakCompensationActive",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (leakCompensationEnable & MinPEEPAlarm)) & ((! LAST) & (X (leakCompensationEnable & MinPEEPAlarm)))) -> (X ((! LAST) U leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> ((! LAST) U leakCompensationActive)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (leakCompensationEnable & MinPEEPAlarm))) | (! ((! leakCompensationActive) S ((! leakCompensationActive) & ((leakCompensationEnable & MinPEEPAlarm) & ((Y (! (leakCompensationEnable & MinPEEPAlarm))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (leakCompensationEnable & MinPEEPAlarm))) | (! ((! leakCompensationActive) S ((! leakCompensationActive) & ((leakCompensationEnable & MinPEEPAlarm) & ((Y (! (leakCompensationEnable & MinPEEPAlarm))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (leakCompensationEnable & MinPEEPAlarm))) | (! ((! leakCompensationActive) S ((! leakCompensationActive) & ((leakCompensationEnable & MinPEEPAlarm) & ((Y (! (leakCompensationEnable & MinPEEPAlarm))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (leakCompensationEnable & MinPEEPAlarm)) & ((! LAST) & (X (leakCompensationEnable & MinPEEPAlarm)))) -> (X ((! LAST) U leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> ((! LAST) U leakCompensationActive)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (leakCompensationEnable & MinPEEPAlarm)) & (X (leakCompensationEnable & MinPEEPAlarm))) -> (X (F leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> (F leakCompensationActive)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (leakCompensationEnable & MinPEEPAlarm)) & (X (leakCompensationEnable & MinPEEPAlarm))) -> (X (F leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> (F leakCompensationActive)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (leakCompensationEnable & MinPEEPAlarm)) & ((! LAST) & (X (leakCompensationEnable & MinPEEPAlarm)))) -> (X ((! LAST) U leakCompensationActive)))) & ((leakCompensationEnable & MinPEEPAlarm) -> ((! LAST) U leakCompensationActive)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (leakCompensationEnable and MinPEEPAlarm))) or ( not (SI( ((leakCompensationEnable and MinPEEPAlarm) and ((YtoPre( not (leakCompensationEnable and MinPEEPAlarm))) or FTP)), ( not leakCompensationActive) ))))",
            "component": "System"
        },
        "_id": "c0dd4b10-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN5",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The Start-up Mode shall be initiated by pushing the power button of the system once the system has been connected to the breathing circuit (without connection to the patient), the air supply, and the power source. \n\nRationale: need to turn on the system once all connections are attached so the sensors and valves can be properly tested.",
        "comments": "Oisín, v0.3: Initial version of this was just \"when powerButton System shall satisfy StartUpMode\". I added more detail from the NL requirement about the preconditions for start up:\n\"when breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected System shall satisfy (powerButton => StartUpMode)\"\nUnsure if this should maybe be the other way around.\n\nOisín, v0.3.1: After discussion in meeting, moved powerButton into the condition.\n\"when powerButton & (breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected) System shall satisfy StartUpMode\"",
        "fulltext": "when powerButton & (breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected) System shall satisfy StartUpMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerButton",
                "breathingCircuitConnected",
                "patientConnected",
                "airSupplyConnected",
                "powerConnected",
                "StartUpMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))",
            "regular_condition": "(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))",
            "conditionTextRange": [
                0,
                105
            ],
            "component_name": "System",
            "componentTextRange": [
                107,
                112
            ],
            "post_condition": "(StartUpMode)",
            "responseTextRange": [
                120,
                138
            ],
            "diagramVariables": "TC = <b><i>(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))</i></b>, Response = <b><i>(StartUpMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))</i></b> is true and any point in the interval where <b><i>(powerButton & ( breathingCircuitConnected & ! ( patientConnected ) & airSupplyConnected & powerConnected ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_unexp_ft": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_SMV_pt": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_SMV_ft": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_coco_smv": "(powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))",
            "regular_condition_coco": "(powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected))",
            "post_condition_unexp_pt": "StartUpMode",
            "post_condition_unexp_ft": "StartUpMode",
            "post_condition_SMV_pt": "StartUpMode",
            "post_condition_SMV_ft": "StartUpMode",
            "post_condition_coco_smv": "StartUpMode",
            "post_condition_coco": "StartUpMode",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & ((! LAST) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))))) -> (X ((! LAST) U StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> ((! LAST) U StartUpMode)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! ((! StartUpMode) S ((! StartUpMode) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & ((Y (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! ((! StartUpMode) S ((! StartUpMode) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & ((Y (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! ((! StartUpMode) S ((! StartUpMode) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & ((Y (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & ((! LAST) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))))) -> (X ((! LAST) U StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> ((! LAST) U StartUpMode)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) -> (X (F StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> (F StartUpMode)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))) -> (X (F StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> (F StartUpMode)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))) & ((! LAST) & (X (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected))))) -> (X ((! LAST) U StartUpMode)))) & ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) -> ((! LAST) U StartUpMode)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected)))) or ( not (SI( ((powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected)) and ((YtoPre( not (powerButton and (((breathingCircuitConnected and ( not patientConnected)) and airSupplyConnected) and powerConnected)))) or FTP)), ( not StartUpMode) ))))",
            "component": "System"
        },
        "_id": "c0dd7220-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide ventilation support for patients who require mechanical ventilation and weigh more than 40 kg (88 lbs). \n\nRationale: ventilation of children and infants is more challenging",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0dd9930-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_10",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide a log to include results of the pre-use check.",
        "comments": "Not clear if \"pre-use check\" is the same as the self test",
        "fulltext": "when preUseCheckDone System shall satisfy logPreUseCheck",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "preUseCheckDone",
                "logPreUseCheck"
            ],
            "qualifier_word": "when",
            "pre_condition": "(preUseCheckDone)",
            "regular_condition": "(preUseCheckDone)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "post_condition": "(logPreUseCheck)",
            "responseTextRange": [
                34,
                55
            ],
            "diagramVariables": "TC = <b><i>(preUseCheckDone)</i></b>, Response = <b><i>(logPreUseCheck)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(preUseCheckDone)</i></b> is true and any point in the interval where <b><i>(preUseCheckDone)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "preUseCheckDone",
            "regular_condition_unexp_ft": "preUseCheckDone",
            "regular_condition_SMV_pt": "preUseCheckDone",
            "regular_condition_SMV_ft": "preUseCheckDone",
            "regular_condition_coco_smv": "preUseCheckDone",
            "regular_condition_coco": "preUseCheckDone",
            "post_condition_unexp_pt": "logPreUseCheck",
            "post_condition_unexp_ft": "logPreUseCheck",
            "post_condition_SMV_pt": "logPreUseCheck",
            "post_condition_SMV_ft": "logPreUseCheck",
            "post_condition_coco_smv": "logPreUseCheck",
            "post_condition_coco": "logPreUseCheck",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! preUseCheckDone) & ((! LAST) & (X preUseCheckDone))) -> (X ((! LAST) U logPreUseCheck)))) & (preUseCheckDone -> ((! LAST) U logPreUseCheck)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! preUseCheckDone)) | (! ((! logPreUseCheck) S ((! logPreUseCheck) & (preUseCheckDone & ((Y (! preUseCheckDone)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! preUseCheckDone)) | (! ((! logPreUseCheck) S ((! logPreUseCheck) & (preUseCheckDone & ((Y (! preUseCheckDone)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! preUseCheckDone)) | (! ((! logPreUseCheck) S ((! logPreUseCheck) & (preUseCheckDone & ((Y (! preUseCheckDone)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! preUseCheckDone) & ((! LAST) & (X preUseCheckDone))) -> (X ((! LAST) U logPreUseCheck)))) & (preUseCheckDone -> ((! LAST) U logPreUseCheck)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! preUseCheckDone) & (X preUseCheckDone)) -> (X (F logPreUseCheck)))) & (preUseCheckDone -> (F logPreUseCheck)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! preUseCheckDone) & (X preUseCheckDone)) -> (X (F logPreUseCheck)))) & (preUseCheckDone -> (F logPreUseCheck)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! preUseCheckDone) & ((! LAST) & (X preUseCheckDone))) -> (X ((! LAST) U logPreUseCheck)))) & (preUseCheckDone -> ((! LAST) U logPreUseCheck)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not preUseCheckDone)) or ( not (SI( (preUseCheckDone and ((YtoPre( not preUseCheckDone)) or FTP)), ( not logPreUseCheck) ))))",
            "component": "System"
        },
        "_id": "c0ddc040-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN25",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PSV mode the breathing cycle shall be initiated by a sudden drop in pressure below a user-settable threshold (Inhale Trigger Sensitivity) \n\nRationale: In a pressure-regulated Ventilatorv0.2, the speed of pressure drop initiated by the patient is the easiest way to detect the spontaneous breathing attempt as per Ventilatorv0.2 experts",
        "comments": "Oisín, v0.3: changed this and FUN21_1 from \"when pressureDrop\" to \"when inspiratoryPressure < InhaleTriggerSensitivity[PCV/PSV]\"",
        "fulltext": "in PSVMode when inspiratoryPressure < InhaleTriggerSensitivityPSV System shall satisfy breathingCycleStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "inspiratoryPressure",
                "InhaleTriggerSensitivityPSV",
                "breathingCycleStart"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "conditionTextRange": [
                11,
                64
            ],
            "component_name": "System",
            "componentTextRange": [
                66,
                71
            ],
            "post_condition": "(breathingCycleStart)",
            "responseTextRange": [
                79,
                105
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPSV)</i></b>, Response = <b><i>(breathingCycleStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPSV)</i></b> is true and any point in the interval where <b><i>(inspiratoryPressure < InhaleTriggerSensitivityPSV)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_unexp_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_SMV_pt": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_SMV_ft": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_coco_smv": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "regular_condition_coco": "(inspiratoryPressure < InhaleTriggerSensitivityPSV)",
            "post_condition_unexp_pt": "breathingCycleStart",
            "post_condition_unexp_ft": "breathingCycleStart",
            "post_condition_SMV_pt": "breathingCycleStart",
            "post_condition_SMV_ft": "breathingCycleStart",
            "post_condition_coco_smv": "breathingCycleStart",
            "post_condition_coco": "breathingCycleStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U breathingCycleStart)) & (! (Lin_PSVMode | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (Lin_PSVMode | LAST)) U breathingCycleStart)))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U breathingCycleStart)) & (! (Lin_PSVMode | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (Lin_PSVMode | LAST)) U breathingCycleStart)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & Fin_PSVMode)) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & Fin_PSVMode)) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (PSVMode & (Z (! PSVMode))))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (PSVMode & (Z (! PSVMode))))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) S ((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! breathingCycleStart) S ((! breathingCycleStart) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U breathingCycleStart)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode ) & (X (! PSVMode)))) U breathingCycleStart))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & ((! LAST) & ((X (inspiratoryPressure < InhaleTriggerSensitivityPSV)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((inspiratoryPressure < InhaleTriggerSensitivityPSV) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U breathingCycleStart))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (inspiratoryPressure < InhaleTriggerSensitivityPSV)) )) or ( not (SI( ((inspiratoryPressure < InhaleTriggerSensitivityPSV) and ((YtoPre( not (inspiratoryPressure < InhaleTriggerSensitivityPSV))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not breathingCycleStart) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (inspiratoryPressure < InhaleTriggerSensitivityPSV)) )) or ( not (SI( ((inspiratoryPressure < InhaleTriggerSensitivityPSV) and ((YtoPre( not (inspiratoryPressure < InhaleTriggerSensitivityPSV))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not breathingCycleStart) ))))))",
            "component": "System"
        },
        "_id": "c0de0e60-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN7",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If the self-test fails, the user shall be warned that the system is out-of-service. In addition, any other operations shall be not allowed.",
        "comments": "Assuming: \"any other operations should not be allowed\" means Fail Safe Mode, as per Fig 2.1.\nThis is subtly different to FUN5_2 because of the wording of the natural language requirement.",
        "fulltext": "in SelfTestMode if selfTestFail System shall satisfy OutOfServiceWarning & FailSafeMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "selfTestFail",
                "OutOfServiceWarning",
                "FailSafeMode"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "qualifier_word": "if",
            "pre_condition": "(selfTestFail)",
            "regular_condition": "(selfTestFail)",
            "conditionTextRange": [
                16,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(OutOfServiceWarning & FailSafeMode)",
            "responseTextRange": [
                45,
                86
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, TC = <b><i>(selfTestFail)</i></b>, Response = <b><i>(OutOfServiceWarning & FailSafeMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(selfTestFail)</i></b> is true and any point in the interval where <b><i>(selfTestFail)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "regular_condition_unexp_pt": "selfTestFail",
            "regular_condition_unexp_ft": "selfTestFail",
            "regular_condition_SMV_pt": "selfTestFail",
            "regular_condition_SMV_ft": "selfTestFail",
            "regular_condition_coco_smv": "selfTestFail",
            "regular_condition_coco": "selfTestFail",
            "post_condition_unexp_pt": "(OutOfServiceWarning & FailSafeMode)",
            "post_condition_unexp_ft": "(OutOfServiceWarning & FailSafeMode)",
            "post_condition_SMV_pt": "(OutOfServiceWarning & FailSafeMode)",
            "post_condition_SMV_ft": "(OutOfServiceWarning & FailSafeMode)",
            "post_condition_coco_smv": "(OutOfServiceWarning & FailSafeMode)",
            "post_condition_coco": "(OutOfServiceWarning and FailSafeMode)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X (((Lin_SelfTestMode | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (Lin_SelfTestMode | LAST)) U (OutOfServiceWarning & FailSafeMode))) & (! (Lin_SelfTestMode | LAST))))) & (selfTestFail -> ((! (Lin_SelfTestMode | LAST)) U (OutOfServiceWarning & FailSafeMode))))))) & (SelfTestMode -> (((Lin_SelfTestMode | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (Lin_SelfTestMode | LAST))))) -> ((X ((! (Lin_SelfTestMode | LAST)) U (OutOfServiceWarning & FailSafeMode))) & (! (Lin_SelfTestMode | LAST))))) & (selfTestFail -> ((! (Lin_SelfTestMode | LAST)) U (OutOfServiceWarning & FailSafeMode))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (((! selfTestFail) S ((! selfTestFail) & Fin_SelfTestMode)) | (! ((! (OutOfServiceWarning & FailSafeMode)) S ((! (OutOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | Fin_SelfTestMode))))))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (((! selfTestFail) S ((! selfTestFail) & Fin_SelfTestMode)) | (! ((! (OutOfServiceWarning & FailSafeMode)) S ((! (OutOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | Fin_SelfTestMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((! selfTestFail) S ((! selfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (! ((! (OutOfServiceWarning & FailSafeMode)) S ((! (OutOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | (SelfTestMode & (Z (! SelfTestMode)))))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (((! selfTestFail) S ((! selfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (! ((! (OutOfServiceWarning & FailSafeMode)) S ((! (OutOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | (SelfTestMode & (Z (! SelfTestMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((! selfTestFail) S ((! selfTestFail) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))) | (! ((! (OutOfServiceWarning & FailSafeMode)) S ((! (OutOfServiceWarning & FailSafeMode)) & (selfTestFail & ((Y (! selfTestFail)) | (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (OutOfServiceWarning & FailSafeMode))) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & (selfTestFail -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (OutOfServiceWarning & FailSafeMode))))))) & (SelfTestMode -> (((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) -> ((X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (OutOfServiceWarning & FailSafeMode))) & (! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST))))) & (selfTestFail -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U (OutOfServiceWarning & FailSafeMode))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))))))) & (SelfTestMode -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode)))))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((((SelfTestMode ) & (X (! SelfTestMode))) V (((! selfTestFail) & ((X selfTestFail) & (! ((SelfTestMode ) & (X (! SelfTestMode)))))) -> ((X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode ) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode)))))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) V (((! selfTestFail) & ((! LAST) & ((X selfTestFail) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) -> ((X ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode))) & (! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode))))))) & (selfTestFail -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U (OutOfServiceWarning & FailSafeMode)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not selfTestFail) )) or ( not (SI( (selfTestFail and ((YtoPre( not selfTestFail)) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not (OutOfServiceWarning and FailSafeMode)) ))))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not selfTestFail) )) or ( not (SI( (selfTestFail and ((YtoPre( not selfTestFail)) or (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))))), ( not (OutOfServiceWarning and FailSafeMode)) ))))))",
            "component": "System"
        },
        "_id": "c0de3570-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide pressure regulated ventilation controlling the inspiratory pressure. \n\nRationale: pressure regulated ventilation is most beneficial for COVID-19 patients",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0de8390-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN6_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The self-test procedure shall confirm there are no unacceptable leaks in the breathing circuit.",
        "comments": "Oisín, v0.3.1: Changed the response from just \"satisfy testLeaks\" to \"satisfy testLeaksPass | testLeaksFail | testLeaksSkip\", to work better with FUN10 and its children.",
        "fulltext": "in SelfTestMode System shall satisfy testLeaksPass | testLeaksFail | testLeaksSkip",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "SelfTestMode",
                "testLeaksPass",
                "testLeaksFail",
                "testLeaksSkip"
            ],
            "scope_mode": "SelfTestMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(testLeaksPass | testLeaksFail | testLeaksSkip)",
            "responseTextRange": [
                29,
                81
            ],
            "diagramVariables": "M = <b><i>SelfTestMode</i></b>,, Response = <b><i>(testLeaksPass | testLeaksFail | testLeaksSkip)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>SelfTestMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "SelfTestMode",
            "scope_mode_coco": "SelfTestMode",
            "scope_mode_ft": "SelfTestMode",
            "post_condition_unexp_pt": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_unexp_ft": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_SMV_pt": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_SMV_ft": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_coco_smv": "((testLeaksPass | testLeaksFail) | testLeaksSkip)",
            "post_condition_coco": "((testLeaksPass or testLeaksFail) or testLeaksSkip)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_SelfTestMode & (! LAST))) | (X ((! (Lin_SelfTestMode | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))) & (SelfTestMode -> ((! (Lin_SelfTestMode | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_SelfTestMode -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & Fin_SelfTestMode)))))) & (((! Lin_SelfTestMode) S ((! Lin_SelfTestMode) & Fin_SelfTestMode)) -> (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & Fin_SelfTestMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & ((! (Y TRUE)) | (Y (! SelfTestMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))) & (SelfTestMode -> ((! (((SelfTestMode & (! LAST)) & (X (! SelfTestMode))) | LAST)) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))) & (SelfTestMode -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! SelfTestMode) ) & (X SelfTestMode))) | (X ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))) & (SelfTestMode -> ((F ((SelfTestMode ) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode ) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! SelfTestMode) & (! LAST)) & (X SelfTestMode)) & (! LAST))) | (X (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))) & (SelfTestMode -> (((! LAST) U ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) -> ((! ((SelfTestMode & (! LAST)) & (X (! SelfTestMode)))) U ((testLeaksPass | testLeaksFail) | testLeaksSkip)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not SelfTestMode) and (YtoPre(SelfTestMode))) => (YtoPre( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testLeaksPass or testLeaksFail) or testLeaksSkip)) )))))) and ((SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not (( not SelfTestMode) and (YtoPre(SelfTestMode)))) )) => ( not (SI( (SelfTestMode and (FTP or (YtoPre( not SelfTestMode)))), ( not ((testLeaksPass or testLeaksFail) or testLeaksSkip)) )))))",
            "component": "System"
        },
        "_id": "c0ded1b0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have means to indicate visually the cumulative hours of operation of the Ventilatorv0.2, either 1) automatically; or 2) by operator action.",
        "comments": "Not sure this is formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0def8c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If “New Patient” is selected, the user shall have to enter patient attributes and the completion of every step of the self-test procedure (FUN.6) shall be mandatory",
        "comments": "Oisín, v0.3.1: Updated to include the definition of \"selfTestPass\" where all tests must be passed.\nMatt: v0.4: SelfTestPass -> SelfTestPassed (as per Fig 2.1 since v1.3 of the natural language specification). Leaving the individual tests as 'pass' since they're not mentioned in Fig 2.1)\n",
        "fulltext": "when newPatient System shall satisfy patientAttributesEntered & SelfTestMode & ((testPowerSwitchPass &  testLeaksPass & testFl2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass) => selfTestPassed)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "newPatient",
                "patientAttributesEntered",
                "SelfTestMode",
                "testPowerSwitchPass",
                "testLeaksPass",
                "testFl2Pass",
                "testPSExpPass",
                "testOxygenSensorPass",
                "testAlarmsPass",
                "selfTestPassed"
            ],
            "qualifier_word": "when",
            "pre_condition": "(newPatient)",
            "regular_condition": "(newPatient)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "post_condition": "(patientAttributesEntered & SelfTestMode & ( ( testPowerSwitchPass & testLeaksPass & testFl2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass ) => selfTestPassed ))",
            "responseTextRange": [
                29,
                206
            ],
            "diagramVariables": "TC = <b><i>(newPatient)</i></b>, Response = <b><i>(patientAttributesEntered & SelfTestMode & ( ( testPowerSwitchPass & testLeaksPass & testFl2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass ) => selfTestPassed ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(newPatient)</i></b> is true and any point in the interval where <b><i>(newPatient)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "newPatient",
            "regular_condition_unexp_ft": "newPatient",
            "regular_condition_SMV_pt": "newPatient",
            "regular_condition_SMV_ft": "newPatient",
            "regular_condition_coco_smv": "newPatient",
            "regular_condition_coco": "newPatient",
            "post_condition_unexp_pt": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_unexp_ft": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_SMV_pt": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_SMV_ft": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_coco_smv": "((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))",
            "post_condition_coco": "((patientAttributesEntered and SelfTestMode) and ((((((testPowerSwitchPass and testLeaksPass) and testFl2Pass) and testPSExpPass) and testOxygenSensorPass) and testAlarmsPass) => selfTestPassed))",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! newPatient) & ((! LAST) & (X newPatient))) -> (X ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & ((Y (! newPatient)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & ((Y (! newPatient)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & ((Y (! newPatient)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! newPatient) & ((! LAST) & (X newPatient))) -> (X ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! newPatient) & (X newPatient)) -> (X (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! newPatient) & (X newPatient)) -> (X (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> (F ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! newPatient) & ((! LAST) & (X newPatient))) -> (X ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))) & (newPatient -> ((! LAST) U ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFl2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed)))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not newPatient)) or ( not (SI( (newPatient and ((YtoPre( not newPatient)) or FTP)), ( not ((patientAttributesEntered and SelfTestMode) and ((((((testPowerSwitchPass and testLeaksPass) and testFl2Pass) and testPSExpPass) and testOxygenSensorPass) and testAlarmsPass) => selfTestPassed))) ))))",
            "component": "System"
        },
        "_id": "c0df46e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN13",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall measure and display the breathing rate (number of breathes per minute). \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function",
        "comments": "Oisín, v0.3: changed \"measureBPM & displayBPM\" to \"measureRR & displayRR\", since the document uses RR as an abbreviation for 'Respiratory Rate'.",
        "fulltext": "System shall satisfy measureRR & displayRR",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureRR",
                "displayRR"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureRR & displayRR)",
            "responseTextRange": [
                13,
                41
            ],
            "diagramVariables": "Response = <b><i>(measureRR & displayRR)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureRR & displayRR)",
            "post_condition_unexp_ft": "(measureRR & displayRR)",
            "post_condition_SMV_pt": "(measureRR & displayRR)",
            "post_condition_SMV_ft": "(measureRR & displayRR)",
            "post_condition_coco_smv": "(measureRR & displayRR)",
            "post_condition_coco": "(measureRR and displayRR)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureRR & displayRR))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureRR & displayRR))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureRR & displayRR))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureRR & displayRR))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureRR & displayRR))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureRR & displayRR))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureRR & displayRR))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureRR & displayRR))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureRR and displayRR)))",
            "component": "System"
        },
        "_id": "c0df6df0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide positive end expiratory pressure (PEEP) ventilation. \n\nRationale: PEEP is important to keep alveoli recruited at the end of expiration",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0df9500-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN37",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have an internal power source that allows operation for 120 minutes past the failure of the external power source. \n\nRationale: regulatory requirement",
        "comments": "",
        "fulltext": "if powerFailure System shall for 120 minutes satisfy !off",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "powerFailure",
                "off"
            ],
            "qualifier_word": "if",
            "pre_condition": "(powerFailure)",
            "regular_condition": "(powerFailure)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "System",
            "componentTextRange": [
                16,
                21
            ],
            "duration": "120",
            "timingTextRange": [
                29,
                43
            ],
            "post_condition": "(! off)",
            "responseTextRange": [
                45,
                56
            ],
            "diagramVariables": "TC = <b><i>(powerFailure)</i></b>,  n = <b><i>120</i></b>, Response = <b><i>(! off)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerFailure)</i></b> is true and any point in the interval where <b><i>(powerFailure)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>120</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>120</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>120</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_for_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerFailure",
            "regular_condition_unexp_ft": "powerFailure",
            "regular_condition_SMV_pt": "powerFailure",
            "regular_condition_SMV_ft": "powerFailure",
            "regular_condition_coco_smv": "powerFailure",
            "regular_condition_coco": "powerFailure",
            "post_condition_unexp_pt": "(! off)",
            "post_condition_unexp_ft": "(! off)",
            "post_condition_SMV_pt": "(! off)",
            "post_condition_SMV_ft": "(! off)",
            "post_condition_coco_smv": "(! off)",
            "post_condition_coco": "( not off)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | (LAST V $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((G[<=120] (! off)) | (LAST V (! off)))))) & (powerFailure -> ((G[<=120] (! off)) | (LAST V (! off)))))",
            "pt_fetched": "(H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | $post_condition_unexp_pt$)))",
            "pt": "(H ((O[<=120] (powerFailure & ((Y (! powerFailure)) | FTP))) -> ((H (! powerFailure)) | (! off))))",
            "ptExpanded_fetched": "(H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | $post_condition_SMV_pt$)))",
            "ptExpanded": "(H ((O[0,120] (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))) -> ((H (! powerFailure)) | (! off))))",
            "ptFinBtwExpanded_fetched": "(H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | $post_condition_SMV_pt$)))",
            "ptFinBtwExpanded": "(H ((O[0,120] (powerFailure & ((Y (! powerFailure)) | (! (Y TRUE))))) -> ((H (! powerFailure)) | (! off))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((G[0,120] (! off)) | (LAST V (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (LAST V (! off)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X ((G[0,120] (! off)) | (G (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (G (! off)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (G $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! powerFailure) & (X powerFailure)) -> (X ((G[0,120] (! off)) | (G (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (G (! off)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (LAST V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! powerFailure) & ((! LAST) & (X powerFailure))) -> (X ((G[0,120] (! off)) | (LAST V (! off)))))) & (powerFailure -> ((G[0,120] (! off)) | (LAST V (! off)))))",
            "CoCoSpecCode_fetched": "(H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or $post_condition_coco$)))",
            "CoCoSpecCode": "(H((OT(120,0,(powerFailure and ((YtoPre( not powerFailure)) or FTP)))) => ((H( not powerFailure)) or ( not off))))",
            "component": "System"
        },
        "_id": "c0dfbc10-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN23",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide means to switch from PCV to PSV while PCV ventilation is active. \n\nRationale: the switchover between modes should not require stopping the ventilation in order to maintain ventilation of the patient",
        "comments": "",
        "fulltext": "in PCVMode when PSVModeSelected System shall satisfy ventilating & PSVMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "PSVModeSelected",
                "ventilating",
                "PSVMode"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(PSVModeSelected)",
            "regular_condition": "(PSVModeSelected)",
            "conditionTextRange": [
                11,
                30
            ],
            "component_name": "System",
            "componentTextRange": [
                32,
                37
            ],
            "post_condition": "(ventilating & PSVMode)",
            "responseTextRange": [
                45,
                73
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(PSVModeSelected)</i></b>, Response = <b><i>(ventilating & PSVMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "PSVModeSelected",
            "regular_condition_unexp_ft": "PSVModeSelected",
            "regular_condition_SMV_pt": "PSVModeSelected",
            "regular_condition_SMV_ft": "PSVModeSelected",
            "regular_condition_coco_smv": "PSVModeSelected",
            "regular_condition_coco": "PSVModeSelected",
            "post_condition_unexp_pt": "(ventilating & PSVMode)",
            "post_condition_unexp_ft": "(ventilating & PSVMode)",
            "post_condition_SMV_pt": "(ventilating & PSVMode)",
            "post_condition_SMV_ft": "(ventilating & PSVMode)",
            "post_condition_coco_smv": "(ventilating & PSVMode)",
            "post_condition_coco": "(ventilating and PSVMode)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))) & (! (Lin_PCVMode | LAST))))) & (PSVModeSelected -> ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! PSVModeSelected) S ((! PSVModeSelected) & Fin_PCVMode)) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (PSVModeSelected -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! PSVModeSelected) & ((X PSVModeSelected) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! PSVModeSelected) & ((! LAST) & ((X PSVModeSelected) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (PSVModeSelected -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not (ventilating and PSVMode)) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not PSVModeSelected) )) or ( not (SI( (PSVModeSelected and ((YtoPre( not PSVModeSelected)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not (ventilating and PSVMode)) ))))))",
            "component": "System"
        },
        "_id": "c0dfe320-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN29",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "In PCV and PSV mode there shall be the possibility to press a single button to initiate an Inspiratory Pause (IP) that closes both inspiratory and expiratory valve at the end of the inspiratory phase as long as the operator holds the button but no longer than 40 sec \n\nRationale: The Inspiratory Pause will, allowing for the measurement of the Plateau Pressure (PP), the pressure reached inside the alveoli at the end of the inspiratory cycle. PP may be lower than the target inspiratory pressure P insp provided by the Ventilatorv0.2. The difference between PP and the PEEP is called Driving Pressure, DP (DP = PP - PEEP).",
        "comments": "Oisín, v0.3: added a condition that this happens at the end of the inspiratoryphase. Tried to find a better way to write these two requirements, I think I'm decently happy with this. The one problem here is that this could allow for releasing and re-pressing the button within the 40 second window, but maybe not given the scope and condition.\n\nOisín, v0.5: changed the condition from \"when (PCVInspiratoryPhaseEnd | PSVInspiratoryPhaseEnd)\" to just \"when (InspiratoryPhaseEnd)\", since those variables were only used here. Also made all the variables start with lower case for consistency.",
        "fulltext": "while inspiratoryPauseButton when (inspiratoryPhaseEnd) System shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "for",
            "response": "satisfaction",
            "variables": [
                "inspiratoryPauseButton",
                "inspiratoryPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "(inspiratoryPauseButton)",
            "scopeTextRange": [
                0,
                27
            ],
            "qualifier_word": "when",
            "pre_condition": "(( inspiratoryPhaseEnd ))",
            "regular_condition": "(( inspiratoryPhaseEnd ))",
            "conditionTextRange": [
                29,
                54
            ],
            "component_name": "System",
            "componentTextRange": [
                56,
                61
            ],
            "duration": "40",
            "timingTextRange": [
                69,
                82
            ],
            "post_condition": "(( inspiratoryPauseButton => inValveClose & outValveClose ))",
            "responseTextRange": [
                84,
                147
            ],
            "diagramVariables": "M = <b><i>(inspiratoryPauseButton)</i></b>,, TC = <b><i>(( inspiratoryPhaseEnd ))</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(( inspiratoryPauseButton => inValveClose & outValveClose ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(inspiratoryPauseButton)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(( inspiratoryPhaseEnd ))</i></b> is true and any point in the interval where <b><i>(( inspiratoryPhaseEnd ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the trigger and remain true for <b><i>40</i></b> time points past the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>40</i></b>), or to the end of the interval if the interval ends sooner than trigger+<b><i>40</i></b>.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_for_satisfaction.svg",
            "scope_mode_pt": "inspiratoryPauseButton",
            "scope_mode_coco": "inspiratoryPauseButton",
            "scope_mode_ft": "inspiratoryPauseButton",
            "regular_condition_unexp_pt": "inspiratoryPhaseEnd",
            "regular_condition_unexp_ft": "inspiratoryPhaseEnd",
            "regular_condition_SMV_pt": "inspiratoryPhaseEnd",
            "regular_condition_SMV_ft": "inspiratoryPhaseEnd",
            "regular_condition_coco_smv": "inspiratoryPhaseEnd",
            "regular_condition_coco": "inspiratoryPhaseEnd",
            "post_condition_unexp_pt": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_unexp_ft": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_pt": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_SMV_ft": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco_smv": "(inspiratoryPauseButton -> (inValveClose & outValveClose))",
            "post_condition_coco": "(inspiratoryPauseButton => (inValveClose and outValveClose))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((G[<=$duration$] $post_condition_unexp_ft$) | ((Lin_$scope_mode_ft$ | LAST) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_inspiratoryPauseButton & (! LAST))) | (X (((Lin_inspiratoryPauseButton | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_inspiratoryPauseButton | LAST))))) -> ((X ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_inspiratoryPauseButton | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_inspiratoryPauseButton | LAST))))) & (inspiratoryPhaseEnd -> ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_inspiratoryPauseButton | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & (inspiratoryPauseButton -> (((Lin_inspiratoryPauseButton | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (Lin_inspiratoryPauseButton | LAST))))) -> ((X ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_inspiratoryPauseButton | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (Lin_inspiratoryPauseButton | LAST))))) & (inspiratoryPhaseEnd -> ((G[<=40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((Lin_inspiratoryPauseButton | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) S (((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_inspiratoryPauseButton -> (Y (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_inspiratoryPauseButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_inspiratoryPauseButton)) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_inspiratoryPauseButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_inspiratoryPauseButton)) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_inspiratoryPauseButton))))) & (((! Lin_inspiratoryPauseButton) S ((! Lin_inspiratoryPauseButton) & Fin_inspiratoryPauseButton)) -> (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_inspiratoryPauseButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_inspiratoryPauseButton)) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[<=40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | Fin_inspiratoryPauseButton))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & Fin_inspiratoryPauseButton)) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & Fin_inspiratoryPauseButton))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! inspiratoryPauseButton) & (Y inspiratoryPauseButton)) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))))) & (((! ((! inspiratoryPauseButton) & (Y inspiratoryPauseButton))) S ((! ((! inspiratoryPauseButton) & (Y inspiratoryPauseButton))) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) -> (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) S (((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! inspiratoryPauseButton) & (Y inspiratoryPauseButton)) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & ((! (Y TRUE)) | (Y (! inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & ((! (Y TRUE)) | (Y (! inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & ((! (Y TRUE)) | (Y (! inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & ((! (Y TRUE)) | (Y (! inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & (inspiratoryPauseButton & ((! (Y TRUE)) | (Y (! inspiratoryPauseButton)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! inspiratoryPauseButton) & (! LAST)) & (X inspiratoryPauseButton)) & (! LAST))) | (X (((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & (inspiratoryPauseButton -> (((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | ((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) | LAST) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! inspiratoryPauseButton) ) & (X inspiratoryPauseButton))) | (X ((((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton)))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))) & (inspiratoryPauseButton -> ((((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton)))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! inspiratoryPauseButton) ) & (X inspiratoryPauseButton))) | (X ((F ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton)))) -> ((((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton)))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & (inspiratoryPauseButton -> ((F ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton)))) -> ((((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (((! inspiratoryPhaseEnd) & ((X inspiratoryPhaseEnd) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton)))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton ) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((G[<=$duration$] $post_condition_SMV_ft$) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! inspiratoryPauseButton) & (! LAST)) & (X inspiratoryPauseButton)) & (! LAST))) | (X (((! LAST) U ((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton)))) -> ((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))) & (inspiratoryPauseButton -> (((! LAST) U ((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton)))) -> ((((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) V (((! inspiratoryPhaseEnd) & ((! LAST) & ((X inspiratoryPhaseEnd) & (! ((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))))))) -> ((X ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose))))) & (! ((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))))))) & (inspiratoryPhaseEnd -> ((G[0,40] (inspiratoryPauseButton -> (inValveClose & outValveClose))) | (((inspiratoryPauseButton & (! LAST)) & (X (! inspiratoryPauseButton))) V (inspiratoryPauseButton -> (inValveClose & outValveClose)))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))))) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not inspiratoryPauseButton) and (YtoPre(inspiratoryPauseButton))) => (YtoPre(SI( (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))), ((OT(40,0,(inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))))))) => ((SI( (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))), ( not inspiratoryPhaseEnd) )) or (inspiratoryPauseButton => (inValveClose and outValveClose)))) ))))) and ((SI( (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))), ( not (( not inspiratoryPauseButton) and (YtoPre(inspiratoryPauseButton)))) )) => (SI( (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))), ((OT(40,0,(inspiratoryPhaseEnd and ((YtoPre( not inspiratoryPhaseEnd)) or (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))))))) => ((SI( (inspiratoryPauseButton and (FTP or (YtoPre( not inspiratoryPauseButton)))), ( not inspiratoryPhaseEnd) )) or (inspiratoryPauseButton => (inValveClose and outValveClose)))) ))))",
            "component": "System"
        },
        "_id": "c0e00a30-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_11",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall provide a log to include the overall duration of the active use of the O2 sensor (%-hours) \n\nRationale: The oxygen sensor has a limited lifetime expectancy requiring a monitoring of its use in order to track its deterioration over time",
        "comments": "",
        "fulltext": "System shall satisfy logO2SensorUse",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "logO2SensorUse"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(logO2SensorUse)",
            "responseTextRange": [
                13,
                34
            ],
            "diagramVariables": "Response = <b><i>(logO2SensorUse)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "logO2SensorUse",
            "post_condition_unexp_ft": "logO2SensorUse",
            "post_condition_SMV_pt": "logO2SensorUse",
            "post_condition_SMV_ft": "logO2SensorUse",
            "post_condition_coco_smv": "logO2SensorUse",
            "post_condition_coco": "logO2SensorUse",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U logO2SensorUse)",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O logO2SensorUse)",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O logO2SensorUse)",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O logO2SensorUse)",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U logO2SensorUse)",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F logO2SensorUse)",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F logO2SensorUse)",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U logO2SensorUse)",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O(logO2SensorUse))",
            "component": "System"
        },
        "_id": "c0e00a31-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall be equipped with an alarm system log with a capacity of at least 1000 events in total for: high priority alarm conditions; medium priority alarm conditions; and alarm signal inactivation states",
        "comments": "Not sure this is formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0e03140-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN38",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall have clearly ranked (high/medium/low priority) visual alarms. \n\nRationale: regulatory requirement",
        "comments": "Not sure how to formalise that one.",
        "fulltext": "",
        "semantics": {},
        "_id": "c0e05850-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN14",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall measure and display the percentage of oxygen in the gas being delivered to the patient. \n\nRationale: observing and identifying the monitored ventilation parameters is considered a primary operating function",
        "comments": "",
        "fulltext": "System shall satisfy measureO2% & displayO2%",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "measureO2%",
                "displayO2%"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "post_condition": "(measureO2% & displayO2%)",
            "responseTextRange": [
                13,
                43
            ],
            "diagramVariables": "Response = <b><i>(measureO2% & displayO2%)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_unexp_ft": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_SMV_pt": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_SMV_ft": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_coco_smv": "(measureO2_PRC_ & displayO2_PRC_)",
            "post_condition_coco": "(measureO2_PRC_ and displayO2_PRC_)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (measureO2_PRC_ & displayO2_PRC_))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (measureO2_PRC_ & displayO2_PRC_))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (measureO2_PRC_ & displayO2_PRC_))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (measureO2_PRC_ & displayO2_PRC_))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (measureO2_PRC_ & displayO2_PRC_))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (measureO2_PRC_ & displayO2_PRC_))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (measureO2_PRC_ & displayO2_PRC_))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (measureO2_PRC_ & displayO2_PRC_))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((measureO2_PRC_ and displayO2_PRC_)))",
            "component": "System"
        },
        "_id": "c0e07f60-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN10_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If “Resume Ventilation” is selected, the system shall load the last calibration parameters, alarm thresholds, and ventilation parameters from the last active patient ventilation.",
        "comments": "",
        "fulltext": "when resumeVentilation System shall satisfy loadLastParams",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "resumeVentilation",
                "loadLastParams"
            ],
            "qualifier_word": "when",
            "pre_condition": "(resumeVentilation)",
            "regular_condition": "(resumeVentilation)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "System",
            "componentTextRange": [
                23,
                28
            ],
            "post_condition": "(loadLastParams)",
            "responseTextRange": [
                36,
                57
            ],
            "diagramVariables": "TC = <b><i>(resumeVentilation)</i></b>, Response = <b><i>(loadLastParams)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(resumeVentilation)</i></b> is true and any point in the interval where <b><i>(resumeVentilation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "resumeVentilation",
            "regular_condition_unexp_ft": "resumeVentilation",
            "regular_condition_SMV_pt": "resumeVentilation",
            "regular_condition_SMV_ft": "resumeVentilation",
            "regular_condition_coco_smv": "resumeVentilation",
            "regular_condition_coco": "resumeVentilation",
            "post_condition_unexp_pt": "loadLastParams",
            "post_condition_unexp_ft": "loadLastParams",
            "post_condition_SMV_pt": "loadLastParams",
            "post_condition_SMV_ft": "loadLastParams",
            "post_condition_coco_smv": "loadLastParams",
            "post_condition_coco": "loadLastParams",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U loadLastParams)))) & (resumeVentilation -> ((! LAST) U loadLastParams)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! resumeVentilation)) | (! ((! loadLastParams) S ((! loadLastParams) & (resumeVentilation & ((Y (! resumeVentilation)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! resumeVentilation)) | (! ((! loadLastParams) S ((! loadLastParams) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! resumeVentilation)) | (! ((! loadLastParams) S ((! loadLastParams) & (resumeVentilation & ((Y (! resumeVentilation)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U loadLastParams)))) & (resumeVentilation -> ((! LAST) U loadLastParams)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F loadLastParams)))) & (resumeVentilation -> (F loadLastParams)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! resumeVentilation) & (X resumeVentilation)) -> (X (F loadLastParams)))) & (resumeVentilation -> (F loadLastParams)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! resumeVentilation) & ((! LAST) & (X resumeVentilation))) -> (X ((! LAST) U loadLastParams)))) & (resumeVentilation -> ((! LAST) U loadLastParams)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not resumeVentilation)) or ( not (SI( (resumeVentilation and ((YtoPre( not resumeVentilation)) or FTP)), ( not loadLastParams) ))))",
            "component": "System"
        },
        "_id": "c0e0a670-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN8_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The system shall time stamp all alarm events either via the date and time, the elapsed time since the occurrence of the alarm condition, or the elapsed time from the start of use of system",
        "comments": "Not sure this is formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "c0e0cd80-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT25",
        "parent_reqid": "FUN21",
        "project": "Ventilator v0.5",
        "rationale": "When in the expiration phase, a new inspiration shall be initiated either after a breathing cycle is over, or when a spontaneous breath is detected. The maximum duration of the expiration phase (i.e., the Expiratory time) yields E = 60 / (RR_PCV x (1 + I:E_PCV )) Rationale: While the main mode of PCV is mandatory breathing control with constant rate, clinical advice is that the patient also needs to be able to trigger a breath spontaneously",
        "comments": "Oisín, v0.5: The inspiratoryPhaseStart here is redundant but I included it for traceability with the NL requirement.",
        "fulltext": "in PCVMode System shall satisfy (breathingCycleDone | patientBreathingRequest) => (breathingCycleStart & inspiratoryPhaseStart)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "breathingCycleDone",
                "patientBreathingRequest",
                "breathingCycleStart",
                "inspiratoryPhaseStart"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(( breathingCycleDone | patientBreathingRequest ) => ( breathingCycleStart & inspiratoryPhaseStart ))",
            "responseTextRange": [
                24,
                126
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(( breathingCycleDone | patientBreathingRequest ) => ( breathingCycleStart & inspiratoryPhaseStart ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))",
            "post_condition_unexp_ft": "((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))",
            "post_condition_SMV_pt": "((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))",
            "post_condition_SMV_ft": "((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))",
            "post_condition_coco_smv": "((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))",
            "post_condition_coco": "((breathingCycleDone or patientBreathingRequest) => (breathingCycleStart and inspiratoryPhaseStart))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart)))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) S ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) S ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) S ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) S ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) S ((! ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart)))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart)))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleDone or patientBreathingRequest) => (breathingCycleStart and inspiratoryPhaseStart))) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleDone or patientBreathingRequest) => (breathingCycleStart and inspiratoryPhaseStart))) )))))",
            "component": "System"
        },
        "_id": "c0e0f490-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT15",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If the pressure sensor fails to connect or reports an error condition after a fixed number of retries (maximum 5), the controller shall transition to the fail-safe mode.",
        "comments": "Oisín, v0.5: ",
        "fulltext": "in StartUpMode if pressureSensorRetries >= 5 & (pressureSensorConnFailure | pressureSensorError) System shall immediately satisfy FailSafeMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "pressureSensorRetries",
                "pressureSensorConnFailure",
                "pressureSensorError",
                "FailSafeMode"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "if",
            "pre_condition": "(pressureSensorRetries >= 5 & ( pressureSensorConnFailure | pressureSensorError ))",
            "regular_condition": "(pressureSensorRetries >= 5 & ( pressureSensorConnFailure | pressureSensorError ))",
            "conditionTextRange": [
                15,
                95
            ],
            "component_name": "System",
            "componentTextRange": [
                97,
                102
            ],
            "timingTextRange": [
                110,
                120
            ],
            "post_condition": "(FailSafeMode)",
            "responseTextRange": [
                122,
                141
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, TC = <b><i>(pressureSensorRetries >= 5 & ( pressureSensorConnFailure | pressureSensorError ))</i></b>, Response = <b><i>(FailSafeMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(pressureSensorRetries >= 5 & ( pressureSensorConnFailure | pressureSensorError ))</i></b> is true and any point in the interval where <b><i>(pressureSensorRetries >= 5 & ( pressureSensorConnFailure | pressureSensorError ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "regular_condition_unexp_pt": "((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))",
            "regular_condition_unexp_ft": "((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))",
            "regular_condition_SMV_pt": "((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))",
            "regular_condition_SMV_ft": "((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))",
            "regular_condition_coco_smv": "((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))",
            "regular_condition_coco": "((pressureSensorRetries >= 5) and (pressureSensorConnFailure or pressureSensorError))",
            "post_condition_unexp_pt": "FailSafeMode",
            "post_condition_unexp_ft": "FailSafeMode",
            "post_condition_SMV_pt": "FailSafeMode",
            "post_condition_SMV_ft": "FailSafeMode",
            "post_condition_coco_smv": "FailSafeMode",
            "post_condition_coco": "FailSafeMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X (((Lin_StartUpMode | LAST) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((! LAST) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! (Lin_StartUpMode | LAST))))) -> ((X FailSafeMode) & (! (Lin_StartUpMode | LAST))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode))))) & (StartUpMode -> (((Lin_StartUpMode | LAST) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((! LAST) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! (Lin_StartUpMode | LAST))))) -> ((X FailSafeMode) & (! (Lin_StartUpMode | LAST))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_StartUpMode -> (Y (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | Fin_StartUpMode)) -> FailSafeMode) S (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | Fin_StartUpMode)) -> FailSafeMode) & Fin_StartUpMode))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | Fin_StartUpMode)) -> FailSafeMode) S (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | Fin_StartUpMode)) -> FailSafeMode) & Fin_StartUpMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) S (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) & (StartUpMode & (Z (! StartUpMode)))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) S (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) & (StartUpMode & (Z (! StartUpMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))) -> FailSafeMode) S (((((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))) -> FailSafeMode) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((! LAST) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) -> ((X FailSafeMode) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode))))) & (StartUpMode -> (((((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((! LAST) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) -> ((X FailSafeMode) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode))))) & (StartUpMode -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode)))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((((StartUpMode & (! LAST)) & (X (! StartUpMode))) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((! LAST) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) -> ((X FailSafeMode) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode)))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((((StartUpMode & (! LAST)) & (X (! StartUpMode))) V (((! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & ((! LAST) & ((X ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError))) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) -> ((X FailSafeMode) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) & (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) -> FailSafeMode)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre(SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ((((pressureSensorRetries >= 5) and (pressureSensorConnFailure or pressureSensorError)) and ((YtoPre( not ((pressureSensorRetries >= 5) and (pressureSensorConnFailure or pressureSensorError)))) or (StartUpMode and (FTP or (YtoPre( not StartUpMode)))))) => FailSafeMode) ))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ((((pressureSensorRetries >= 5) and (pressureSensorConnFailure or pressureSensorError)) and ((YtoPre( not ((pressureSensorRetries >= 5) and (pressureSensorConnFailure or pressureSensorError)))) or (StartUpMode and (FTP or (YtoPre( not StartUpMode)))))) => FailSafeMode) ))))",
            "component": "System"
        },
        "_id": "c0e11ba0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT42_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "When expiratory pause timeout (max exp pause) is over, the cycle shall proceed immediately to inspiration.\nRationale: the timeout prevents stopping the patient breath cycle in case of human error",
        "comments": "",
        "fulltext": "when expiratoryPause System shall after 40 seconds satisfy !expiratoryPause & inspiratoryPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "expiratoryPause",
                "inspiratoryPhaseStart"
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPause)",
            "regular_condition": "(expiratoryPause)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "duration": "40",
            "timingTextRange": [
                34,
                49
            ],
            "post_condition": "(! expiratoryPause & inspiratoryPhaseStart)",
            "responseTextRange": [
                51,
                98
            ],
            "diagramVariables": "TC = <b><i>(expiratoryPause)</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(! expiratoryPause & inspiratoryPhaseStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(expiratoryPause)</i></b> is true and any point in the interval where <b><i>(expiratoryPause)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>40</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>40</i></b>). Moreover, RES must hold at the point that is at distance <b><i>40</i></b>+1 from the trigger, that is, trigger+<b><i>40</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "expiratoryPause",
            "regular_condition_unexp_ft": "expiratoryPause",
            "regular_condition_SMV_pt": "expiratoryPause",
            "regular_condition_SMV_ft": "expiratoryPause",
            "regular_condition_coco_smv": "expiratoryPause",
            "regular_condition_coco": "expiratoryPause",
            "post_condition_unexp_pt": "((! expiratoryPause) & inspiratoryPhaseStart)",
            "post_condition_unexp_ft": "((! expiratoryPause) & inspiratoryPhaseStart)",
            "post_condition_SMV_pt": "((! expiratoryPause) & inspiratoryPhaseStart)",
            "post_condition_SMV_ft": "((! expiratoryPause) & inspiratoryPhaseStart)",
            "post_condition_coco_smv": "((! expiratoryPause) & inspiratoryPhaseStart)",
            "post_condition_coco": "(( not expiratoryPause) and inspiratoryPhaseStart)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_unexp_ft$ -> (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))",
            "ft": "((LAST V (((! expiratoryPause) & ((! LAST) & (X expiratoryPause))) -> (X (((G[<=40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (LAST V (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & ((F[<=40+1] ((! expiratoryPause) & inspiratoryPhaseStart)) | (F[<40+1] LAST)))))) & (expiratoryPause -> (((G[<=40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (LAST V (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & ((F[<=40+1] ((! expiratoryPause) & inspiratoryPhaseStart)) | (F[<40+1] LAST)))))",
            "pt_fetched": "((H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$+1] (FTP | $post_condition_unexp_pt$)))))",
            "pt": "((H ((O[<=40] (expiratoryPause & ((Y (! expiratoryPause)) | FTP))) -> ((H (! expiratoryPause)) | (! ((! expiratoryPause) & inspiratoryPhaseStart))))) & (H ((O[=40+1] ((expiratoryPause & ((Y (! expiratoryPause)) | FTP)) & (! ((! expiratoryPause) & inspiratoryPhaseStart)))) -> (O[<40+1] (FTP | ((! expiratoryPause) & inspiratoryPhaseStart))))))",
            "ptExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptExpanded": "((H ((O[0,40] (expiratoryPause & ((Y (! expiratoryPause)) | (! (Y TRUE))))) -> ((H (! expiratoryPause)) | (! ((! expiratoryPause) & inspiratoryPhaseStart))))) & (H ((O[41,41] ((expiratoryPause & ((Y (! expiratoryPause)) | (! (Y TRUE)))) & (! ((! expiratoryPause) & inspiratoryPhaseStart)))) -> (O[0,40] ((! (Y TRUE)) | ((! expiratoryPause) & inspiratoryPhaseStart))))))",
            "ptFinBtwExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "((H ((O[0,40] (expiratoryPause & ((Y (! expiratoryPause)) | (! (Y TRUE))))) -> ((H (! expiratoryPause)) | (! ((! expiratoryPause) & inspiratoryPhaseStart))))) & (H ((O[41,41] ((expiratoryPause & ((Y (! expiratoryPause)) | (! (Y TRUE)))) & (! ((! expiratoryPause) & inspiratoryPhaseStart)))) -> (O[0,40] ((! (Y TRUE)) | ((! expiratoryPause) & inspiratoryPhaseStart))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftExpanded": "((LAST V (((! expiratoryPause) & ((! LAST) & (X expiratoryPause))) -> (X (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (LAST V (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & ((F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)) | (F[0,40] LAST)))))) & (expiratoryPause -> (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (LAST V (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & ((F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)) | (F[0,40] LAST)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! expiratoryPause) & (X expiratoryPause)) -> (X (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (G (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & (F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)))))) & (expiratoryPause -> (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (G (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & (F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! expiratoryPause) & (X expiratoryPause)) -> (X (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (G (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & (F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)))))) & (expiratoryPause -> (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (G (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & (F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftFinBtwExpanded": "((LAST V (((! expiratoryPause) & ((! LAST) & (X expiratoryPause))) -> (X (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (LAST V (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & ((F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)) | (F[0,40] LAST)))))) & (expiratoryPause -> (((G[0,40] (! ((! expiratoryPause) & inspiratoryPhaseStart))) | (LAST V (! ((! expiratoryPause) & inspiratoryPhaseStart)))) & ((F[0,41] ((! expiratoryPause) & inspiratoryPhaseStart)) | (F[0,40] LAST)))))",
            "CoCoSpecCode_fetched": "((H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))) and (H((OT($duration$+1,$duration$+1,(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) and ( not $post_condition_coco$)))) => (OT($duration$,0,(FTP or $post_condition_coco$))))))",
            "CoCoSpecCode": "((H((OT(40,0,(expiratoryPause and ((YtoPre( not expiratoryPause)) or FTP)))) => ((H( not expiratoryPause)) or ( not (( not expiratoryPause) and inspiratoryPhaseStart))))) and (H((OT(40+1,40+1,((expiratoryPause and ((YtoPre( not expiratoryPause)) or FTP)) and ( not (( not expiratoryPause) and inspiratoryPhaseStart))))) => (OT(40,0,(FTP or (( not expiratoryPause) and inspiratoryPhaseStart)))))))",
            "component": "System"
        },
        "_id": "c0e142b0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "VentilationOff: In ventilation off, the machine does not ventilate, the in valve is closed and the out valve is opened.",
        "comments": "This one doesn't actually reference a FUN requirement, but it's more formalizable than the others.\nAlso displays a pretty clear mismatch in the language between the FUN section and CONT section; here the mode is called VentilationOff, while it was called Standby Mode in requirement FUN4. I have called it ventilationOff here for consistency with the natural-language requirement.",
        "fulltext": "while ventilationOff System shall always satisfy ventilationOff & inValveClose & outValveOpen",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "ventilationOff",
                "inValveClose",
                "outValveOpen"
            ],
            "scope_mode": "(ventilationOff)",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "System",
            "componentTextRange": [
                21,
                26
            ],
            "timingTextRange": [
                34,
                39
            ],
            "post_condition": "(ventilationOff & inValveClose & outValveOpen)",
            "responseTextRange": [
                41,
                92
            ],
            "diagramVariables": "M = <b><i>(ventilationOff)</i></b>,, Response = <b><i>(ventilationOff & inValveClose & outValveOpen)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(ventilationOff)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "ventilationOff",
            "scope_mode_coco": "ventilationOff",
            "scope_mode_ft": "ventilationOff",
            "post_condition_unexp_pt": "((ventilationOff & inValveClose) & outValveOpen)",
            "post_condition_unexp_ft": "((ventilationOff & inValveClose) & outValveOpen)",
            "post_condition_SMV_pt": "((ventilationOff & inValveClose) & outValveOpen)",
            "post_condition_SMV_ft": "((ventilationOff & inValveClose) & outValveOpen)",
            "post_condition_coco_smv": "((ventilationOff & inValveClose) & outValveOpen)",
            "post_condition_coco": "((ventilationOff and inValveClose) and outValveOpen)",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (ventilationOff -> ((ventilationOff & inValveClose) & outValveOpen)))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (ventilationOff -> ((ventilationOff & inValveClose) & outValveOpen)))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (ventilationOff -> ((ventilationOff & inValveClose) & outValveOpen)))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ($post_condition_SMV_pt$ S ($post_condition_SMV_pt$ & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! ventilationOff) & (Y ventilationOff)) -> (Y (((ventilationOff & inValveClose) & outValveOpen) S (((ventilationOff & inValveClose) & outValveOpen) & (ventilationOff & ((! (Y TRUE)) | (Y (! ventilationOff)))))))))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "(LAST V (ventilationOff -> ((ventilationOff & inValveClose) & outValveOpen)))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (ventilationOff -> ((ventilationOff & inValveClose) & outValveOpen)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! ventilationOff) ) & (X ventilationOff))) | (X ((F ((ventilationOff ) & (X (! ventilationOff)))) -> (((ventilationOff ) & (X (! ventilationOff))) V ((ventilationOff & inValveClose) & outValveOpen)))))) & (ventilationOff -> ((F ((ventilationOff ) & (X (! ventilationOff)))) -> (((ventilationOff ) & (X (! ventilationOff))) V ((ventilationOff & inValveClose) & outValveOpen)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! ventilationOff) & (! LAST)) & (X ventilationOff)) & (! LAST))) | (X (((! LAST) U ((ventilationOff & (! LAST)) & (X (! ventilationOff)))) -> (((ventilationOff & (! LAST)) & (X (! ventilationOff))) V ((ventilationOff & inValveClose) & outValveOpen)))))) & (ventilationOff -> (((! LAST) U ((ventilationOff & (! LAST)) & (X (! ventilationOff)))) -> (((ventilationOff & (! LAST)) & (X (! ventilationOff))) V ((ventilationOff & inValveClose) & outValveOpen)))))",
            "CoCoSpecCode_fetched": "(H($scope_mode_coco$ => $post_condition_coco$))",
            "CoCoSpecCode": "(H(ventilationOff => ((ventilationOff and inValveClose) and outValveOpen)))",
            "component": "System"
        },
        "_id": "c0e169c0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "FUN43_3",
        "parent_reqid": "FUN22",
        "project": "Ventilator v0.5",
        "rationale": "In RM the out valve shall be closed and the in valve shall be opened to allow lung inflation at PRM.",
        "comments": "",
        "fulltext": "while RM System shall satisfy inValveOpen & outValveClose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "RM",
                "inValveOpen",
                "outValveClose"
            ],
            "scope_mode": "(RM)",
            "scopeTextRange": [
                0,
                7
            ],
            "component_name": "System",
            "componentTextRange": [
                9,
                14
            ],
            "post_condition": "(inValveOpen & outValveClose)",
            "responseTextRange": [
                22,
                56
            ],
            "diagramVariables": "M = <b><i>(RM)</i></b>,, Response = <b><i>(inValveOpen & outValveClose)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(RM)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "RM",
            "scope_mode_coco": "RM",
            "scope_mode_ft": "RM",
            "post_condition_unexp_pt": "(inValveOpen & outValveClose)",
            "post_condition_unexp_ft": "(inValveOpen & outValveClose)",
            "post_condition_SMV_pt": "(inValveOpen & outValveClose)",
            "post_condition_SMV_ft": "(inValveOpen & outValveClose)",
            "post_condition_coco_smv": "(inValveOpen & outValveClose)",
            "post_condition_coco": "(inValveOpen and outValveClose)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_RM & (! LAST))) | (X ((! (Lin_RM | LAST)) U (inValveOpen & outValveClose))))) & (RM -> ((! (Lin_RM | LAST)) U (inValveOpen & outValveClose))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_RM -> (Y (! ((! (inValveOpen & outValveClose)) S ((! (inValveOpen & outValveClose)) & Fin_RM)))))) & (((! Lin_RM) S ((! Lin_RM) & Fin_RM)) -> (! ((! (inValveOpen & outValveClose)) S ((! (inValveOpen & outValveClose)) & Fin_RM)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! RM) & (Y RM)) -> (Y (! ((! (inValveOpen & outValveClose)) S ((! (inValveOpen & outValveClose)) & (RM & (Z (! RM))))))))) & (((! ((! RM) & (Y RM))) S ((! ((! RM) & (Y RM))) & (RM & (Z (! RM))))) -> (! ((! (inValveOpen & outValveClose)) S ((! (inValveOpen & outValveClose)) & (RM & (Z (! RM))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! RM) & (Y RM)) -> (Y (! ((! (inValveOpen & outValveClose)) S ((! (inValveOpen & outValveClose)) & (RM & ((! (Y TRUE)) | (Y (! RM))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! RM) & (! LAST)) & (X RM)) & (! LAST))) | (X ((! (((RM & (! LAST)) & (X (! RM))) | LAST)) U (inValveOpen & outValveClose))))) & (RM -> ((! (((RM & (! LAST)) & (X (! RM))) | LAST)) U (inValveOpen & outValveClose))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! RM) ) & (X RM))) | (X ((! ((RM ) & (X (! RM)))) U (inValveOpen & outValveClose))))) & (RM -> ((! ((RM ) & (X (! RM)))) U (inValveOpen & outValveClose))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! RM) ) & (X RM))) | (X ((F ((RM ) & (X (! RM)))) -> ((! ((RM ) & (X (! RM)))) U (inValveOpen & outValveClose)))))) & (RM -> ((F ((RM ) & (X (! RM)))) -> ((! ((RM ) & (X (! RM)))) U (inValveOpen & outValveClose)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! RM) & (! LAST)) & (X RM)) & (! LAST))) | (X (((! LAST) U ((RM & (! LAST)) & (X (! RM)))) -> ((! ((RM & (! LAST)) & (X (! RM)))) U (inValveOpen & outValveClose)))))) & (RM -> (((! LAST) U ((RM & (! LAST)) & (X (! RM)))) -> ((! ((RM & (! LAST)) & (X (! RM)))) U (inValveOpen & outValveClose)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not RM) and (YtoPre(RM))) => (YtoPre( not (SI( (RM and (FTP or (YtoPre( not RM)))), ( not (inValveOpen and outValveClose)) )))))) and ((SI( (RM and (FTP or (YtoPre( not RM)))), ( not (( not RM) and (YtoPre(RM)))) )) => ( not (SI( (RM and (FTP or (YtoPre( not RM)))), ( not (inValveOpen and outValveClose)) )))))",
            "component": "System"
        },
        "_id": "c0e190d0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT9",
        "parent_reqid": "FUN27",
        "project": "Ventilator v0.5",
        "rationale": "The transition from PSV to PCV shall occur if the patient does not trigger a breath within the time of the apnea trigger window. The switch shall occur with respiratory rate, target inspiratory pressure and I:E defined for the apnea backup mode.\nRationale: the patient is not able to breathe",
        "comments": "Oisín: This is effectively FUN27_2 inlined into FUN27",
        "fulltext": "in PSVMode when breathingTime >= apneaLagTime System shall satisfy PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "breathingTime",
                "apneaLagTime",
                "PCVMode",
                "RR",
                "RR_AP",
                "P_insp",
                "P_inspAP",
                "ItoE",
                "ItoE_AP"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(breathingTime >= apneaLagTime)",
            "regular_condition": "(breathingTime >= apneaLagTime)",
            "conditionTextRange": [
                11,
                44
            ],
            "component_name": "System",
            "componentTextRange": [
                46,
                51
            ],
            "post_condition": "(PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)",
            "responseTextRange": [
                59,
                123
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(breathingTime >= apneaLagTime)</i></b>, Response = <b><i>(PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(breathingTime >= apneaLagTime)</i></b> is true and any point in the interval where <b><i>(breathingTime >= apneaLagTime)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(breathingTime >= apneaLagTime)",
            "regular_condition_unexp_ft": "(breathingTime >= apneaLagTime)",
            "regular_condition_SMV_pt": "(breathingTime >= apneaLagTime)",
            "regular_condition_SMV_ft": "(breathingTime >= apneaLagTime)",
            "regular_condition_coco_smv": "(breathingTime >= apneaLagTime)",
            "regular_condition_coco": "(breathingTime >= apneaLagTime)",
            "post_condition_unexp_pt": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_unexp_ft": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_pt": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_ft": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco_smv": "(((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco": "(((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (Lin_PSVMode | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (Lin_PSVMode | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & Fin_PSVMode)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & Fin_PSVMode)) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (breathingTime >= apneaLagTime)) S ((! (breathingTime >= apneaLagTime)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((breathingTime >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (breathingTime >= apneaLagTime)) & ((! LAST) & ((X (breathingTime >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((breathingTime >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U (((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (breathingTime >= apneaLagTime)) )) or ( not (SI( ((breathingTime >= apneaLagTime) and ((YtoPre( not (breathingTime >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not (((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (breathingTime >= apneaLagTime)) )) or ( not (SI( ((breathingTime >= apneaLagTime) and ((YtoPre( not (breathingTime >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not (((PCVMode and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))) ))))))",
            "component": "System"
        },
        "_id": "c0e1def0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1_1",
        "parent_reqid": "FUN5",
        "project": "Ventilator v0.5",
        "rationale": "Start-up Mode: In start-up mode the controller initializes itself with default configuration parameters (if any), checks the system memory and the communication of the controller with the sensors and valves, as well as between the controller and the GUI. Start-up mode is completed once the required activities have been completed.",
        "comments": "Oisín: This is almost exactly the same text as FUN.5.1, with the little note about it completing. So I just made this a combination of FUN5_1 and FUN5_2",
        "fulltext": "in StartUpMode System shall satisfy initStart & (initDone | (initFail & OutOfServiceWarning & FailSafeMode))",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "initStart",
                "initDone",
                "initFail",
                "OutOfServiceWarning",
                "FailSafeMode"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "component_name": "System",
            "componentTextRange": [
                15,
                20
            ],
            "post_condition": "(initStart & ( initDone | ( initFail & OutOfServiceWarning & FailSafeMode ) ))",
            "responseTextRange": [
                28,
                107
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, Response = <b><i>(initStart & ( initDone | ( initFail & OutOfServiceWarning & FailSafeMode ) ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "post_condition_unexp_pt": "(initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))",
            "post_condition_unexp_ft": "(initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))",
            "post_condition_SMV_pt": "(initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))",
            "post_condition_SMV_ft": "(initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))",
            "post_condition_coco_smv": "(initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))",
            "post_condition_coco": "(initStart and (initDone or ((initFail and OutOfServiceWarning) and FailSafeMode)))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X ((! (Lin_StartUpMode | LAST)) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> ((! (Lin_StartUpMode | LAST)) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_StartUpMode -> (Y (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & Fin_StartUpMode)))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & Fin_StartUpMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & (StartUpMode & (Z (! StartUpMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> ((! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST)) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))) & (StartUpMode -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((! ((StartUpMode ) & (X (! StartUpMode)))) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((! ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) U (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (initStart and (initDone or ((initFail and OutOfServiceWarning) and FailSafeMode)))) )))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => ( not (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (initStart and (initDone or ((initFail and OutOfServiceWarning) and FailSafeMode)))) )))))",
            "component": "System"
        },
        "_id": "c0e20600-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT20",
        "parent_reqid": "FUN19",
        "project": "Ventilator v0.5",
        "rationale": "In PCV mode the breathing cycle shall be defined by inspiratory pressure Pinsp P CV relative to atmosphere, respiratory rate (RRP CV ) and the ratio between the inspiratory and expiratory times (I:EP CV ).\nRationale: this is the most appropriate procedure for COVID-19 patients as it allows the immediate reopening of the alveoli and is strongly recommended by the doctors and nurses in the COVID-19 wards, rather than the constant flow procedure. These characteristics of the ventilator pressure transient during the inspiratory cycle are crucial to avoid barotrauma and to minimise long term fatigue of muscles and alveoli induced by forced mechanical ventilation.",
        "comments": "Oisín, v0.5: Exactly the same as FUN20 but with the \"Rationale\" of FUN19, and it references FUN19. Because why not.",
        "fulltext": "in PCVMode System shall satisfy breathingCycleTime = 1/RR_PCV & ExpiratoryTime = breathingCycleTime / (1+ItoE_PCV)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "breathingCycleTime",
                "RR_PCV",
                "ExpiratoryTime",
                "ItoE_PCV"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(breathingCycleTime = 1 / RR_PCV & ExpiratoryTime = breathingCycleTime / ( 1 + ItoE_PCV ))",
            "responseTextRange": [
                24,
                113
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(breathingCycleTime = 1 / RR_PCV & ExpiratoryTime = breathingCycleTime / ( 1 + ItoE_PCV ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_unexp_ft": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_SMV_pt": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_SMV_ft": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_coco_smv": "((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))",
            "post_condition_coco": "((breathingCycleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) S ((! ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((breathingCycleTime = ( 1 / RR_PCV )) and (ExpiratoryTime = ( breathingCycleTime / ( 1 + ItoE_PCV ) )))) )))))",
            "component": "System"
        },
        "_id": "c0e22d10-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT22",
        "parent_reqid": "FUN20",
        "project": "Ventilator v0.5",
        "rationale": "The cycle starts with the inspiration phase that lasts an Inspiratory time I = 60 x I:E_PCV /(RR_PCV x (1 + I:E_PCV )) seconds. After that the expiration phase begins.",
        "comments": "in PCVMode System shall satisfy breathingCycleTime = 1/RR_PCV & ExpiratoryTime = breathingCycleTime / (1+ItoE_PCV)\n\nOisín, v0.5: Initially I forgot that we can't put variables for time units. Here's that version:\n\"in PCVMode when inspiratoryPhaseStart System shall after 60*(ItoE_PCV/(RR_PCV * (1 + ItoE_PCV )) ) seconds satisfy inspiratoryPhaseEnd & expiratoryPhaseStart\"\n\nAlternatively, you could put this in terms of the variables defined in FUN20:\n\"after 60*ItoE_PCV*breathingCycleTime/(1 + ItoE_PCV )\"\nI think that's right.",
        "fulltext": "in PCVMode System shall satisfy inspiratoryTime = 60*(ItoE_PCV/(RR_PCV * (1 + ItoE_PCV )) )",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "inspiratoryTime",
                "ItoE_PCV",
                "RR_PCV"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(inspiratoryTime = 60 * ( ItoE_PCV / ( RR_PCV * ( 1 + ItoE_PCV ) ) ))",
            "responseTextRange": [
                24,
                90
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, Response = <b><i>(inspiratoryTime = 60 * ( ItoE_PCV / ( RR_PCV * ( 1 + ItoE_PCV ) ) ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "post_condition_unexp_pt": "(inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))",
            "post_condition_unexp_ft": "(inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))",
            "post_condition_SMV_pt": "(inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))",
            "post_condition_SMV_ft": "(inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))",
            "post_condition_coco_smv": "(inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))",
            "post_condition_coco": "(inspiratoryTime = ( 60 * ( ItoE_PCV / ( RR_PCV * ( 1 + ItoE_PCV ) ) ) ))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X ((! (Lin_PCVMode | LAST)) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV))))))))) & (PCVMode -> ((! (Lin_PCVMode | LAST)) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PCVMode -> (Y (! ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) S ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) & Fin_PCVMode)))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (! ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) S ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) & Fin_PCVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) S ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) & (PCVMode & (Z (! PCVMode))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (! ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) S ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) & (PCVMode & (Z (! PCVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (! ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) S ((! (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV))))))))) & (PCVMode -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((! ((PCVMode ) & (X (! PCVMode)))) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV))))))))) & (PCVMode -> ((! ((PCVMode ) & (X (! PCVMode)))) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (inspiratoryTime = ( 60 * ( ItoE_PCV / ( RR_PCV * ( 1 + ItoE_PCV ) ) ) ))) )))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ( not (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (inspiratoryTime = ( 60 * ( ItoE_PCV / ( RR_PCV * ( 1 + ItoE_PCV ) ) ) ))) )))))",
            "component": "System"
        },
        "_id": "c0e25420-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT27",
        "parent_reqid": "FUN28",
        "project": "Ventilator v0.5",
        "rationale": "If the controller is in the expiration phase, and it does not detect a spontaneous breath (i.e., the condition drop(PAW) > ITS_PCV is false), within the expiration time, if the Expiratory Pause start is set by the GUI, an Expiratory Pause shall start (see CONT.42).",
        "comments": "when expiratoryPauseButton & (ExpiratoryPhaseEnd) System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose",
        "fulltext": "in PCVMode when expiratoryPauseButton & ExpiratoryPhaseEnd & !patientBreathingRequest System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "until",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "expiratoryPauseButton",
                "ExpiratoryPhaseEnd",
                "patientBreathingRequest",
                "buttonUnPressOr60Seconds",
                "expirationPhaseEnd",
                "inValveClose",
                "outValveClose"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(expiratoryPauseButton & ExpiratoryPhaseEnd & ! patientBreathingRequest)",
            "regular_condition": "(expiratoryPauseButton & ExpiratoryPhaseEnd & ! patientBreathingRequest)",
            "conditionTextRange": [
                11,
                84
            ],
            "component_name": "System",
            "componentTextRange": [
                86,
                91
            ],
            "stop_condition": "(buttonUnPressOr60Seconds)",
            "timingTextRange": [
                99,
                128
            ],
            "post_condition": "(expirationPhaseEnd & inValveClose & outValveClose)",
            "responseTextRange": [
                130,
                186
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(expiratoryPauseButton & ExpiratoryPhaseEnd & ! patientBreathingRequest)</i></b>, SC = <b><i>(buttonUnPressOr60Seconds)</i></b>, Response = <b><i>(expirationPhaseEnd & inValveClose & outValveClose)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(expiratoryPauseButton & ExpiratoryPhaseEnd & ! patientBreathingRequest)</i></b> is true and any point in the interval where <b><i>(expiratoryPauseButton & ExpiratoryPhaseEnd & ! patientBreathingRequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must remain true until (but not necessarily including) the point where the stop condition holds, or to the end of the interval. If the stop condition never occurs, RES must hold until the end of the scope, or forever.  If the stop condition holds at the trigger, the requirement is satisfied.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_until_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))",
            "regular_condition_unexp_ft": "((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))",
            "regular_condition_SMV_pt": "((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))",
            "regular_condition_SMV_ft": "((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))",
            "regular_condition_coco_smv": "((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))",
            "regular_condition_coco": "((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest))",
            "post_condition_unexp_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_unexp_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_pt": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_SMV_ft": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco_smv": "((expirationPhaseEnd & inValveClose) & outValveClose)",
            "post_condition_coco": "((expirationPhaseEnd and inValveClose) and outValveClose)",
            "stop_condition_unexp_pt": "buttonUnPressOr60Seconds",
            "stop_condition_unexp_ft": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_pt": "buttonUnPressOr60Seconds",
            "stop_condition_SMV_ft": "buttonUnPressOr60Seconds",
            "stop_condition_coco_smv": "buttonUnPressOr60Seconds",
            "stop_condition_coco": "buttonUnPressOr60Seconds",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (((! $stop_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))) U ((! $post_condition_unexp_ft$) & (! $stop_condition_unexp_ft$)))) | ((($post_condition_unexp_ft$ & (Lin_$scope_mode_ft$ | LAST)) | (Lin_$scope_mode_ft$ | LAST)) V $post_condition_unexp_ft$))))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PCVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PCVMode | LAST)) | (Lin_PCVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (Lin_PCVMode | LAST))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PCVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PCVMode | LAST)) | (Lin_PCVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PCVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PCVMode | LAST)) | (Lin_PCVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (Lin_PCVMode | LAST))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (Lin_PCVMode | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (Lin_PCVMode | LAST)) | (Lin_PCVMode | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) S ((((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (((! $stop_condition_unexp_pt$) S ((! $stop_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)))) -> $post_condition_unexp_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_PCVMode -> (Y ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & Fin_PCVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | Fin_PCVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & Fin_PCVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | Fin_PCVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & Fin_PCVMode))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & Fin_PCVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | Fin_PCVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & Fin_PCVMode)) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | Fin_PCVMode)))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & Fin_PCVMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PCVMode & (Z (! PCVMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) S ((((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (((! $stop_condition_SMV_pt$) S ((! $stop_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))) -> $post_condition_SMV_pt$)) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) | ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) V $post_condition_SMV_ft$))))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) | (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) | (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) | (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) | (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PCVMode ) & (X (! PCVMode))))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode ) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode ) & (X (! PCVMode)))) | ((PCVMode ) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (((! $stop_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))) U ((! $post_condition_SMV_ft$) & (! $stop_condition_SMV_ft$)))) | ((($post_condition_SMV_ft$ & (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) | (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) V $post_condition_SMV_ft$)))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode & (! LAST)) & (X (! PCVMode)))) | ((PCVMode & (! LAST)) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode & (! LAST)) & (X (! PCVMode)))) | ((PCVMode & (! LAST)) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & ((! LAST) & ((X ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode & (! LAST)) & (X (! PCVMode)))) | ((PCVMode & (! LAST)) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose)))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) -> ((! (((! buttonUnPressOr60Seconds) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))) U ((! ((expirationPhaseEnd & inValveClose) & outValveClose)) & (! buttonUnPressOr60Seconds)))) | (((((expirationPhaseEnd & inValveClose) & outValveClose) & ((PCVMode & (! LAST)) & (X (! PCVMode)))) | ((PCVMode & (! LAST)) & (X (! PCVMode)))) V ((expirationPhaseEnd & inValveClose) & outValveClose))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $stop_condition_coco$) )) => $post_condition_coco$)) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ((SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $stop_condition_coco$) )) => $post_condition_coco$)) ))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre(SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest))) )) or ((SI( (((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest)) and ((YtoPre( not ((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest)))) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not buttonUnPressOr60Seconds) )) => ((expirationPhaseEnd and inValveClose) and outValveClose))) ))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => (SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not ((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest))) )) or ((SI( (((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest)) and ((YtoPre( not ((expiratoryPauseButton and ExpiratoryPhaseEnd) and ( not patientBreathingRequest)))) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not buttonUnPressOr60Seconds) )) => ((expirationPhaseEnd and inValveClose) and outValveClose))) ))))",
            "component": "System"
        },
        "_id": "c0e27b30-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT43_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The controller shall stop RM if it is required from the GUI.\nRationale: The GUI stops the RM if required by the user.",
        "comments": "",
        "fulltext": "while RM if !RMButton System shall satisfy !RM & expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "RM",
                "RMButton",
                "expirationPhaseStart"
            ],
            "scope_mode": "(RM)",
            "scopeTextRange": [
                0,
                7
            ],
            "qualifier_word": "if",
            "pre_condition": "(! RMButton)",
            "regular_condition": "(! RMButton)",
            "conditionTextRange": [
                9,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "post_condition": "(! RM & expirationPhaseStart)",
            "responseTextRange": [
                35,
                68
            ],
            "diagramVariables": "M = <b><i>(RM)</i></b>,, TC = <b><i>(! RMButton)</i></b>, Response = <b><i>(! RM & expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(RM)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(! RMButton)</i></b> is true and any point in the interval where <b><i>(! RMButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "RM",
            "scope_mode_coco": "RM",
            "scope_mode_ft": "RM",
            "regular_condition_unexp_pt": "(! RMButton)",
            "regular_condition_unexp_ft": "(! RMButton)",
            "regular_condition_SMV_pt": "(! RMButton)",
            "regular_condition_SMV_ft": "(! RMButton)",
            "regular_condition_coco_smv": "(! RMButton)",
            "regular_condition_coco": "( not RMButton)",
            "post_condition_unexp_pt": "((! RM) & expirationPhaseStart)",
            "post_condition_unexp_ft": "((! RM) & expirationPhaseStart)",
            "post_condition_SMV_pt": "((! RM) & expirationPhaseStart)",
            "post_condition_SMV_ft": "((! RM) & expirationPhaseStart)",
            "post_condition_coco_smv": "((! RM) & expirationPhaseStart)",
            "post_condition_coco": "(( not RM) and expirationPhaseStart)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_RM & (! LAST))) | (X (((Lin_RM | LAST) V (((! (! RMButton)) & ((! LAST) & ((X (! RMButton)) & (! (Lin_RM | LAST))))) -> ((X ((! (Lin_RM | LAST)) U ((! RM) & expirationPhaseStart))) & (! (Lin_RM | LAST))))) & ((! RMButton) -> ((! (Lin_RM | LAST)) U ((! RM) & expirationPhaseStart))))))) & (RM -> (((Lin_RM | LAST) V (((! (! RMButton)) & ((! LAST) & ((X (! RMButton)) & (! (Lin_RM | LAST))))) -> ((X ((! (Lin_RM | LAST)) U ((! RM) & expirationPhaseStart))) & (! (Lin_RM | LAST))))) & ((! RMButton) -> ((! (Lin_RM | LAST)) U ((! RM) & expirationPhaseStart))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_RM -> (Y (((! (! RMButton)) S ((! (! RMButton)) & Fin_RM)) | (! ((! ((! RM) & expirationPhaseStart)) S ((! ((! RM) & expirationPhaseStart)) & ((! RMButton) & ((Y (! (! RMButton))) | Fin_RM))))))))) & (((! Lin_RM) S ((! Lin_RM) & Fin_RM)) -> (((! (! RMButton)) S ((! (! RMButton)) & Fin_RM)) | (! ((! ((! RM) & expirationPhaseStart)) S ((! ((! RM) & expirationPhaseStart)) & ((! RMButton) & ((Y (! (! RMButton))) | Fin_RM))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! RM) & (Y RM)) -> (Y ((RMButton S (RMButton & (RM & (Z (! RM))))) | (! ((! ((! RM) & expirationPhaseStart)) S ((! ((! RM) & expirationPhaseStart)) & ((! RMButton) & ((Y RMButton) | (RM & (Z (! RM)))))))))))) & (((! ((! RM) & (Y RM))) S ((! ((! RM) & (Y RM))) & (RM & (Z (! RM))))) -> ((RMButton S (RMButton & (RM & (Z (! RM))))) | (! ((! ((! RM) & expirationPhaseStart)) S ((! ((! RM) & expirationPhaseStart)) & ((! RMButton) & ((Y RMButton) | (RM & (Z (! RM)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! RM) & (Y RM)) -> (Y (((! (! RMButton)) S ((! (! RMButton)) & (RM & ((! (Y TRUE)) | (Y (! RM)))))) | (! ((! ((! RM) & expirationPhaseStart)) S ((! ((! RM) & expirationPhaseStart)) & ((! RMButton) & ((Y (! (! RMButton))) | (RM & ((! (Y TRUE)) | (Y (! RM)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! RM) & (! LAST)) & (X RM)) & (! LAST))) | (X (((((RM & (! LAST)) & (X (! RM))) | LAST) V (((! (! RMButton)) & ((! LAST) & ((X (! RMButton)) & (! (((RM & (! LAST)) & (X (! RM))) | LAST))))) -> ((X ((! (((RM & (! LAST)) & (X (! RM))) | LAST)) U ((! RM) & expirationPhaseStart))) & (! (((RM & (! LAST)) & (X (! RM))) | LAST))))) & ((! RMButton) -> ((! (((RM & (! LAST)) & (X (! RM))) | LAST)) U ((! RM) & expirationPhaseStart))))))) & (RM -> (((((RM & (! LAST)) & (X (! RM))) | LAST) V (((! (! RMButton)) & ((! LAST) & ((X (! RMButton)) & (! (((RM & (! LAST)) & (X (! RM))) | LAST))))) -> ((X ((! (((RM & (! LAST)) & (X (! RM))) | LAST)) U ((! RM) & expirationPhaseStart))) & (! (((RM & (! LAST)) & (X (! RM))) | LAST))))) & ((! RMButton) -> ((! (((RM & (! LAST)) & (X (! RM))) | LAST)) U ((! RM) & expirationPhaseStart))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! RM) ) & (X RM))) | (X ((((RM ) & (X (! RM))) V (((! (! RMButton)) & ((X (! RMButton)) & (! ((RM ) & (X (! RM)))))) -> ((X ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart))) & (! ((RM ) & (X (! RM))))))) & ((! RMButton) -> ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart))))))) & (RM -> ((((RM ) & (X (! RM))) V (((! (! RMButton)) & ((X (! RMButton)) & (! ((RM ) & (X (! RM)))))) -> ((X ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart))) & (! ((RM ) & (X (! RM))))))) & ((! RMButton) -> ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! RM) ) & (X RM))) | (X ((F ((RM ) & (X (! RM)))) -> ((((RM ) & (X (! RM))) V (((! (! RMButton)) & ((X (! RMButton)) & (! ((RM ) & (X (! RM)))))) -> ((X ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart))) & (! ((RM ) & (X (! RM))))))) & ((! RMButton) -> ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart)))))))) & (RM -> ((F ((RM ) & (X (! RM)))) -> ((((RM ) & (X (! RM))) V (((! (! RMButton)) & ((X (! RMButton)) & (! ((RM ) & (X (! RM)))))) -> ((X ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart))) & (! ((RM ) & (X (! RM))))))) & ((! RMButton) -> ((! ((RM ) & (X (! RM)))) U ((! RM) & expirationPhaseStart)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! RM) & (! LAST)) & (X RM)) & (! LAST))) | (X (((! LAST) U ((RM & (! LAST)) & (X (! RM)))) -> ((((RM & (! LAST)) & (X (! RM))) V (((! (! RMButton)) & ((! LAST) & ((X (! RMButton)) & (! ((RM & (! LAST)) & (X (! RM))))))) -> ((X ((! ((RM & (! LAST)) & (X (! RM)))) U ((! RM) & expirationPhaseStart))) & (! ((RM & (! LAST)) & (X (! RM))))))) & ((! RMButton) -> ((! ((RM & (! LAST)) & (X (! RM)))) U ((! RM) & expirationPhaseStart)))))))) & (RM -> (((! LAST) U ((RM & (! LAST)) & (X (! RM)))) -> ((((RM & (! LAST)) & (X (! RM))) V (((! (! RMButton)) & ((! LAST) & ((X (! RMButton)) & (! ((RM & (! LAST)) & (X (! RM))))))) -> ((X ((! ((RM & (! LAST)) & (X (! RM)))) U ((! RM) & expirationPhaseStart))) & (! ((RM & (! LAST)) & (X (! RM))))))) & ((! RMButton) -> ((! ((RM & (! LAST)) & (X (! RM)))) U ((! RM) & expirationPhaseStart)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not RM) and (YtoPre(RM))) => (YtoPre((SI( (RM and (FTP or (YtoPre( not RM)))), ( not ( not RMButton)) )) or ( not (SI( (( not RMButton) and ((YtoPre( not ( not RMButton))) or (RM and (FTP or (YtoPre( not RM)))))), ( not (( not RM) and expirationPhaseStart)) ))))))) and ((SI( (RM and (FTP or (YtoPre( not RM)))), ( not (( not RM) and (YtoPre(RM)))) )) => ((SI( (RM and (FTP or (YtoPre( not RM)))), ( not ( not RMButton)) )) or ( not (SI( (( not RMButton) and ((YtoPre( not ( not RMButton))) or (RM and (FTP or (YtoPre( not RM)))))), ( not (( not RM) and expirationPhaseStart)) ))))))",
            "component": "System"
        },
        "_id": "c0e2a240-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT40",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "When the ventilator is in an expiration state the in valve shall be closed (pressure 0) and the out valve shall be open.\nRationale: The ventilator opens the out valve to allow the patient to expirate, while the in valve is closed to avoid air in.",
        "comments": "",
        "fulltext": "while expiratoryState System shall satisfy inValveClose & outValveOpen",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "expiratoryState",
                "inValveClose",
                "outValveOpen"
            ],
            "scope_mode": "(expiratoryState)",
            "scopeTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "post_condition": "(inValveClose & outValveOpen)",
            "responseTextRange": [
                35,
                69
            ],
            "diagramVariables": "M = <b><i>(expiratoryState)</i></b>,, Response = <b><i>(inValveClose & outValveOpen)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(expiratoryState)</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "expiratoryState",
            "scope_mode_coco": "expiratoryState",
            "scope_mode_ft": "expiratoryState",
            "post_condition_unexp_pt": "(inValveClose & outValveOpen)",
            "post_condition_unexp_ft": "(inValveClose & outValveOpen)",
            "post_condition_SMV_pt": "(inValveClose & outValveOpen)",
            "post_condition_SMV_ft": "(inValveClose & outValveOpen)",
            "post_condition_coco_smv": "(inValveClose & outValveOpen)",
            "post_condition_coco": "(inValveClose and outValveOpen)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_expiratoryState & (! LAST))) | (X ((! (Lin_expiratoryState | LAST)) U (inValveClose & outValveOpen))))) & (expiratoryState -> ((! (Lin_expiratoryState | LAST)) U (inValveClose & outValveOpen))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_expiratoryState -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & Fin_expiratoryState)))))) & (((! Lin_expiratoryState) S ((! Lin_expiratoryState) & Fin_expiratoryState)) -> (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & Fin_expiratoryState)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! expiratoryState) & (Y expiratoryState)) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & (expiratoryState & (Z (! expiratoryState))))))))) & (((! ((! expiratoryState) & (Y expiratoryState))) S ((! ((! expiratoryState) & (Y expiratoryState))) & (expiratoryState & (Z (! expiratoryState))))) -> (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & (expiratoryState & (Z (! expiratoryState))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! expiratoryState) & (Y expiratoryState)) -> (Y (! ((! (inValveClose & outValveOpen)) S ((! (inValveClose & outValveOpen)) & (expiratoryState & ((! (Y TRUE)) | (Y (! expiratoryState))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! expiratoryState) & (! LAST)) & (X expiratoryState)) & (! LAST))) | (X ((! (((expiratoryState & (! LAST)) & (X (! expiratoryState))) | LAST)) U (inValveClose & outValveOpen))))) & (expiratoryState -> ((! (((expiratoryState & (! LAST)) & (X (! expiratoryState))) | LAST)) U (inValveClose & outValveOpen))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! expiratoryState) ) & (X expiratoryState))) | (X ((! ((expiratoryState ) & (X (! expiratoryState)))) U (inValveClose & outValveOpen))))) & (expiratoryState -> ((! ((expiratoryState ) & (X (! expiratoryState)))) U (inValveClose & outValveOpen))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! expiratoryState) ) & (X expiratoryState))) | (X ((F ((expiratoryState ) & (X (! expiratoryState)))) -> ((! ((expiratoryState ) & (X (! expiratoryState)))) U (inValveClose & outValveOpen)))))) & (expiratoryState -> ((F ((expiratoryState ) & (X (! expiratoryState)))) -> ((! ((expiratoryState ) & (X (! expiratoryState)))) U (inValveClose & outValveOpen)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! expiratoryState) & (! LAST)) & (X expiratoryState)) & (! LAST))) | (X (((! LAST) U ((expiratoryState & (! LAST)) & (X (! expiratoryState)))) -> ((! ((expiratoryState & (! LAST)) & (X (! expiratoryState)))) U (inValveClose & outValveOpen)))))) & (expiratoryState -> (((! LAST) U ((expiratoryState & (! LAST)) & (X (! expiratoryState)))) -> ((! ((expiratoryState & (! LAST)) & (X (! expiratoryState)))) U (inValveClose & outValveOpen)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not expiratoryState) and (YtoPre(expiratoryState))) => (YtoPre( not (SI( (expiratoryState and (FTP or (YtoPre( not expiratoryState)))), ( not (inValveClose and outValveOpen)) )))))) and ((SI( (expiratoryState and (FTP or (YtoPre( not expiratoryState)))), ( not (( not expiratoryState) and (YtoPre(expiratoryState)))) )) => ( not (SI( (expiratoryState and (FTP or (YtoPre( not expiratoryState)))), ( not (inValveClose and outValveOpen)) )))))",
            "component": "System"
        },
        "_id": "c0e2c950-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT2",
        "parent_reqid": "FUN5",
        "project": "Ventilator v0.5",
        "rationale": "The transition to Start-up Mode shall be allowed by pushing the power button located on the back side of the ventilator unit to turn it on",
        "comments": "Oisín: The wording of \"shall be allowed\" made me decide to write this requirement as a negative - the system cannot turn on unless the powerButton is pressed. Otherwise this just translates as a less detailed (and potentially contradictory) version of FUN5",
        "fulltext": "when powerOff & !powerButton System shall satisfy !StartUpMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerOff",
                "powerButton",
                "StartUpMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(powerOff & ! powerButton)",
            "regular_condition": "(powerOff & ! powerButton)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "System",
            "componentTextRange": [
                29,
                34
            ],
            "post_condition": "(! StartUpMode)",
            "responseTextRange": [
                42,
                61
            ],
            "diagramVariables": "TC = <b><i>(powerOff & ! powerButton)</i></b>, Response = <b><i>(! StartUpMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerOff & ! powerButton)</i></b> is true and any point in the interval where <b><i>(powerOff & ! powerButton)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(powerOff & (! powerButton))",
            "regular_condition_unexp_ft": "(powerOff & (! powerButton))",
            "regular_condition_SMV_pt": "(powerOff & (! powerButton))",
            "regular_condition_SMV_ft": "(powerOff & (! powerButton))",
            "regular_condition_coco_smv": "(powerOff & (! powerButton))",
            "regular_condition_coco": "(powerOff and ( not powerButton))",
            "post_condition_unexp_pt": "(! StartUpMode)",
            "post_condition_unexp_ft": "(! StartUpMode)",
            "post_condition_SMV_pt": "(! StartUpMode)",
            "post_condition_SMV_ft": "(! StartUpMode)",
            "post_condition_coco_smv": "(! StartUpMode)",
            "post_condition_coco": "( not StartUpMode)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (powerOff & (! powerButton))) & ((! LAST) & (X (powerOff & (! powerButton))))) -> (X ((! LAST) U (! StartUpMode))))) & ((powerOff & (! powerButton)) -> ((! LAST) U (! StartUpMode))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (powerOff & (! powerButton)))) | (! ((! (! StartUpMode)) S ((! (! StartUpMode)) & ((powerOff & (! powerButton)) & ((Y (! (powerOff & (! powerButton)))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (powerOff & (! powerButton)))) | (! (StartUpMode S (StartUpMode & ((powerOff & (! powerButton)) & ((Y (! (powerOff & (! powerButton)))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (powerOff & (! powerButton)))) | (! ((! (! StartUpMode)) S ((! (! StartUpMode)) & ((powerOff & (! powerButton)) & ((Y (! (powerOff & (! powerButton)))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (powerOff & (! powerButton))) & ((! LAST) & (X (powerOff & (! powerButton))))) -> (X ((! LAST) U (! StartUpMode))))) & ((powerOff & (! powerButton)) -> ((! LAST) U (! StartUpMode))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (powerOff & (! powerButton))) & (X (powerOff & (! powerButton)))) -> (X (F (! StartUpMode))))) & ((powerOff & (! powerButton)) -> (F (! StartUpMode))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (powerOff & (! powerButton))) & (X (powerOff & (! powerButton)))) -> (X (F (! StartUpMode))))) & ((powerOff & (! powerButton)) -> (F (! StartUpMode))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (powerOff & (! powerButton))) & ((! LAST) & (X (powerOff & (! powerButton))))) -> (X ((! LAST) U (! StartUpMode))))) & ((powerOff & (! powerButton)) -> ((! LAST) U (! StartUpMode))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (powerOff and ( not powerButton)))) or ( not (SI( ((powerOff and ( not powerButton)) and ((YtoPre( not (powerOff and ( not powerButton)))) or FTP)), ( not ( not StartUpMode)) ))))",
            "component": "System"
        },
        "_id": "c0e2f060-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT41_2",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "When inspiratory pause timeout (max_ins_pause) is over, the cycle shall proceed immediately to expiration.\nRationale: The timeout prevents stopping the patient breath cycle in case of human error.",
        "comments": "Oisín, v0.5: I feel like FUN29 combining these into one requirement is a lot cleaner. Also I don't understand why this isn't a child of FUN29. Note that max_ins_pause is 40 seconds.",
        "fulltext": "when inspiratoryPause System shall after 40 seconds satisfy !inspiratoryPause & expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "after",
            "response": "satisfaction",
            "variables": [
                "inspiratoryPause",
                "expirationPhaseStart"
            ],
            "qualifier_word": "when",
            "pre_condition": "(inspiratoryPause)",
            "regular_condition": "(inspiratoryPause)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "duration": "40",
            "timingTextRange": [
                35,
                50
            ],
            "post_condition": "(! inspiratoryPause & expirationPhaseStart)",
            "responseTextRange": [
                52,
                99
            ],
            "diagramVariables": "TC = <b><i>(inspiratoryPause)</i></b>,  n = <b><i>40</i></b>, Response = <b><i>(! inspiratoryPause & expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPause)</i></b> is true and any point in the interval where <b><i>(inspiratoryPause)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points with distance <=<b><i>40</i></b> from the trigger (i.e., trigger, trigger+1, ..., and trigger+<b><i>40</i></b>). Moreover, RES must hold at the point that is at distance <b><i>40</i></b>+1 from the trigger, that is, trigger+<b><i>40</i></b>+1, except if the end of the interval occurs earlier.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_after_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "inspiratoryPause",
            "regular_condition_unexp_ft": "inspiratoryPause",
            "regular_condition_SMV_pt": "inspiratoryPause",
            "regular_condition_SMV_ft": "inspiratoryPause",
            "regular_condition_coco_smv": "inspiratoryPause",
            "regular_condition_coco": "inspiratoryPause",
            "post_condition_unexp_pt": "((! inspiratoryPause) & expirationPhaseStart)",
            "post_condition_unexp_ft": "((! inspiratoryPause) & expirationPhaseStart)",
            "post_condition_SMV_pt": "((! inspiratoryPause) & expirationPhaseStart)",
            "post_condition_SMV_ft": "((! inspiratoryPause) & expirationPhaseStart)",
            "post_condition_coco_smv": "((! inspiratoryPause) & expirationPhaseStart)",
            "post_condition_coco": "(( not inspiratoryPause) and expirationPhaseStart)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_unexp_ft$ -> (((G[<=$duration$] (! $post_condition_unexp_ft$)) | (LAST V (! $post_condition_unexp_ft$))) & ((F[<=$duration$+1] $post_condition_unexp_ft$) | (F[<$duration$+1] LAST)))))",
            "ft": "((LAST V (((! inspiratoryPause) & ((! LAST) & (X inspiratoryPause))) -> (X (((G[<=40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (LAST V (! ((! inspiratoryPause) & expirationPhaseStart)))) & ((F[<=40+1] ((! inspiratoryPause) & expirationPhaseStart)) | (F[<40+1] LAST)))))) & (inspiratoryPause -> (((G[<=40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (LAST V (! ((! inspiratoryPause) & expirationPhaseStart)))) & ((F[<=40+1] ((! inspiratoryPause) & expirationPhaseStart)) | (F[<40+1] LAST)))))",
            "pt_fetched": "((H ((O[<=$duration$] ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) & (! $post_condition_unexp_pt$))) -> (O[<$duration$+1] (FTP | $post_condition_unexp_pt$)))))",
            "pt": "((H ((O[<=40] (inspiratoryPause & ((Y (! inspiratoryPause)) | FTP))) -> ((H (! inspiratoryPause)) | (! ((! inspiratoryPause) & expirationPhaseStart))))) & (H ((O[=40+1] ((inspiratoryPause & ((Y (! inspiratoryPause)) | FTP)) & (! ((! inspiratoryPause) & expirationPhaseStart)))) -> (O[<40+1] (FTP | ((! inspiratoryPause) & expirationPhaseStart))))))",
            "ptExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptExpanded": "((H ((O[0,40] (inspiratoryPause & ((Y (! inspiratoryPause)) | (! (Y TRUE))))) -> ((H (! inspiratoryPause)) | (! ((! inspiratoryPause) & expirationPhaseStart))))) & (H ((O[41,41] ((inspiratoryPause & ((Y (! inspiratoryPause)) | (! (Y TRUE)))) & (! ((! inspiratoryPause) & expirationPhaseStart)))) -> (O[0,40] ((! (Y TRUE)) | ((! inspiratoryPause) & expirationPhaseStart))))))",
            "ptFinBtwExpanded_fetched": "((H ((O[<=$duration$] ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))) & (H ((O[=$duration$+1] (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) & (! $post_condition_SMV_pt$))) -> (O[<$duration$+1] ((! (Y TRUE)) | $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "((H ((O[0,40] (inspiratoryPause & ((Y (! inspiratoryPause)) | (! (Y TRUE))))) -> ((H (! inspiratoryPause)) | (! ((! inspiratoryPause) & expirationPhaseStart))))) & (H ((O[41,41] ((inspiratoryPause & ((Y (! inspiratoryPause)) | (! (Y TRUE)))) & (! ((! inspiratoryPause) & expirationPhaseStart)))) -> (O[0,40] ((! (Y TRUE)) | ((! inspiratoryPause) & expirationPhaseStart))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftExpanded": "((LAST V (((! inspiratoryPause) & ((! LAST) & (X inspiratoryPause))) -> (X (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (LAST V (! ((! inspiratoryPause) & expirationPhaseStart)))) & ((F[0,41] ((! inspiratoryPause) & expirationPhaseStart)) | (F[0,40] LAST)))))) & (inspiratoryPause -> (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (LAST V (! ((! inspiratoryPause) & expirationPhaseStart)))) & ((F[0,41] ((! inspiratoryPause) & expirationPhaseStart)) | (F[0,40] LAST)))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! inspiratoryPause) & (X inspiratoryPause)) -> (X (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (G (! ((! inspiratoryPause) & expirationPhaseStart)))) & (F[0,41] ((! inspiratoryPause) & expirationPhaseStart)))))) & (inspiratoryPause -> (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (G (! ((! inspiratoryPause) & expirationPhaseStart)))) & (F[0,41] ((! inspiratoryPause) & expirationPhaseStart)))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (G (! $post_condition_SMV_ft$))) & (F[<=$duration$+1] $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! inspiratoryPause) & (X inspiratoryPause)) -> (X (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (G (! ((! inspiratoryPause) & expirationPhaseStart)))) & (F[0,41] ((! inspiratoryPause) & expirationPhaseStart)))))) & (inspiratoryPause -> (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (G (! ((! inspiratoryPause) & expirationPhaseStart)))) & (F[0,41] ((! inspiratoryPause) & expirationPhaseStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))) & ($regular_condition_SMV_ft$ -> (((G[<=$duration$] (! $post_condition_SMV_ft$)) | (LAST V (! $post_condition_SMV_ft$))) & ((F[<=$duration$+1] $post_condition_SMV_ft$) | (F[<$duration$+1] LAST)))))",
            "ftFinBtwExpanded": "((LAST V (((! inspiratoryPause) & ((! LAST) & (X inspiratoryPause))) -> (X (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (LAST V (! ((! inspiratoryPause) & expirationPhaseStart)))) & ((F[0,41] ((! inspiratoryPause) & expirationPhaseStart)) | (F[0,40] LAST)))))) & (inspiratoryPause -> (((G[0,40] (! ((! inspiratoryPause) & expirationPhaseStart))) | (LAST V (! ((! inspiratoryPause) & expirationPhaseStart)))) & ((F[0,41] ((! inspiratoryPause) & expirationPhaseStart)) | (F[0,40] LAST)))))",
            "CoCoSpecCode_fetched": "((H((OT($duration$,0,($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)))) => ((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))) and (H((OT($duration$+1,$duration$+1,(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) and ( not $post_condition_coco$)))) => (OT($duration$,0,(FTP or $post_condition_coco$))))))",
            "CoCoSpecCode": "((H((OT(40,0,(inspiratoryPause and ((YtoPre( not inspiratoryPause)) or FTP)))) => ((H( not inspiratoryPause)) or ( not (( not inspiratoryPause) and expirationPhaseStart))))) and (H((OT(40+1,40+1,((inspiratoryPause and ((YtoPre( not inspiratoryPause)) or FTP)) and ( not (( not inspiratoryPause) and expirationPhaseStart))))) => (OT(40,0,(FTP or (( not inspiratoryPause) and expirationPhaseStart)))))))",
            "component": "System"
        },
        "_id": "c0e2f061-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT29",
        "parent_reqid": "FUN24",
        "project": "Ventilator v0.5",
        "rationale": "The Pressure Support Ventilation (PSV) mode shall support the breathing of the patient with positive pressure up to a peak value of P_inspPSV while the patient triggers every breath and maintains control of the respiratory rate.\nRationale: PSV is not suitable for patients unable to initiate breaths on their own.",
        "comments": "Oisín, v0.5: Much like FUN24, not really sure how to formalize this.",
        "fulltext": "",
        "semantics": {},
        "_id": "c0e31770-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT36_3",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "min_exp_time_psv shall be the half of the last inspiration time. min_exp_time_psv shall be in the interval [0.4 : 2] sec.\nRationale: The min exp time psv prevents moving immediately to inspiration allowing the patient to expirate.",
        "comments": "Oisín, v0.5: Making use of the inspClock variable I created, assuming it doesn't get reset until the start of the inspiratory phase.",
        "fulltext": "in PSVMode System shall satisfy minExpiratoryTime >= 0.4 & minExpiratoryTime <= 2 & (expiratoryPhase => minExpiratoryTime = inspClock/2)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "minExpiratoryTime",
                "expiratoryPhase",
                "inspClock"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "component_name": "System",
            "componentTextRange": [
                11,
                16
            ],
            "post_condition": "(minExpiratoryTime >= 0.4 & minExpiratoryTime <= 2 & ( expiratoryPhase => minExpiratoryTime = inspClock / 2 ))",
            "responseTextRange": [
                24,
                135
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, Response = <b><i>(minExpiratoryTime >= 0.4 & minExpiratoryTime <= 2 & ( expiratoryPhase => minExpiratoryTime = inspClock / 2 ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "post_condition_unexp_pt": "(((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))",
            "post_condition_unexp_ft": "(((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))",
            "post_condition_SMV_pt": "(((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))",
            "post_condition_SMV_ft": "(((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))",
            "post_condition_coco_smv": "(((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))",
            "post_condition_coco": "(((minExpiratoryTime >= 0.4) and (minExpiratoryTime <= 2)) and (expiratoryPhase => (minExpiratoryTime = ( inspClock / 2 ))))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X ((! (Lin_PSVMode | LAST)) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2)))))))) & (PSVMode -> ((! (Lin_PSVMode | LAST)) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_PSVMode -> (Y (! ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) S ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) & Fin_PSVMode)))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (! ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) S ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) & Fin_PSVMode)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (! ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) S ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) & (PSVMode & (Z (! PSVMode))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (! ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) S ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) & (PSVMode & (Z (! PSVMode))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (! ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) S ((! (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2)))))))) & (PSVMode -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((! ((PSVMode ) & (X (! PSVMode)))) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2)))))))) & (PSVMode -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((! ((PSVMode ) & (X (! PSVMode)))) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre( not (SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (((minExpiratoryTime >= 0.4) and (minExpiratoryTime <= 2)) and (expiratoryPhase => (minExpiratoryTime = ( inspClock / 2 ))))) )))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ( not (SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (((minExpiratoryTime >= 0.4) and (minExpiratoryTime <= 2)) and (expiratoryPhase => (minExpiratoryTime = ( inspClock / 2 ))))) )))))",
            "component": "System"
        },
        "_id": "c0e33e80-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT16",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "If the external ADC fails to initialize or reports an error\ncondition after a fixed number of retries (maximum 5),\nthe controller shall transition to the fail-safe mode.",
        "comments": "",
        "fulltext": "in StartUpMode if ADCRetries >= 5 & (ADCConnFailure | ADCError) System shall immediately satisfy FailSafeMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "StartUpMode",
                "ADCRetries",
                "ADCConnFailure",
                "ADCError",
                "FailSafeMode"
            ],
            "scope_mode": "StartUpMode",
            "scopeTextRange": [
                0,
                13
            ],
            "qualifier_word": "if",
            "pre_condition": "(ADCRetries >= 5 & ( ADCConnFailure | ADCError ))",
            "regular_condition": "(ADCRetries >= 5 & ( ADCConnFailure | ADCError ))",
            "conditionTextRange": [
                15,
                62
            ],
            "component_name": "System",
            "componentTextRange": [
                64,
                69
            ],
            "timingTextRange": [
                77,
                87
            ],
            "post_condition": "(FailSafeMode)",
            "responseTextRange": [
                89,
                108
            ],
            "diagramVariables": "M = <b><i>StartUpMode</i></b>,, TC = <b><i>(ADCRetries >= 5 & ( ADCConnFailure | ADCError ))</i></b>, Response = <b><i>(FailSafeMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>StartUpMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(ADCRetries >= 5 & ( ADCConnFailure | ADCError ))</i></b> is true and any point in the interval where <b><i>(ADCRetries >= 5 & ( ADCConnFailure | ADCError ))</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "StartUpMode",
            "scope_mode_coco": "StartUpMode",
            "scope_mode_ft": "StartUpMode",
            "regular_condition_unexp_pt": "((ADCRetries >= 5) & (ADCConnFailure | ADCError))",
            "regular_condition_unexp_ft": "((ADCRetries >= 5) & (ADCConnFailure | ADCError))",
            "regular_condition_SMV_pt": "((ADCRetries >= 5) & (ADCConnFailure | ADCError))",
            "regular_condition_SMV_ft": "((ADCRetries >= 5) & (ADCConnFailure | ADCError))",
            "regular_condition_coco_smv": "((ADCRetries >= 5) & (ADCConnFailure | ADCError))",
            "regular_condition_coco": "((ADCRetries >= 5) and (ADCConnFailure or ADCError))",
            "post_condition_unexp_pt": "FailSafeMode",
            "post_condition_unexp_ft": "FailSafeMode",
            "post_condition_SMV_pt": "FailSafeMode",
            "post_condition_SMV_ft": "FailSafeMode",
            "post_condition_coco_smv": "FailSafeMode",
            "post_condition_coco": "FailSafeMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_StartUpMode & (! LAST))) | (X (((Lin_StartUpMode | LAST) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((! LAST) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! (Lin_StartUpMode | LAST))))) -> ((X FailSafeMode) & (! (Lin_StartUpMode | LAST))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode))))) & (StartUpMode -> (((Lin_StartUpMode | LAST) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((! LAST) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! (Lin_StartUpMode | LAST))))) -> ((X FailSafeMode) & (! (Lin_StartUpMode | LAST))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_StartUpMode -> (Y (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | Fin_StartUpMode)) -> FailSafeMode) S (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | Fin_StartUpMode)) -> FailSafeMode) & Fin_StartUpMode))))) & (((! Lin_StartUpMode) S ((! Lin_StartUpMode) & Fin_StartUpMode)) -> (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | Fin_StartUpMode)) -> FailSafeMode) S (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | Fin_StartUpMode)) -> FailSafeMode) & Fin_StartUpMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) S (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) & (StartUpMode & (Z (! StartUpMode)))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) S (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode))))) -> FailSafeMode) & (StartUpMode & (Z (! StartUpMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))) -> FailSafeMode) S (((((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))) -> FailSafeMode) & (StartUpMode & ((! (Y TRUE)) | (Y (! StartUpMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((! LAST) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) -> ((X FailSafeMode) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode))))) & (StartUpMode -> (((((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((! LAST) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) -> ((X FailSafeMode) & (! (((StartUpMode & (! LAST)) & (X (! StartUpMode))) | LAST))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode))))) & (StartUpMode -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! StartUpMode) ) & (X StartUpMode))) | (X ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode)))))) & (StartUpMode -> ((F ((StartUpMode ) & (X (! StartUpMode)))) -> ((((StartUpMode ) & (X (! StartUpMode))) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! ((StartUpMode ) & (X (! StartUpMode)))))) -> ((X FailSafeMode) & (! ((StartUpMode ) & (X (! StartUpMode))))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! StartUpMode) & (! LAST)) & (X StartUpMode)) & (! LAST))) | (X (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((((StartUpMode & (! LAST)) & (X (! StartUpMode))) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((! LAST) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) -> ((X FailSafeMode) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode)))))) & (StartUpMode -> (((! LAST) U ((StartUpMode & (! LAST)) & (X (! StartUpMode)))) -> ((((StartUpMode & (! LAST)) & (X (! StartUpMode))) V (((! ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & ((! LAST) & ((X ((ADCRetries >= 5) & (ADCConnFailure | ADCError))) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) -> ((X FailSafeMode) & (! ((StartUpMode & (! LAST)) & (X (! StartUpMode))))))) & (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) -> FailSafeMode)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not StartUpMode) and (YtoPre(StartUpMode))) => (YtoPre(SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ((((ADCRetries >= 5) and (ADCConnFailure or ADCError)) and ((YtoPre( not ((ADCRetries >= 5) and (ADCConnFailure or ADCError)))) or (StartUpMode and (FTP or (YtoPre( not StartUpMode)))))) => FailSafeMode) ))))) and ((SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ( not (( not StartUpMode) and (YtoPre(StartUpMode)))) )) => (SI( (StartUpMode and (FTP or (YtoPre( not StartUpMode)))), ((((ADCRetries >= 5) and (ADCConnFailure or ADCError)) and ((YtoPre( not ((ADCRetries >= 5) and (ADCConnFailure or ADCError)))) or (StartUpMode and (FTP or (YtoPre( not StartUpMode)))))) => FailSafeMode) ))))",
            "component": "System"
        },
        "_id": "c0e36590-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1_4",
        "parent_reqid": "FUN19",
        "project": "Ventilator v0.5",
        "rationale": "Pressure Controlled Ventilation Mode: Pressure Controlled Ventilation mode is used when patients have no spontaneous respiration.",
        "comments": "Oisín: You could make this requirement something like \"if noSpontaneousRespiration System shall satisfy PCVMode\" but that doesn't seem great",
        "fulltext": "",
        "semantics": {},
        "_id": "c0e38ca0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT37",
        "parent_reqid": "FUN27",
        "project": "Ventilator v0.5",
        "rationale": "If the patient does not trigger a breath within the time of the apnea trigger window (apnea lag) the ventilator shall switch to PCV mode (apnea backup ventilation) with respiratory rate RR_AP, inspiratory pressure P_inspAP , and the ratio between inspiratory time and Expiratory time I:E_AP .\nRationale: Need to ensure patients continue to receive breaths. The operator needs to set the apnea backup PCV setting before starting the ventilation in PSV mode, otherwise the ventilator will not start operating.",
        "comments": "FUN27: in PSVMode when breathingTime >= apneaLagTime System shall satisfy apnea\n\nFUN27_2: if apnea System shall satisfy PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP\n\nOisín, v0.5: Essentially just combining FUN27 and FUN27_2.",
        "fulltext": "in PSVMode when expClock >= apneaLagTime System shall satisfy apnea & PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "expClock",
                "apneaLagTime",
                "apnea",
                "PCVMode",
                "RR",
                "RR_AP",
                "P_insp",
                "P_inspAP",
                "ItoE",
                "ItoE_AP"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(expClock >= apneaLagTime)",
            "regular_condition": "(expClock >= apneaLagTime)",
            "conditionTextRange": [
                11,
                39
            ],
            "component_name": "System",
            "componentTextRange": [
                41,
                46
            ],
            "post_condition": "(apnea & PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)",
            "responseTextRange": [
                54,
                126
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(expClock >= apneaLagTime)</i></b>, Response = <b><i>(apnea & PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(expClock >= apneaLagTime)</i></b> is true and any point in the interval where <b><i>(expClock >= apneaLagTime)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "(expClock >= apneaLagTime)",
            "regular_condition_unexp_ft": "(expClock >= apneaLagTime)",
            "regular_condition_SMV_pt": "(expClock >= apneaLagTime)",
            "regular_condition_SMV_ft": "(expClock >= apneaLagTime)",
            "regular_condition_coco_smv": "(expClock >= apneaLagTime)",
            "regular_condition_coco": "(expClock >= apneaLagTime)",
            "post_condition_unexp_pt": "((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_unexp_ft": "((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_pt": "((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_SMV_ft": "((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco_smv": "((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))",
            "post_condition_coco": "((((apnea and PCVMode) and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! (expClock >= apneaLagTime)) & ((! LAST) & ((X (expClock >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (Lin_PSVMode | LAST))))) & ((expClock >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! (expClock >= apneaLagTime)) & ((! LAST) & ((X (expClock >= apneaLagTime)) & (! (Lin_PSVMode | LAST))))) -> ((X ((! (Lin_PSVMode | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (Lin_PSVMode | LAST))))) & ((expClock >= apneaLagTime) -> ((! (Lin_PSVMode | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PSVMode -> (Y (((! (expClock >= apneaLagTime)) S ((! (expClock >= apneaLagTime)) & Fin_PSVMode)) | (! ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | Fin_PSVMode))))))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((! (expClock >= apneaLagTime)) S ((! (expClock >= apneaLagTime)) & Fin_PSVMode)) | (! ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | Fin_PSVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (expClock >= apneaLagTime)) S ((! (expClock >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((! (expClock >= apneaLagTime)) S ((! (expClock >= apneaLagTime)) & (PSVMode & (Z (! PSVMode))))) | (! ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((! (expClock >= apneaLagTime)) S ((! (expClock >= apneaLagTime)) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) | (! ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) S ((! ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))) & ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (expClock >= apneaLagTime)) & ((! LAST) & ((X (expClock >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((expClock >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! (expClock >= apneaLagTime)) & ((! LAST) & ((X (expClock >= apneaLagTime)) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & ((expClock >= apneaLagTime) -> ((! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST)) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! (expClock >= apneaLagTime)) & ((X (expClock >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((expClock >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! (expClock >= apneaLagTime)) & ((X (expClock >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((expClock >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (expClock >= apneaLagTime)) & ((X (expClock >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((expClock >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! (expClock >= apneaLagTime)) & ((X (expClock >= apneaLagTime)) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode ) & (X (! PSVMode))))))) & ((expClock >= apneaLagTime) -> ((! ((PSVMode ) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (expClock >= apneaLagTime)) & ((! LAST) & ((X (expClock >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((expClock >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! (expClock >= apneaLagTime)) & ((! LAST) & ((X (expClock >= apneaLagTime)) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)))) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & ((expClock >= apneaLagTime) -> ((! ((PSVMode & (! LAST)) & (X (! PSVMode)))) U ((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (expClock >= apneaLagTime)) )) or ( not (SI( ((expClock >= apneaLagTime) and ((YtoPre( not (expClock >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not ((((apnea and PCVMode) and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))) ))))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (expClock >= apneaLagTime)) )) or ( not (SI( ((expClock >= apneaLagTime) and ((YtoPre( not (expClock >= apneaLagTime))) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))), ( not ((((apnea and PCVMode) and (RR = RR_AP)) and (P_insp = P_inspAP)) and (ItoE = ItoE_AP))) ))))))",
            "component": "System"
        },
        "_id": "c0e3b3b0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT36_1",
        "parent_reqid": "FUN25",
        "project": "Ventilator v0.5",
        "rationale": "A new inspiration shall be initiated by a sudden drop in pressure above the inhale trigger sensitivity (ITS_PSV ), which shall be set by the user (i.e., it yields the condition drop(PAW) > ITS_PSV )).\nRationale: In a pressure-regulated ventilator, the speed of pressure drop initiated by the patient is the easiest way to detect the spontaneous breathing attempt as per ventilator experts.",
        "comments": "CONT26: while PSVMode when dropPAW > ITS_PCV System shall immediately satisfy patientBreathingRequest\n\nOisín, v0.5: Duplicate of CONT26 for PSVMode. I added the \"& expiratoryPhase\" because of CONT36.",
        "fulltext": "while PSVMode & expiratoryPhase when dropPAW > ITS_PSV System shall immediately satisfy patientBreathingRequest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "expiratoryPhase",
                "dropPAW",
                "ITS_PSV",
                "patientBreathingRequest"
            ],
            "scope_mode": "(PSVMode & expiratoryPhase)",
            "scopeTextRange": [
                0,
                30
            ],
            "qualifier_word": "when",
            "pre_condition": "(dropPAW > ITS_PSV)",
            "regular_condition": "(dropPAW > ITS_PSV)",
            "conditionTextRange": [
                32,
                53
            ],
            "component_name": "System",
            "componentTextRange": [
                55,
                60
            ],
            "timingTextRange": [
                68,
                78
            ],
            "post_condition": "(patientBreathingRequest)",
            "responseTextRange": [
                80,
                110
            ],
            "diagramVariables": "M = <b><i>(PSVMode & expiratoryPhase)</i></b>,, TC = <b><i>(dropPAW > ITS_PSV)</i></b>, Response = <b><i>(patientBreathingRequest)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>(PSVMode & expiratoryPhase)</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(dropPAW > ITS_PSV)</i></b> is true and any point in the interval where <b><i>(dropPAW > ITS_PSV)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "(PSVMode & expiratoryPhase)",
            "scope_mode_coco": "(PSVMode and expiratoryPhase)",
            "scope_mode_ft": "(PSVMode & expiratoryPhase)",
            "regular_condition_unexp_pt": "(dropPAW > ITS_PSV)",
            "regular_condition_unexp_ft": "(dropPAW > ITS_PSV)",
            "regular_condition_SMV_pt": "(dropPAW > ITS_PSV)",
            "regular_condition_SMV_ft": "(dropPAW > ITS_PSV)",
            "regular_condition_coco_smv": "(dropPAW > ITS_PSV)",
            "regular_condition_coco": "(dropPAW > ITS_PSV)",
            "post_condition_unexp_pt": "patientBreathingRequest",
            "post_condition_unexp_ft": "patientBreathingRequest",
            "post_condition_SMV_pt": "patientBreathingRequest",
            "post_condition_SMV_ft": "patientBreathingRequest",
            "post_condition_coco_smv": "patientBreathingRequest",
            "post_condition_coco": "patientBreathingRequest",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_(PSVMode & expiratoryPhase) & (! LAST))) | (X (((Lin_(PSVMode & expiratoryPhase) | LAST) V (((! (dropPAW > ITS_PSV)) & ((! LAST) & ((X (dropPAW > ITS_PSV)) & (! (Lin_(PSVMode & expiratoryPhase) | LAST))))) -> ((X patientBreathingRequest) & (! (Lin_(PSVMode & expiratoryPhase) | LAST))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest))))) & ((PSVMode & expiratoryPhase) -> (((Lin_(PSVMode & expiratoryPhase) | LAST) V (((! (dropPAW > ITS_PSV)) & ((! LAST) & ((X (dropPAW > ITS_PSV)) & (! (Lin_(PSVMode & expiratoryPhase) | LAST))))) -> ((X patientBreathingRequest) & (! (Lin_(PSVMode & expiratoryPhase) | LAST))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_(PSVMode & expiratoryPhase) -> (Y ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | Fin_(PSVMode & expiratoryPhase))) -> patientBreathingRequest) S ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | Fin_(PSVMode & expiratoryPhase))) -> patientBreathingRequest) & Fin_(PSVMode & expiratoryPhase)))))) & (((! Lin_(PSVMode & expiratoryPhase)) S ((! Lin_(PSVMode & expiratoryPhase)) & Fin_(PSVMode & expiratoryPhase))) -> ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | Fin_(PSVMode & expiratoryPhase))) -> patientBreathingRequest) S ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | Fin_(PSVMode & expiratoryPhase))) -> patientBreathingRequest) & Fin_(PSVMode & expiratoryPhase)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase))) -> (Y ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) -> patientBreathingRequest) S ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) -> patientBreathingRequest) & ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))))) & (((! ((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase)))) S ((! ((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase)))) & ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) -> ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) -> patientBreathingRequest) S ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) -> patientBreathingRequest) & ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase))) -> (Y ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & ((! (Y TRUE)) | (Y (! (PSVMode & expiratoryPhase))))))) -> patientBreathingRequest) S ((((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & ((! (Y TRUE)) | (Y (! (PSVMode & expiratoryPhase))))))) -> patientBreathingRequest) & ((PSVMode & expiratoryPhase) & ((! (Y TRUE)) | (Y (! (PSVMode & expiratoryPhase))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! (PSVMode & expiratoryPhase)) & (! LAST)) & (X (PSVMode & expiratoryPhase))) & (! LAST))) | (X ((((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) | LAST) V (((! (dropPAW > ITS_PSV)) & ((! LAST) & ((X (dropPAW > ITS_PSV)) & (! ((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) | LAST))))) -> ((X patientBreathingRequest) & (! ((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) | LAST))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest))))) & ((PSVMode & expiratoryPhase) -> ((((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) | LAST) V (((! (dropPAW > ITS_PSV)) & ((! LAST) & ((X (dropPAW > ITS_PSV)) & (! ((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) | LAST))))) -> ((X patientBreathingRequest) & (! ((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) | LAST))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! (PSVMode & expiratoryPhase)) ) & (X (PSVMode & expiratoryPhase)))) | (X (((((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))) V (((! (dropPAW > ITS_PSV)) & ((X (dropPAW > ITS_PSV)) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase))))))) -> ((X patientBreathingRequest) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest))))) & ((PSVMode & expiratoryPhase) -> (((((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))) V (((! (dropPAW > ITS_PSV)) & ((X (dropPAW > ITS_PSV)) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase))))))) -> ((X patientBreathingRequest) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! (PSVMode & expiratoryPhase)) ) & (X (PSVMode & expiratoryPhase)))) | (X ((F (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase))))) -> (((((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))) V (((! (dropPAW > ITS_PSV)) & ((X (dropPAW > ITS_PSV)) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase))))))) -> ((X patientBreathingRequest) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest)))))) & ((PSVMode & expiratoryPhase) -> ((F (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase))))) -> (((((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))) V (((! (dropPAW > ITS_PSV)) & ((X (dropPAW > ITS_PSV)) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase))))))) -> ((X patientBreathingRequest) & (! (((PSVMode & expiratoryPhase) ) & (X (! (PSVMode & expiratoryPhase)))))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! (PSVMode & expiratoryPhase)) & (! LAST)) & (X (PSVMode & expiratoryPhase))) & (! LAST))) | (X (((! LAST) U (((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase))))) -> (((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) V (((! (dropPAW > ITS_PSV)) & ((! LAST) & ((X (dropPAW > ITS_PSV)) & (! (((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))))))) -> ((X patientBreathingRequest) & (! (((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest)))))) & ((PSVMode & expiratoryPhase) -> (((! LAST) U (((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase))))) -> (((((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))) V (((! (dropPAW > ITS_PSV)) & ((! LAST) & ((X (dropPAW > ITS_PSV)) & (! (((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))))))) -> ((X patientBreathingRequest) & (! (((PSVMode & expiratoryPhase) & (! LAST)) & (X (! (PSVMode & expiratoryPhase)))))))) & ((dropPAW > ITS_PSV) -> patientBreathingRequest)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not (PSVMode and expiratoryPhase)) and (YtoPre((PSVMode and expiratoryPhase)))) => (YtoPre(SI( ((PSVMode and expiratoryPhase) and (FTP or (YtoPre( not (PSVMode and expiratoryPhase))))), (((dropPAW > ITS_PSV) and ((YtoPre( not (dropPAW > ITS_PSV))) or ((PSVMode and expiratoryPhase) and (FTP or (YtoPre( not (PSVMode and expiratoryPhase))))))) => patientBreathingRequest) ))))) and ((SI( ((PSVMode and expiratoryPhase) and (FTP or (YtoPre( not (PSVMode and expiratoryPhase))))), ( not (( not (PSVMode and expiratoryPhase)) and (YtoPre((PSVMode and expiratoryPhase))))) )) => (SI( ((PSVMode and expiratoryPhase) and (FTP or (YtoPre( not (PSVMode and expiratoryPhase))))), (((dropPAW > ITS_PSV) and ((YtoPre( not (dropPAW > ITS_PSV))) or ((PSVMode and expiratoryPhase) and (FTP or (YtoPre( not (PSVMode and expiratoryPhase))))))) => patientBreathingRequest) ))))",
            "component": "System"
        },
        "_id": "c0e3dac0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT7",
        "parent_reqid": "FUN23",
        "project": "Ventilator v0.5",
        "rationale": "The transition from PCV to PSV shall occur if ventilation is on, the transition from PCV to PSV shall occur at the end of a PCV inspiratory time if the change mode command has been received from the GUI.\nRationale: the doctor decides when the patient has some ability to breathe spontaneously.",
        "comments": "Oisín: It's possible that \"inspiratoryPhaseEnd\" shouldn't be used here, since that is used in FUN40 where the system is truncating the inspiration.",
        "fulltext": "in PCVMode if inspiratoryPhaseEnd & PSVModeSelected System shall satisfy ventilating & PSVMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "inspiratoryPhaseEnd",
                "PSVModeSelected",
                "ventilating",
                "PSVMode"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "if",
            "pre_condition": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "regular_condition": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "conditionTextRange": [
                11,
                50
            ],
            "component_name": "System",
            "componentTextRange": [
                52,
                57
            ],
            "post_condition": "(ventilating & PSVMode)",
            "responseTextRange": [
                65,
                93
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(inspiratoryPhaseEnd & PSVModeSelected)</i></b>, Response = <b><i>(ventilating & PSVMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(inspiratoryPhaseEnd & PSVModeSelected)</i></b> is true and any point in the interval where <b><i>(inspiratoryPhaseEnd & PSVModeSelected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "regular_condition_unexp_ft": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "regular_condition_SMV_pt": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "regular_condition_SMV_ft": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "regular_condition_coco_smv": "(inspiratoryPhaseEnd & PSVModeSelected)",
            "regular_condition_coco": "(inspiratoryPhaseEnd and PSVModeSelected)",
            "post_condition_unexp_pt": "(ventilating & PSVMode)",
            "post_condition_unexp_ft": "(ventilating & PSVMode)",
            "post_condition_SMV_pt": "(ventilating & PSVMode)",
            "post_condition_SMV_ft": "(ventilating & PSVMode)",
            "post_condition_coco_smv": "(ventilating & PSVMode)",
            "post_condition_coco": "(ventilating and PSVMode)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((! LAST) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))) & (! (Lin_PCVMode | LAST))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((! LAST) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))) & (! (Lin_PCVMode | LAST))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! (Lin_PCVMode | LAST)) U (ventilating & PSVMode))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! (inspiratoryPhaseEnd & PSVModeSelected)) S ((! (inspiratoryPhaseEnd & PSVModeSelected)) & Fin_PCVMode)) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! (inspiratoryPhaseEnd & PSVModeSelected)) S ((! (inspiratoryPhaseEnd & PSVModeSelected)) & Fin_PCVMode)) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! (inspiratoryPhaseEnd & PSVModeSelected)) S ((! (inspiratoryPhaseEnd & PSVModeSelected)) & (PCVMode & (Z (! PCVMode))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! (inspiratoryPhaseEnd & PSVModeSelected)) S ((! (inspiratoryPhaseEnd & PSVModeSelected)) & (PCVMode & (Z (! PCVMode))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! (inspiratoryPhaseEnd & PSVModeSelected)) S ((! (inspiratoryPhaseEnd & PSVModeSelected)) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! (ventilating & PSVMode)) S ((! (ventilating & PSVMode)) & ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((! LAST) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((! LAST) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U (ventilating & PSVMode))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode ) & (X (! PCVMode))))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! ((PCVMode ) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((! LAST) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! (inspiratoryPhaseEnd & PSVModeSelected)) & ((! LAST) & ((X (inspiratoryPhaseEnd & PSVModeSelected)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode))) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & ((inspiratoryPhaseEnd & PSVModeSelected) -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U (ventilating & PSVMode)))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (inspiratoryPhaseEnd and PSVModeSelected)) )) or ( not (SI( ((inspiratoryPhaseEnd and PSVModeSelected) and ((YtoPre( not (inspiratoryPhaseEnd and PSVModeSelected))) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not (ventilating and PSVMode)) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (inspiratoryPhaseEnd and PSVModeSelected)) )) or ( not (SI( ((inspiratoryPhaseEnd and PSVModeSelected) and ((YtoPre( not (inspiratoryPhaseEnd and PSVModeSelected))) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not (ventilating and PSVMode)) ))))))",
            "component": "System"
        },
        "_id": "c0e428e0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT8",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "The transition from PCV to VentilationOff shall occur if the user stops the ventilation in PCV mode.\nRationale: the ventilation stops when the user selects the stop command from the GUI.",
        "comments": "Oisín: I don't think there was a FUN requirement with this transition, if there is I couldn't see it. Took the name \"stopVentilation\" from the diagram, I'm sure that with \"VentilationOff\" won't get confusing at all.",
        "fulltext": "in PCVMode if stopVentilation System shall satisfy StandbyMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "PCVMode",
                "stopVentilation",
                "StandbyMode"
            ],
            "scope_mode": "PCVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "if",
            "pre_condition": "(stopVentilation)",
            "regular_condition": "(stopVentilation)",
            "conditionTextRange": [
                11,
                28
            ],
            "component_name": "System",
            "componentTextRange": [
                30,
                35
            ],
            "post_condition": "(StandbyMode)",
            "responseTextRange": [
                43,
                61
            ],
            "diagramVariables": "M = <b><i>PCVMode</i></b>,, TC = <b><i>(stopVentilation)</i></b>, Response = <b><i>(StandbyMode)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PCVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(stopVentilation)</i></b> is true and any point in the interval where <b><i>(stopVentilation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_null_satisfaction.svg",
            "scope_mode_pt": "PCVMode",
            "scope_mode_coco": "PCVMode",
            "scope_mode_ft": "PCVMode",
            "regular_condition_unexp_pt": "stopVentilation",
            "regular_condition_unexp_ft": "stopVentilation",
            "regular_condition_SMV_pt": "stopVentilation",
            "regular_condition_SMV_ft": "stopVentilation",
            "regular_condition_coco_smv": "stopVentilation",
            "regular_condition_coco": "stopVentilation",
            "post_condition_unexp_pt": "StandbyMode",
            "post_condition_unexp_ft": "StandbyMode",
            "post_condition_SMV_pt": "StandbyMode",
            "post_condition_SMV_ft": "StandbyMode",
            "post_condition_coco_smv": "StandbyMode",
            "post_condition_coco": "StandbyMode",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))))",
            "ft": "((LAST V ((! (Fin_PCVMode & (! LAST))) | (X (((Lin_PCVMode | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U StandbyMode)) & (! (Lin_PCVMode | LAST))))) & (stopVentilation -> ((! (Lin_PCVMode | LAST)) U StandbyMode)))))) & (PCVMode -> (((Lin_PCVMode | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (Lin_PCVMode | LAST))))) -> ((X ((! (Lin_PCVMode | LAST)) U StandbyMode)) & (! (Lin_PCVMode | LAST))))) & (stopVentilation -> ((! (Lin_PCVMode | LAST)) U StandbyMode)))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((! $regular_condition_unexp_pt$) S ((! $regular_condition_unexp_pt$) & Fin_$scope_mode_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))))))))",
            "pt": "((H (Lin_PCVMode -> (Y (((! stopVentilation) S ((! stopVentilation) & Fin_PCVMode)) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | Fin_PCVMode))))))))) & (((! Lin_PCVMode) S ((! Lin_PCVMode) & Fin_PCVMode)) -> (((! stopVentilation) S ((! stopVentilation) & Fin_PCVMode)) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | Fin_PCVMode))))))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))))",
            "ptExpanded": "((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! stopVentilation) S ((! stopVentilation) & (PCVMode & (Z (! PCVMode))))) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! stopVentilation) S ((! stopVentilation) & (PCVMode & (Z (! PCVMode))))) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & (Z (! PCVMode)))))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((! $regular_condition_SMV_pt$) S ((! $regular_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))))))",
            "ptFinBtwExpanded": "(H (((! PCVMode) & (Y PCVMode)) -> (Y (((! stopVentilation) S ((! stopVentilation) & (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))) | (! ((! StandbyMode) S ((! StandbyMode) & (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & ((! (Y TRUE)) | (Y (! PCVMode)))))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))))",
            "ftExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U StandbyMode)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (stopVentilation -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U StandbyMode)))))) & (PCVMode -> (((((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) -> ((X ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U StandbyMode)) & (! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST))))) & (stopVentilation -> ((! (((PCVMode & (! LAST)) & (X (! PCVMode))) | LAST)) U StandbyMode)))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))))",
            "ftInfAUExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((((PCVMode ) & (X (! PCVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (stopVentilation -> ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode)))))) & (PCVMode -> ((((PCVMode ) & (X (! PCVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (stopVentilation -> ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode)))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftInfBtwExpanded": "((G ((! (((! PCVMode) ) & (X PCVMode))) | (X ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (stopVentilation -> ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode))))))) & (PCVMode -> ((F ((PCVMode ) & (X (! PCVMode)))) -> ((((PCVMode ) & (X (! PCVMode))) V (((! stopVentilation) & ((X stopVentilation) & (! ((PCVMode ) & (X (! PCVMode)))))) -> ((X ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode)) & (! ((PCVMode ) & (X (! PCVMode))))))) & (stopVentilation -> ((! ((PCVMode ) & (X (! PCVMode)))) U StandbyMode))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PCVMode) & (! LAST)) & (X PCVMode)) & (! LAST))) | (X (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U StandbyMode)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (stopVentilation -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U StandbyMode))))))) & (PCVMode -> (((! LAST) U ((PCVMode & (! LAST)) & (X (! PCVMode)))) -> ((((PCVMode & (! LAST)) & (X (! PCVMode))) V (((! stopVentilation) & ((! LAST) & ((X stopVentilation) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) -> ((X ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U StandbyMode)) & (! ((PCVMode & (! LAST)) & (X (! PCVMode))))))) & (stopVentilation -> ((! ((PCVMode & (! LAST)) & (X (! PCVMode)))) U StandbyMode))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $regular_condition_coco$) )) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))), ( not $post_condition_coco$) ))))))",
            "CoCoSpecCode": "((H((( not PCVMode) and (YtoPre(PCVMode))) => (YtoPre((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not stopVentilation) )) or ( not (SI( (stopVentilation and ((YtoPre( not stopVentilation)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not StandbyMode) ))))))) and ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not (( not PCVMode) and (YtoPre(PCVMode)))) )) => ((SI( (PCVMode and (FTP or (YtoPre( not PCVMode)))), ( not stopVentilation) )) or ( not (SI( (stopVentilation and ((YtoPre( not stopVentilation)) or (PCVMode and (FTP or (YtoPre( not PCVMode)))))), ( not StandbyMode) ))))))",
            "component": "System"
        },
        "_id": "c0e428e1-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT30",
        "parent_reqid": "FUN24",
        "project": "Ventilator v0.5",
        "rationale": "The breath cycle shall start with the inspiration phase.",
        "comments": "Oisín, v0.5: Duplicate of CONT21 for PSV instead of PCV.",
        "fulltext": "in PSVMode when BreathingCycleStart System shall immediately satisfy inspiratoryPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "PSVMode",
                "BreathingCycleStart",
                "inspiratoryPhaseStart"
            ],
            "scope_mode": "PSVMode",
            "scopeTextRange": [
                0,
                9
            ],
            "qualifier_word": "when",
            "pre_condition": "(BreathingCycleStart)",
            "regular_condition": "(BreathingCycleStart)",
            "conditionTextRange": [
                11,
                34
            ],
            "component_name": "System",
            "componentTextRange": [
                36,
                41
            ],
            "timingTextRange": [
                49,
                59
            ],
            "post_condition": "(inspiratoryPhaseStart)",
            "responseTextRange": [
                61,
                89
            ],
            "diagramVariables": "M = <b><i>PSVMode</i></b>,, TC = <b><i>(BreathingCycleStart)</i></b>, Response = <b><i>(inspiratoryPhaseStart)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>PSVMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(BreathingCycleStart)</i></b> is true and any point in the interval where <b><i>(BreathingCycleStart)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "PSVMode",
            "scope_mode_coco": "PSVMode",
            "scope_mode_ft": "PSVMode",
            "regular_condition_unexp_pt": "BreathingCycleStart",
            "regular_condition_unexp_ft": "BreathingCycleStart",
            "regular_condition_SMV_pt": "BreathingCycleStart",
            "regular_condition_SMV_ft": "BreathingCycleStart",
            "regular_condition_coco_smv": "BreathingCycleStart",
            "regular_condition_coco": "BreathingCycleStart",
            "post_condition_unexp_pt": "inspiratoryPhaseStart",
            "post_condition_unexp_ft": "inspiratoryPhaseStart",
            "post_condition_SMV_pt": "inspiratoryPhaseStart",
            "post_condition_SMV_ft": "inspiratoryPhaseStart",
            "post_condition_coco_smv": "inspiratoryPhaseStart",
            "post_condition_coco": "inspiratoryPhaseStart",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))))",
            "ft": "((LAST V ((! (Fin_PSVMode & (! LAST))) | (X (((Lin_PSVMode | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (Lin_PSVMode | LAST))))) -> ((X inspiratoryPhaseStart) & (! (Lin_PSVMode | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))) & (PSVMode -> (((Lin_PSVMode | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (Lin_PSVMode | LAST))))) -> ((X inspiratoryPhaseStart) & (! (Lin_PSVMode | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) S ((($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$)) -> $post_condition_unexp_pt$) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_PSVMode -> (Y (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PSVMode)) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PSVMode)) -> inspiratoryPhaseStart) & Fin_PSVMode))))) & (((! Lin_PSVMode) S ((! Lin_PSVMode) & Fin_PSVMode)) -> (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PSVMode)) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | Fin_PSVMode)) -> inspiratoryPhaseStart) & Fin_PSVMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! PSVMode) & (Y PSVMode)) -> (Y (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhaseStart) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhaseStart) & (PSVMode & (Z (! PSVMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) S ((($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! PSVMode) & (Y PSVMode)) -> (Y (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) -> inspiratoryPhaseStart) S (((BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))) -> inspiratoryPhaseStart) & (PSVMode & ((! (Y TRUE)) | (Y (! PSVMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X inspiratoryPhaseStart) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))) & (PSVMode -> (((((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) -> ((X inspiratoryPhaseStart) & (! (((PSVMode & (! LAST)) & (X (! PSVMode))) | LAST))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((((PSVMode ) & (X (! PSVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PSVMode ) & (X (! PSVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))) & (PSVMode -> ((((PSVMode ) & (X (! PSVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PSVMode ) & (X (! PSVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftInfBtwExpanded": "((G ((! (((! PSVMode) ) & (X PSVMode))) | (X ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PSVMode ) & (X (! PSVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))) & (PSVMode -> ((F ((PSVMode ) & (X (! PSVMode)))) -> ((((PSVMode ) & (X (! PSVMode))) V (((! BreathingCycleStart) & ((X BreathingCycleStart) & (! ((PSVMode ) & (X (! PSVMode)))))) -> ((X inspiratoryPhaseStart) & (! ((PSVMode ) & (X (! PSVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$)))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! PSVMode) & (! LAST)) & (X PSVMode)) & (! LAST))) | (X (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X inspiratoryPhaseStart) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))) & (PSVMode -> (((! LAST) U ((PSVMode & (! LAST)) & (X (! PSVMode)))) -> ((((PSVMode & (! LAST)) & (X (! PSVMode))) V (((! BreathingCycleStart) & ((! LAST) & ((X BreathingCycleStart) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) -> ((X inspiratoryPhaseStart) & (! ((PSVMode & (! LAST)) & (X (! PSVMode))))))) & (BreathingCycleStart -> inspiratoryPhaseStart)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), (($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) => $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H((( not PSVMode) and (YtoPre(PSVMode))) => (YtoPre(SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ((BreathingCycleStart and ((YtoPre( not BreathingCycleStart)) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))) => inspiratoryPhaseStart) ))))) and ((SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ( not (( not PSVMode) and (YtoPre(PSVMode)))) )) => (SI( (PSVMode and (FTP or (YtoPre( not PSVMode)))), ((BreathingCycleStart and ((YtoPre( not BreathingCycleStart)) or (PSVMode and (FTP or (YtoPre( not PSVMode)))))) => inspiratoryPhaseStart) ))))",
            "component": "System"
        },
        "_id": "c0e44ff0-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT1_5",
        "parent_reqid": "FUN24",
        "project": "Ventilator v0.5",
        "rationale": "Pressure Support Ventilation Mode: Pressure Support Ventilation mode is used when the patients are able to initiate every breath and the machine supports them.",
        "comments": "Oisín: Same issue as CONT1_4",
        "fulltext": "",
        "semantics": {},
        "_id": "c0e47700-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT44",
        "parent_reqid": "FUN40",
        "project": "Ventilator v0.5",
        "rationale": "If PAW exceeds Max_Pinsp during inspiration, the cycle shall proceed immediately to expiration.",
        "comments": "",
        "fulltext": "if P_insp > MaxP_insp System shall satisfy inspiratoryPhaseEnd & expirationPhaseStart",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "P_insp",
                "MaxP_insp",
                "inspiratoryPhaseEnd",
                "expirationPhaseStart"
            ],
            "qualifier_word": "if",
            "pre_condition": "(P_insp > MaxP_insp)",
            "regular_condition": "(P_insp > MaxP_insp)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "System",
            "componentTextRange": [
                22,
                27
            ],
            "post_condition": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "responseTextRange": [
                35,
                84
            ],
            "diagramVariables": "TC = <b><i>(P_insp > MaxP_insp)</i></b>, Response = <b><i>(inspiratoryPhaseEnd & expirationPhaseStart)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(P_insp > MaxP_insp)</i></b> is true and any point in the interval where <b><i>(P_insp > MaxP_insp)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(P_insp > MaxP_insp)",
            "regular_condition_unexp_ft": "(P_insp > MaxP_insp)",
            "regular_condition_SMV_pt": "(P_insp > MaxP_insp)",
            "regular_condition_SMV_ft": "(P_insp > MaxP_insp)",
            "regular_condition_coco_smv": "(P_insp > MaxP_insp)",
            "regular_condition_coco": "(P_insp > MaxP_insp)",
            "post_condition_unexp_pt": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_unexp_ft": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_SMV_pt": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_SMV_ft": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_coco_smv": "(inspiratoryPhaseEnd & expirationPhaseStart)",
            "post_condition_coco": "(inspiratoryPhaseEnd and expirationPhaseStart)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (P_insp > MaxP_insp))) | (! ((! (inspiratoryPhaseEnd & expirationPhaseStart)) S ((! (inspiratoryPhaseEnd & expirationPhaseStart)) & ((P_insp > MaxP_insp) & ((Y (! (P_insp > MaxP_insp))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (P_insp > MaxP_insp)) & (X (P_insp > MaxP_insp))) -> (X (F (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> (F (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (P_insp > MaxP_insp)) & (X (P_insp > MaxP_insp))) -> (X (F (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> (F (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (P_insp > MaxP_insp)) & ((! LAST) & (X (P_insp > MaxP_insp)))) -> (X ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))) & ((P_insp > MaxP_insp) -> ((! LAST) U (inspiratoryPhaseEnd & expirationPhaseStart))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (P_insp > MaxP_insp))) or ( not (SI( ((P_insp > MaxP_insp) and ((YtoPre( not (P_insp > MaxP_insp))) or FTP)), ( not (inspiratoryPhaseEnd and expirationPhaseStart)) ))))",
            "component": "System"
        },
        "_id": "c0e49e10-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT11",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "Final State shall be reached by pushing the power button located on the back side of the ventilator unit to turn it off.\nRationale: the ventilator is turned off when the user pushes the power button on the ventilator unit",
        "comments": "Oisín: This is the first time the \"Final State\" is mentioned, it's not on any diagrams. I'm not going to propagate it to FUN4 and CONT46 for now.",
        "fulltext": "if powerOff System shall satisfy FinalState",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "powerOff",
                "FinalState"
            ],
            "qualifier_word": "if",
            "pre_condition": "(powerOff)",
            "regular_condition": "(powerOff)",
            "conditionTextRange": [
                0,
                10
            ],
            "component_name": "System",
            "componentTextRange": [
                12,
                17
            ],
            "post_condition": "(FinalState)",
            "responseTextRange": [
                25,
                42
            ],
            "diagramVariables": "TC = <b><i>(powerOff)</i></b>, Response = <b><i>(FinalState)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(powerOff)</i></b> is true and any point in the interval where <b><i>(powerOff)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "powerOff",
            "regular_condition_unexp_ft": "powerOff",
            "regular_condition_SMV_pt": "powerOff",
            "regular_condition_SMV_ft": "powerOff",
            "regular_condition_coco_smv": "powerOff",
            "regular_condition_coco": "powerOff",
            "post_condition_unexp_pt": "FinalState",
            "post_condition_unexp_ft": "FinalState",
            "post_condition_SMV_pt": "FinalState",
            "post_condition_SMV_ft": "FinalState",
            "post_condition_coco_smv": "FinalState",
            "post_condition_coco": "FinalState",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! powerOff) & ((! LAST) & (X powerOff))) -> (X ((! LAST) U FinalState)))) & (powerOff -> ((! LAST) U FinalState)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! powerOff)) | (! ((! FinalState) S ((! FinalState) & (powerOff & ((Y (! powerOff)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! powerOff)) | (! ((! FinalState) S ((! FinalState) & (powerOff & ((Y (! powerOff)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! powerOff)) | (! ((! FinalState) S ((! FinalState) & (powerOff & ((Y (! powerOff)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! powerOff) & ((! LAST) & (X powerOff))) -> (X ((! LAST) U FinalState)))) & (powerOff -> ((! LAST) U FinalState)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! powerOff) & (X powerOff)) -> (X (F FinalState)))) & (powerOff -> (F FinalState)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! powerOff) & (X powerOff)) -> (X (F FinalState)))) & (powerOff -> (F FinalState)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! powerOff) & ((! LAST) & (X powerOff))) -> (X ((! LAST) U FinalState)))) & (powerOff -> ((! LAST) U FinalState)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not powerOff)) or ( not (SI( (powerOff and ((YtoPre( not powerOff)) or FTP)), ( not FinalState) ))))",
            "component": "System"
        },
        "_id": "c0e4c520-c032-11ee-94bd-73ad2ddf8fb6"
    },
    {
        "reqid": "CONT11_1",
        "parent_reqid": "",
        "project": "Ventilator v0.5",
        "rationale": "During Final state, all parameters (if any) are to be safely stored before the final state is complete and the unit is de-energized.",
        "comments": "Oisín: I suppose this is related to FUN8: \"The system shall log key parameters, save them before being powered off and load them upon start-up....\". One could make an individual variable for each parameter mentioned in FUN8's sub-requirements, but I don't want to.",
        "fulltext": "in FinalState System shall satisfy parametersStored & off",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "FinalState",
                "parametersStored",
                "off"
            ],
            "scope_mode": "FinalState",
            "scopeTextRange": [
                0,
                12
            ],
            "component_name": "System",
            "componentTextRange": [
                14,
                19
            ],
            "post_condition": "(parametersStored & off)",
            "responseTextRange": [
                27,
                56
            ],
            "diagramVariables": "M = <b><i>FinalState</i></b>,, Response = <b><i>(parametersStored & off)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>FinalState</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "FinalState",
            "scope_mode_coco": "FinalState",
            "scope_mode_ft": "FinalState",
            "post_condition_unexp_pt": "(parametersStored & off)",
            "post_condition_unexp_ft": "(parametersStored & off)",
            "post_condition_SMV_pt": "(parametersStored & off)",
            "post_condition_SMV_ft": "(parametersStored & off)",
            "post_condition_coco_smv": "(parametersStored & off)",
            "post_condition_coco": "(parametersStored and off)",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_FinalState & (! LAST))) | (X ((! (Lin_FinalState | LAST)) U (parametersStored & off))))) & (FinalState -> ((! (Lin_FinalState | LAST)) U (parametersStored & off))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_FinalState -> (Y (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & Fin_FinalState)))))) & (((! Lin_FinalState) S ((! Lin_FinalState) & Fin_FinalState)) -> (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & Fin_FinalState)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! FinalState) & (Y FinalState)) -> (Y (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & (FinalState & (Z (! FinalState))))))))) & (((! ((! FinalState) & (Y FinalState))) S ((! ((! FinalState) & (Y FinalState))) & (FinalState & (Z (! FinalState))))) -> (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & (FinalState & (Z (! FinalState))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! FinalState) & (Y FinalState)) -> (Y (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & (FinalState & ((! (Y TRUE)) | (Y (! FinalState))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! FinalState) & (! LAST)) & (X FinalState)) & (! LAST))) | (X ((! (((FinalState & (! LAST)) & (X (! FinalState))) | LAST)) U (parametersStored & off))))) & (FinalState -> ((! (((FinalState & (! LAST)) & (X (! FinalState))) | LAST)) U (parametersStored & off))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! FinalState) ) & (X FinalState))) | (X ((! ((FinalState ) & (X (! FinalState)))) U (parametersStored & off))))) & (FinalState -> ((! ((FinalState ) & (X (! FinalState)))) U (parametersStored & off))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! FinalState) ) & (X FinalState))) | (X ((F ((FinalState ) & (X (! FinalState)))) -> ((! ((FinalState ) & (X (! FinalState)))) U (parametersStored & off)))))) & (FinalState -> ((F ((FinalState ) & (X (! FinalState)))) -> ((! ((FinalState ) & (X (! FinalState)))) U (parametersStored & off)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! FinalState) & (! LAST)) & (X FinalState)) & (! LAST))) | (X (((! LAST) U ((FinalState & (! LAST)) & (X (! FinalState)))) -> ((! ((FinalState & (! LAST)) & (X (! FinalState)))) U (parametersStored & off)))))) & (FinalState -> (((! LAST) U ((FinalState & (! LAST)) & (X (! FinalState)))) -> ((! ((FinalState & (! LAST)) & (X (! FinalState)))) U (parametersStored & off)))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not FinalState) and (YtoPre(FinalState))) => (YtoPre( not (SI( (FinalState and (FTP or (YtoPre( not FinalState)))), ( not (parametersStored and off)) )))))) and ((SI( (FinalState and (FTP or (YtoPre( not FinalState)))), ( not (( not FinalState) and (YtoPre(FinalState)))) )) => ( not (SI( (FinalState and (FTP or (YtoPre( not FinalState)))), ( not (parametersStored and off)) )))))",
            "component": "System"
        },
        "_id": "c0e4ec30-c032-11ee-94bd-73ad2ddf8fb6"
    }
]