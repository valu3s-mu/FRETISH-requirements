[
    {
        "reqid": "UC9_R_7",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "The framework must provide tools to prepare the datasets for the validation tests in a semi-automatic way.",
        "comments": "Not Formaliseable",
        "fulltext": "",
        "semantics": {},
        "_id": "d7d9c2a0-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_1\t",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Validation tests must be executed under the following driving conditions:\n- daytime and sunny journeys / night time and clear journey.\n- daytime and cloudy journeys / night time and cloudy journey.\n- daytime and rainy journeys / night time and rainy journey.\n- daytime and snowy journeys / night time and snowy journey.\n- daytime and foggy journeys / night time and foggy journey\n\nSeveral daytime journeys, made at different times during the day, will be considered for each daytime combination.\n\nTests must also include light signals occlusions.\n\nTest design should allow to set different states for the light signals in a route in order to test all the different states in which a light signal can be found.\n\nAlso, TC1:\n* Precondition: Route for validation is ready in the virtual environment\n* Steps and input condition:\n- Select visibility conditions\n- Activate frame capturing subsystem\n- Execute journey in the virtual environment\n* Expected results: A frameset for validation is generated",
        "comments": "",
        "fulltext": "when (daytime | nighttime) & (sunny | clear | cloudy | rainy | foggy | snowy ) & signalLightOccluded System shall satisfy generateFrameset",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "daytime",
                "nighttime",
                "sunny",
                "clear",
                "cloudy",
                "rainy",
                "foggy",
                "snowy",
                "signalLightOccluded",
                "generateFrameset"
            ],
            "qualifier_word": "when",
            "pre_condition": "(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & signalLightOccluded)",
            "regular_condition": "(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & signalLightOccluded)",
            "conditionTextRange": [
                0,
                99
            ],
            "component_name": "System",
            "componentTextRange": [
                101,
                106
            ],
            "post_condition": "(generateFrameset)",
            "responseTextRange": [
                114,
                137
            ],
            "diagramVariables": "TC = <b><i>(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & signalLightOccluded)</i></b>, Response = <b><i>(generateFrameset)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & signalLightOccluded)</i></b> is true and any point in the interval where <b><i>(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & signalLightOccluded)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)",
            "regular_condition_unexp_ft": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)",
            "regular_condition_SMV_pt": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)",
            "regular_condition_SMV_ft": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)",
            "regular_condition_coco_smv": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)",
            "regular_condition_coco": "(((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and signalLightOccluded)",
            "post_condition_unexp_pt": "generateFrameset",
            "post_condition_unexp_ft": "generateFrameset",
            "post_condition_SMV_pt": "generateFrameset",
            "post_condition_SMV_ft": "generateFrameset",
            "post_condition_coco_smv": "generateFrameset",
            "post_condition_coco": "generateFrameset",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)) & ((! LAST) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)))) -> (X ((! LAST) U generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) -> ((! LAST) U generateFrameset)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) | (! ((! generateFrameset) S ((! generateFrameset) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) & ((Y (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) | (! ((! generateFrameset) S ((! generateFrameset) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) & ((Y (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) | (! ((! generateFrameset) S ((! generateFrameset) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) & ((Y (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)) & ((! LAST) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)))) -> (X ((! LAST) U generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) -> ((! LAST) U generateFrameset)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) -> (X (F generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) -> (F generateFrameset)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded))) -> (X (F generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) -> (F generateFrameset)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)) & ((! LAST) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded)))) -> (X ((! LAST) U generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & signalLightOccluded) -> ((! LAST) U generateFrameset)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and signalLightOccluded))) or ( not (SI( ((((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and signalLightOccluded) and ((YtoPre( not (((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and signalLightOccluded))) or FTP)), ( not generateFrameset) ))))",
            "component": "System"
        },
        "_id": "d7da10c0-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_2",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "The framework must provide tools to prepare the datasets for the validation tests in a semi-automatic way.",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "d7da37d0-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_8",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Information about all objects detected by the system during the execution of a validation test must be recorded (in a file) for further analysis.",
        "comments": "",
        "fulltext": "when objectDetected System shall satisfy logObject",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "objectDetected",
                "logObject"
            ],
            "qualifier_word": "when",
            "pre_condition": "(objectDetected)",
            "regular_condition": "(objectDetected)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(logObject)",
            "responseTextRange": [
                33,
                49
            ],
            "diagramVariables": "TC = <b><i>(objectDetected)</i></b>, Response = <b><i>(logObject)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(objectDetected)</i></b> is true and any point in the interval where <b><i>(objectDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "objectDetected",
            "regular_condition_unexp_ft": "objectDetected",
            "regular_condition_SMV_pt": "objectDetected",
            "regular_condition_SMV_ft": "objectDetected",
            "regular_condition_coco_smv": "objectDetected",
            "regular_condition_coco": "objectDetected",
            "post_condition_unexp_pt": "logObject",
            "post_condition_unexp_ft": "logObject",
            "post_condition_SMV_pt": "logObject",
            "post_condition_SMV_ft": "logObject",
            "post_condition_coco_smv": "logObject",
            "post_condition_coco": "logObject",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! objectDetected) & ((! LAST) & (X objectDetected))) -> (X ((! LAST) U logObject)))) & (objectDetected -> ((! LAST) U logObject)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! objectDetected)) | (! ((! logObject) S ((! logObject) & (objectDetected & ((Y (! objectDetected)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! objectDetected)) | (! ((! logObject) S ((! logObject) & (objectDetected & ((Y (! objectDetected)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! objectDetected)) | (! ((! logObject) S ((! logObject) & (objectDetected & ((Y (! objectDetected)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! objectDetected) & ((! LAST) & (X objectDetected))) -> (X ((! LAST) U logObject)))) & (objectDetected -> ((! LAST) U logObject)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! objectDetected) & (X objectDetected)) -> (X (F logObject)))) & (objectDetected -> (F logObject)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! objectDetected) & (X objectDetected)) -> (X (F logObject)))) & (objectDetected -> (F logObject)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! objectDetected) & ((! LAST) & (X objectDetected))) -> (X ((! LAST) U logObject)))) & (objectDetected -> ((! LAST) U logObject)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not objectDetected)) or ( not (SI( (objectDetected and ((YtoPre( not objectDetected)) or FTP)), ( not logObject) ))))",
            "component": "System"
        },
        "_id": "d7da85f0-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_3",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Information about all objects detected by the system during the execution of a validation test must be recorded (in a file) for further analysis.",
        "comments": "",
        "fulltext": "when objectDetected System shall satisfy logObject ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "objectDetected",
                "logObject"
            ],
            "qualifier_word": "when",
            "pre_condition": "(objectDetected)",
            "regular_condition": "(objectDetected)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(logObject)",
            "responseTextRange": [
                33,
                49
            ],
            "diagramVariables": "TC = <b><i>(objectDetected)</i></b>, Response = <b><i>(logObject)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(objectDetected)</i></b> is true and any point in the interval where <b><i>(objectDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "objectDetected",
            "regular_condition_unexp_ft": "objectDetected",
            "regular_condition_SMV_pt": "objectDetected",
            "regular_condition_SMV_ft": "objectDetected",
            "regular_condition_coco_smv": "objectDetected",
            "regular_condition_coco": "objectDetected",
            "post_condition_unexp_pt": "logObject",
            "post_condition_unexp_ft": "logObject",
            "post_condition_SMV_pt": "logObject",
            "post_condition_SMV_ft": "logObject",
            "post_condition_coco_smv": "logObject",
            "post_condition_coco": "logObject",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! objectDetected) & ((! LAST) & (X objectDetected))) -> (X ((! LAST) U logObject)))) & (objectDetected -> ((! LAST) U logObject)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! objectDetected)) | (! ((! logObject) S ((! logObject) & (objectDetected & ((Y (! objectDetected)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! objectDetected)) | (! ((! logObject) S ((! logObject) & (objectDetected & ((Y (! objectDetected)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! objectDetected)) | (! ((! logObject) S ((! logObject) & (objectDetected & ((Y (! objectDetected)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! objectDetected) & ((! LAST) & (X objectDetected))) -> (X ((! LAST) U logObject)))) & (objectDetected -> ((! LAST) U logObject)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! objectDetected) & (X objectDetected)) -> (X (F logObject)))) & (objectDetected -> (F logObject)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! objectDetected) & (X objectDetected)) -> (X (F logObject)))) & (objectDetected -> (F logObject)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! objectDetected) & ((! LAST) & (X objectDetected))) -> (X ((! LAST) U logObject)))) & (objectDetected -> ((! LAST) U logObject)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not objectDetected)) or ( not (SI( (objectDetected and ((YtoPre( not objectDetected)) or FTP)), ( not logObject) ))))",
            "component": "System"
        },
        "_id": "d7daad00-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_9",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Accuracy metrics must be calculated for each test execution, comparing the test execution results and the expected results, defined by the ground truth for each journey.",
        "comments": "",
        "fulltext": "when validationTest System shall satisfy calculateAccuracy",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "validationTest",
                "calculateAccuracy"
            ],
            "qualifier_word": "when",
            "pre_condition": "(validationTest)",
            "regular_condition": "(validationTest)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(calculateAccuracy)",
            "responseTextRange": [
                33,
                57
            ],
            "diagramVariables": "TC = <b><i>(validationTest)</i></b>, Response = <b><i>(calculateAccuracy)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(validationTest)</i></b> is true and any point in the interval where <b><i>(validationTest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "validationTest",
            "regular_condition_unexp_ft": "validationTest",
            "regular_condition_SMV_pt": "validationTest",
            "regular_condition_SMV_ft": "validationTest",
            "regular_condition_coco_smv": "validationTest",
            "regular_condition_coco": "validationTest",
            "post_condition_unexp_pt": "calculateAccuracy",
            "post_condition_unexp_ft": "calculateAccuracy",
            "post_condition_SMV_pt": "calculateAccuracy",
            "post_condition_SMV_ft": "calculateAccuracy",
            "post_condition_coco_smv": "calculateAccuracy",
            "post_condition_coco": "calculateAccuracy",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U calculateAccuracy)))) & (validationTest -> ((! LAST) U calculateAccuracy)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! validationTest)) | (! ((! calculateAccuracy) S ((! calculateAccuracy) & (validationTest & ((Y (! validationTest)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! validationTest)) | (! ((! calculateAccuracy) S ((! calculateAccuracy) & (validationTest & ((Y (! validationTest)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! validationTest)) | (! ((! calculateAccuracy) S ((! calculateAccuracy) & (validationTest & ((Y (! validationTest)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U calculateAccuracy)))) & (validationTest -> ((! LAST) U calculateAccuracy)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! validationTest) & (X validationTest)) -> (X (F calculateAccuracy)))) & (validationTest -> (F calculateAccuracy)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! validationTest) & (X validationTest)) -> (X (F calculateAccuracy)))) & (validationTest -> (F calculateAccuracy)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U calculateAccuracy)))) & (validationTest -> ((! LAST) U calculateAccuracy)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not validationTest)) or ( not (SI( (validationTest and ((YtoPre( not validationTest)) or FTP)), ( not calculateAccuracy) ))))",
            "component": "System"
        },
        "_id": "d7dafb20-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_10",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "An analysis of the results obtained during the tests carried out for a set of validation tests shall provide information to determine the conditions for a safe operation of the system.",
        "comments": "Not Foramlisable",
        "fulltext": "",
        "semantics": {},
        "_id": "d7db2230-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_4",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Evidence of the execution of validation tests for light signals detection must be recorded.",
        "comments": "",
        "fulltext": "when validationTest System shall satisfy logTest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "validationTest",
                "logTest"
            ],
            "qualifier_word": "when",
            "pre_condition": "(validationTest)",
            "regular_condition": "(validationTest)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(logTest)",
            "responseTextRange": [
                33,
                47
            ],
            "diagramVariables": "TC = <b><i>(validationTest)</i></b>, Response = <b><i>(logTest)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(validationTest)</i></b> is true and any point in the interval where <b><i>(validationTest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "validationTest",
            "regular_condition_unexp_ft": "validationTest",
            "regular_condition_SMV_pt": "validationTest",
            "regular_condition_SMV_ft": "validationTest",
            "regular_condition_coco_smv": "validationTest",
            "regular_condition_coco": "validationTest",
            "post_condition_unexp_pt": "logTest",
            "post_condition_unexp_ft": "logTest",
            "post_condition_SMV_pt": "logTest",
            "post_condition_SMV_ft": "logTest",
            "post_condition_coco_smv": "logTest",
            "post_condition_coco": "logTest",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U logTest)))) & (validationTest -> ((! LAST) U logTest)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! validationTest)) | (! ((! logTest) S ((! logTest) & (validationTest & ((Y (! validationTest)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! validationTest)) | (! ((! logTest) S ((! logTest) & (validationTest & ((Y (! validationTest)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! validationTest)) | (! ((! logTest) S ((! logTest) & (validationTest & ((Y (! validationTest)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U logTest)))) & (validationTest -> ((! LAST) U logTest)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! validationTest) & (X validationTest)) -> (X (F logTest)))) & (validationTest -> (F logTest)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! validationTest) & (X validationTest)) -> (X (F logTest)))) & (validationTest -> (F logTest)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U logTest)))) & (validationTest -> ((! LAST) U logTest)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not validationTest)) or ( not (SI( (validationTest and ((YtoPre( not validationTest)) or FTP)), ( not logTest) ))))",
            "component": "System"
        },
        "_id": "d7db7050-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_5\t",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Accuracy metrics must be calculated for each test execution, comparing the test execution results and the expected results, defined by the ground truth for the journey.",
        "comments": "",
        "fulltext": "when validationTest System shall satisfy calculateAccuracy",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "validationTest",
                "calculateAccuracy"
            ],
            "qualifier_word": "when",
            "pre_condition": "(validationTest)",
            "regular_condition": "(validationTest)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "System",
            "componentTextRange": [
                20,
                25
            ],
            "post_condition": "(calculateAccuracy)",
            "responseTextRange": [
                33,
                57
            ],
            "diagramVariables": "TC = <b><i>(validationTest)</i></b>, Response = <b><i>(calculateAccuracy)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(validationTest)</i></b> is true and any point in the interval where <b><i>(validationTest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "validationTest",
            "regular_condition_unexp_ft": "validationTest",
            "regular_condition_SMV_pt": "validationTest",
            "regular_condition_SMV_ft": "validationTest",
            "regular_condition_coco_smv": "validationTest",
            "regular_condition_coco": "validationTest",
            "post_condition_unexp_pt": "calculateAccuracy",
            "post_condition_unexp_ft": "calculateAccuracy",
            "post_condition_SMV_pt": "calculateAccuracy",
            "post_condition_SMV_ft": "calculateAccuracy",
            "post_condition_coco_smv": "calculateAccuracy",
            "post_condition_coco": "calculateAccuracy",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U calculateAccuracy)))) & (validationTest -> ((! LAST) U calculateAccuracy)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! validationTest)) | (! ((! calculateAccuracy) S ((! calculateAccuracy) & (validationTest & ((Y (! validationTest)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! validationTest)) | (! ((! calculateAccuracy) S ((! calculateAccuracy) & (validationTest & ((Y (! validationTest)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! validationTest)) | (! ((! calculateAccuracy) S ((! calculateAccuracy) & (validationTest & ((Y (! validationTest)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U calculateAccuracy)))) & (validationTest -> ((! LAST) U calculateAccuracy)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! validationTest) & (X validationTest)) -> (X (F calculateAccuracy)))) & (validationTest -> (F calculateAccuracy)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! validationTest) & (X validationTest)) -> (X (F calculateAccuracy)))) & (validationTest -> (F calculateAccuracy)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! validationTest) & ((! LAST) & (X validationTest))) -> (X ((! LAST) U calculateAccuracy)))) & (validationTest -> ((! LAST) U calculateAccuracy)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not validationTest)) or ( not (SI( (validationTest and ((YtoPre( not validationTest)) or FTP)), ( not calculateAccuracy) ))))",
            "component": "System"
        },
        "_id": "d7db9760-307a-11ee-aa4b-2905d3ba8e77"
    },
    {
        "reqid": "UC9_R_6",
        "parent_reqid": "",
        "project": "VALU3S Use Case 9",
        "rationale": "Validation tests must be executed under the following driving conditions:\n- daytime and sunny journeys / night time and clear journey.\n- daytime and cloudy journeys / night time and cloudy journey.\n- daytime and rainy journeys / night time and rainy journey.\n- daytime and snowy journeys / night time and snowy journey.\n- daytime and foggy journeys / night time and foggy journey.\n\nSeveral daytime journeys, made at different times during the day, will be considered for each daytime combination.\n\nTests must also include speed restriction signs occlusions.\n\nAlso TC1:\n\n* Precondition: Route for validation is ready in the virtual environment\n* Steps and input condition:\n- Select visibility conditions\n- Activate frame capturing subsystem\n- Execute journey in the virtual environment\n* Expected results: A frameset for validation is generated",
        "comments": "",
        "fulltext": "when (daytime | nighttime) & (sunny | clear | cloudy | rainy | foggy | snowy ) & speedSignOcclusions System shall satisfy generateFrameset",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "daytime",
                "nighttime",
                "sunny",
                "clear",
                "cloudy",
                "rainy",
                "foggy",
                "snowy",
                "speedSignOcclusions",
                "generateFrameset"
            ],
            "qualifier_word": "when",
            "pre_condition": "(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & speedSignOcclusions)",
            "regular_condition": "(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & speedSignOcclusions)",
            "conditionTextRange": [
                0,
                99
            ],
            "component_name": "System",
            "componentTextRange": [
                101,
                106
            ],
            "post_condition": "(generateFrameset)",
            "responseTextRange": [
                114,
                137
            ],
            "diagramVariables": "TC = <b><i>(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & speedSignOcclusions)</i></b>, Response = <b><i>(generateFrameset)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & speedSignOcclusions)</i></b> is true and any point in the interval where <b><i>(( daytime | nighttime ) & ( sunny | clear | cloudy | rainy | foggy | snowy ) & speedSignOcclusions)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)",
            "regular_condition_unexp_ft": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)",
            "regular_condition_SMV_pt": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)",
            "regular_condition_SMV_ft": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)",
            "regular_condition_coco_smv": "(((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)",
            "regular_condition_coco": "(((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and speedSignOcclusions)",
            "post_condition_unexp_pt": "generateFrameset",
            "post_condition_unexp_ft": "generateFrameset",
            "post_condition_SMV_pt": "generateFrameset",
            "post_condition_SMV_ft": "generateFrameset",
            "post_condition_coco_smv": "generateFrameset",
            "post_condition_coco": "generateFrameset",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)) & ((! LAST) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)))) -> (X ((! LAST) U generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) -> ((! LAST) U generateFrameset)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) | (! ((! generateFrameset) S ((! generateFrameset) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) & ((Y (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) | (! ((! generateFrameset) S ((! generateFrameset) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) & ((Y (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) | (! ((! generateFrameset) S ((! generateFrameset) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) & ((Y (! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)) & ((! LAST) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)))) -> (X ((! LAST) U generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) -> ((! LAST) U generateFrameset)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) -> (X (F generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) -> (F generateFrameset)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions))) -> (X (F generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) -> (F generateFrameset)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)) & ((! LAST) & (X (((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions)))) -> (X ((! LAST) U generateFrameset)))) & ((((daytime | nighttime) & (((((sunny | clear) | cloudy) | rainy) | foggy) | snowy)) & speedSignOcclusions) -> ((! LAST) U generateFrameset)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and speedSignOcclusions))) or ( not (SI( ((((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and speedSignOcclusions) and ((YtoPre( not (((daytime or nighttime) and (((((sunny or clear) or cloudy) or rainy) or foggy) or snowy)) and speedSignOcclusions))) or FTP)), ( not generateFrameset) ))))",
            "component": "System"
        },
        "_id": "d7dbe580-307a-11ee-aa4b-2905d3ba8e77"
    }
]