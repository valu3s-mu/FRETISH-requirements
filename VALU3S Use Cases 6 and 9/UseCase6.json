[
    {
        "reqid": "UC6_R_2",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The system shall check IMU connection before switching to parallel guidance",
        "comments": "",
        "fulltext": "when parallelGuidanceRequested System shall satisfy checkIMUConnection -> ParallelGuidanceMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "parallelGuidanceRequested",
                "checkIMUConnection",
                "ParallelGuidanceMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(parallelGuidanceRequested)",
            "regular_condition": "(parallelGuidanceRequested)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "System",
            "componentTextRange": [
                31,
                36
            ],
            "post_condition": "(checkIMUConnection -> ParallelGuidanceMode)",
            "responseTextRange": [
                44,
                93
            ],
            "diagramVariables": "TC = <b><i>(parallelGuidanceRequested)</i></b>, Response = <b><i>(checkIMUConnection -> ParallelGuidanceMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(parallelGuidanceRequested)</i></b> is true and any point in the interval where <b><i>(parallelGuidanceRequested)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "parallelGuidanceRequested",
            "regular_condition_unexp_ft": "parallelGuidanceRequested",
            "regular_condition_SMV_pt": "parallelGuidanceRequested",
            "regular_condition_SMV_ft": "parallelGuidanceRequested",
            "regular_condition_coco_smv": "parallelGuidanceRequested",
            "regular_condition_coco": "parallelGuidanceRequested",
            "post_condition_unexp_pt": "(checkIMUConnection -> ParallelGuidanceMode)",
            "post_condition_unexp_ft": "(checkIMUConnection -> ParallelGuidanceMode)",
            "post_condition_SMV_pt": "(checkIMUConnection -> ParallelGuidanceMode)",
            "post_condition_SMV_ft": "(checkIMUConnection -> ParallelGuidanceMode)",
            "post_condition_coco_smv": "(checkIMUConnection -> ParallelGuidanceMode)",
            "post_condition_coco": "(checkIMUConnection => ParallelGuidanceMode)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! parallelGuidanceRequested) & ((! LAST) & (X parallelGuidanceRequested))) -> (X ((! LAST) U (checkIMUConnection -> ParallelGuidanceMode))))) & (parallelGuidanceRequested -> ((! LAST) U (checkIMUConnection -> ParallelGuidanceMode))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! parallelGuidanceRequested)) | (! ((! (checkIMUConnection -> ParallelGuidanceMode)) S ((! (checkIMUConnection -> ParallelGuidanceMode)) & (parallelGuidanceRequested & ((Y (! parallelGuidanceRequested)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! parallelGuidanceRequested)) | (! ((! (checkIMUConnection -> ParallelGuidanceMode)) S ((! (checkIMUConnection -> ParallelGuidanceMode)) & (parallelGuidanceRequested & ((Y (! parallelGuidanceRequested)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! parallelGuidanceRequested)) | (! ((! (checkIMUConnection -> ParallelGuidanceMode)) S ((! (checkIMUConnection -> ParallelGuidanceMode)) & (parallelGuidanceRequested & ((Y (! parallelGuidanceRequested)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! parallelGuidanceRequested) & ((! LAST) & (X parallelGuidanceRequested))) -> (X ((! LAST) U (checkIMUConnection -> ParallelGuidanceMode))))) & (parallelGuidanceRequested -> ((! LAST) U (checkIMUConnection -> ParallelGuidanceMode))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! parallelGuidanceRequested) & (X parallelGuidanceRequested)) -> (X (F (checkIMUConnection -> ParallelGuidanceMode))))) & (parallelGuidanceRequested -> (F (checkIMUConnection -> ParallelGuidanceMode))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! parallelGuidanceRequested) & (X parallelGuidanceRequested)) -> (X (F (checkIMUConnection -> ParallelGuidanceMode))))) & (parallelGuidanceRequested -> (F (checkIMUConnection -> ParallelGuidanceMode))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! parallelGuidanceRequested) & ((! LAST) & (X parallelGuidanceRequested))) -> (X ((! LAST) U (checkIMUConnection -> ParallelGuidanceMode))))) & (parallelGuidanceRequested -> ((! LAST) U (checkIMUConnection -> ParallelGuidanceMode))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not parallelGuidanceRequested)) or ( not (SI( (parallelGuidanceRequested and ((YtoPre( not parallelGuidanceRequested)) or FTP)), ( not (checkIMUConnection => ParallelGuidanceMode)) ))))",
            "component": "System"
        },
        "_id": "009c43d0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_20",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The vehicle shall stop if the IMU fails",
        "comments": "",
        "fulltext": "if IMUFail Vehicle shall satisfy stop",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "IMUFail",
                "stop"
            ],
            "qualifier_word": "if",
            "pre_condition": "(IMUFail)",
            "regular_condition": "(IMUFail)",
            "conditionTextRange": [
                0,
                9
            ],
            "component_name": "Vehicle",
            "componentTextRange": [
                11,
                17
            ],
            "post_condition": "(stop)",
            "responseTextRange": [
                25,
                36
            ],
            "diagramVariables": "TC = <b><i>(IMUFail)</i></b>, Response = <b><i>(stop)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(IMUFail)</i></b> is true and any point in the interval where <b><i>(IMUFail)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "IMUFail",
            "regular_condition_unexp_ft": "IMUFail",
            "regular_condition_SMV_pt": "IMUFail",
            "regular_condition_SMV_ft": "IMUFail",
            "regular_condition_coco_smv": "IMUFail",
            "regular_condition_coco": "IMUFail",
            "post_condition_unexp_pt": "stop",
            "post_condition_unexp_ft": "stop",
            "post_condition_SMV_pt": "stop",
            "post_condition_SMV_ft": "stop",
            "post_condition_coco_smv": "stop",
            "post_condition_coco": "stop",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! IMUFail) & ((! LAST) & (X IMUFail))) -> (X ((! LAST) U stop)))) & (IMUFail -> ((! LAST) U stop)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! IMUFail)) | (! ((! stop) S ((! stop) & (IMUFail & ((Y (! IMUFail)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! IMUFail)) | (! ((! stop) S ((! stop) & (IMUFail & ((Y (! IMUFail)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! IMUFail)) | (! ((! stop) S ((! stop) & (IMUFail & ((Y (! IMUFail)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! IMUFail) & ((! LAST) & (X IMUFail))) -> (X ((! LAST) U stop)))) & (IMUFail -> ((! LAST) U stop)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! IMUFail) & (X IMUFail)) -> (X (F stop)))) & (IMUFail -> (F stop)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! IMUFail) & (X IMUFail)) -> (X (F stop)))) & (IMUFail -> (F stop)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! IMUFail) & ((! LAST) & (X IMUFail))) -> (X ((! LAST) U stop)))) & (IMUFail -> ((! LAST) U stop)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not IMUFail)) or ( not (SI( (IMUFail and ((YtoPre( not IMUFail)) or FTP)), ( not stop) ))))",
            "component": "Vehicle"
        },
        "_id": "009c91f0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_14",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The vehicle shall stop before switching to manual mode",
        "comments": "",
        "fulltext": "when manualModeRequestd Vehicle shall satisfy stop -> ManualMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "manualModeRequestd",
                "stop",
                "ManualMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(manualModeRequestd)",
            "regular_condition": "(manualModeRequestd)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "Vehicle",
            "componentTextRange": [
                24,
                30
            ],
            "post_condition": "(stop -> ManualMode)",
            "responseTextRange": [
                38,
                63
            ],
            "diagramVariables": "TC = <b><i>(manualModeRequestd)</i></b>, Response = <b><i>(stop -> ManualMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(manualModeRequestd)</i></b> is true and any point in the interval where <b><i>(manualModeRequestd)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "manualModeRequestd",
            "regular_condition_unexp_ft": "manualModeRequestd",
            "regular_condition_SMV_pt": "manualModeRequestd",
            "regular_condition_SMV_ft": "manualModeRequestd",
            "regular_condition_coco_smv": "manualModeRequestd",
            "regular_condition_coco": "manualModeRequestd",
            "post_condition_unexp_pt": "(stop -> ManualMode)",
            "post_condition_unexp_ft": "(stop -> ManualMode)",
            "post_condition_SMV_pt": "(stop -> ManualMode)",
            "post_condition_SMV_ft": "(stop -> ManualMode)",
            "post_condition_coco_smv": "(stop -> ManualMode)",
            "post_condition_coco": "(stop => ManualMode)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! manualModeRequestd) & ((! LAST) & (X manualModeRequestd))) -> (X ((! LAST) U (stop -> ManualMode))))) & (manualModeRequestd -> ((! LAST) U (stop -> ManualMode))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! manualModeRequestd)) | (! ((! (stop -> ManualMode)) S ((! (stop -> ManualMode)) & (manualModeRequestd & ((Y (! manualModeRequestd)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! manualModeRequestd)) | (! ((! (stop -> ManualMode)) S ((! (stop -> ManualMode)) & (manualModeRequestd & ((Y (! manualModeRequestd)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! manualModeRequestd)) | (! ((! (stop -> ManualMode)) S ((! (stop -> ManualMode)) & (manualModeRequestd & ((Y (! manualModeRequestd)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! manualModeRequestd) & ((! LAST) & (X manualModeRequestd))) -> (X ((! LAST) U (stop -> ManualMode))))) & (manualModeRequestd -> ((! LAST) U (stop -> ManualMode))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! manualModeRequestd) & (X manualModeRequestd)) -> (X (F (stop -> ManualMode))))) & (manualModeRequestd -> (F (stop -> ManualMode))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! manualModeRequestd) & (X manualModeRequestd)) -> (X (F (stop -> ManualMode))))) & (manualModeRequestd -> (F (stop -> ManualMode))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! manualModeRequestd) & ((! LAST) & (X manualModeRequestd))) -> (X ((! LAST) U (stop -> ManualMode))))) & (manualModeRequestd -> ((! LAST) U (stop -> ManualMode))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not manualModeRequestd)) or ( not (SI( (manualModeRequestd and ((YtoPre( not manualModeRequestd)) or FTP)), ( not (stop => ManualMode)) ))))",
            "component": "Vehicle"
        },
        "_id": "009cb900-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_21",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Assessment of the risk level of this threat should be performed",
        "comments": "Not Formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "009d0720-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_8\t",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "the control shall be performed every 200ms",
        "comments": "",
        "fulltext": "System shall within 200 milliseconds satisfy controlCycle",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "controlCycle"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "duration": "200",
            "timingTextRange": [
                13,
                35
            ],
            "post_condition": "(controlCycle)",
            "responseTextRange": [
                37,
                56
            ],
            "diagramVariables": " n = <b><i>200</i></b>, Response = <b><i>(controlCycle)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>200</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>200</i></b>). If the interval ends sooner than trigger+<b><i>200</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "controlCycle",
            "post_condition_unexp_ft": "controlCycle",
            "post_condition_SMV_pt": "controlCycle",
            "post_condition_SMV_ft": "controlCycle",
            "post_condition_coco_smv": "controlCycle",
            "post_condition_coco": "controlCycle",
            "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
            "ft": "((F[<=200] controlCycle) | (F[<200] LAST))",
            "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
            "pt": "(H ((H (! controlCycle)) -> (O[<200] FTP)))",
            "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
            "ptExpanded": "(H ((H (! controlCycle)) -> (O[0,199] (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((H (! controlCycle)) -> (O[0,199] (! (Y TRUE)))))",
            "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
            "ftExpanded": "((F[0,200] controlCycle) | (F[0,199] LAST))",
            "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F[0,200] controlCycle)",
            "ftInfBtwExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F[0,200] controlCycle)",
            "ftFinBtwExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
            "ftFinBtwExpanded": "((F[0,200] controlCycle) | (F[0,199] LAST))",
            "CoCoSpecCode_fetched": "(H((H( not $post_condition_coco$)) => (OT($duration$-1,0,FTP))))",
            "CoCoSpecCode": "(H((H( not controlCycle)) => (OT(200-1,0,FTP))))",
            "component": "System"
        },
        "_id": "009d5540-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_4",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "System shall be robust against sporadic errors (e.g. invalid GPS positions, wrong heading angle)",
        "comments": "Robust is not well described",
        "fulltext": "",
        "semantics": {},
        "_id": "009da360-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_5",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The driving cycle shall be 9 hours",
        "comments": "",
        "fulltext": "Vehicle shall within 9 hours satisfy drivingCycleComplete",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "within",
            "response": "satisfaction",
            "variables": [
                "drivingCycleComplete"
            ],
            "component_name": "Vehicle",
            "componentTextRange": [
                0,
                6
            ],
            "duration": "9",
            "timingTextRange": [
                14,
                27
            ],
            "post_condition": "(drivingCycleComplete)",
            "responseTextRange": [
                29,
                56
            ],
            "diagramVariables": " n = <b><i>9</i></b>, Response = <b><i>(drivingCycleComplete)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some point with distance <= <b><i>9</i></b> from the trigger (i.e., at trigger, trigger+1, ..., or trigger+<b><i>9</i></b>). If the interval ends sooner than trigger+<b><i>9</i></b>, then RES need not hold.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_within_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "drivingCycleComplete",
            "post_condition_unexp_ft": "drivingCycleComplete",
            "post_condition_SMV_pt": "drivingCycleComplete",
            "post_condition_SMV_ft": "drivingCycleComplete",
            "post_condition_coco_smv": "drivingCycleComplete",
            "post_condition_coco": "drivingCycleComplete",
            "ft_fetched": "((F[<=$duration$] $post_condition_unexp_ft$) | (F[<$duration$] LAST))",
            "ft": "((F[<=9] drivingCycleComplete) | (F[<9] LAST))",
            "pt_fetched": "(H ((H (! $post_condition_unexp_pt$)) -> (O[<$duration$] FTP)))",
            "pt": "(H ((H (! drivingCycleComplete)) -> (O[<9] FTP)))",
            "ptExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
            "ptExpanded": "(H ((H (! drivingCycleComplete)) -> (O[0,8] (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((H (! $post_condition_SMV_pt$)) -> (O[<$duration$] (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((H (! drivingCycleComplete)) -> (O[0,8] (! (Y TRUE)))))",
            "ftExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
            "ftExpanded": "((F[0,9] drivingCycleComplete) | (F[0,8] LAST))",
            "ftInfAUExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F[0,9] drivingCycleComplete)",
            "ftInfBtwExpanded_fetched": "(F[<=$duration$] $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F[0,9] drivingCycleComplete)",
            "ftFinBtwExpanded_fetched": "((F[<=$duration$] $post_condition_SMV_ft$) | (F[<$duration$] LAST))",
            "ftFinBtwExpanded": "((F[0,9] drivingCycleComplete) | (F[0,8] LAST))",
            "CoCoSpecCode_fetched": "(H((H( not $post_condition_coco$)) => (OT($duration$-1,0,FTP))))",
            "CoCoSpecCode": "(H((H( not drivingCycleComplete)) => (OT(9-1,0,FTP))))",
            "component": "Vehicle"
        },
        "_id": "009df180-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_16",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "System shall detect and drop unwanted requests to switch to manual mode",
        "comments": "",
        "fulltext": "if unwantedManualModeRequested System shall satisfy dropRequest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "unwantedManualModeRequested",
                "dropRequest"
            ],
            "qualifier_word": "if",
            "pre_condition": "(unwantedManualModeRequested)",
            "regular_condition": "(unwantedManualModeRequested)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "System",
            "componentTextRange": [
                31,
                36
            ],
            "post_condition": "(dropRequest)",
            "responseTextRange": [
                44,
                62
            ],
            "diagramVariables": "TC = <b><i>(unwantedManualModeRequested)</i></b>, Response = <b><i>(dropRequest)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(unwantedManualModeRequested)</i></b> is true and any point in the interval where <b><i>(unwantedManualModeRequested)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "unwantedManualModeRequested",
            "regular_condition_unexp_ft": "unwantedManualModeRequested",
            "regular_condition_SMV_pt": "unwantedManualModeRequested",
            "regular_condition_SMV_ft": "unwantedManualModeRequested",
            "regular_condition_coco_smv": "unwantedManualModeRequested",
            "regular_condition_coco": "unwantedManualModeRequested",
            "post_condition_unexp_pt": "dropRequest",
            "post_condition_unexp_ft": "dropRequest",
            "post_condition_SMV_pt": "dropRequest",
            "post_condition_SMV_ft": "dropRequest",
            "post_condition_coco_smv": "dropRequest",
            "post_condition_coco": "dropRequest",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! unwantedManualModeRequested) & ((! LAST) & (X unwantedManualModeRequested))) -> (X ((! LAST) U dropRequest)))) & (unwantedManualModeRequested -> ((! LAST) U dropRequest)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! unwantedManualModeRequested)) | (! ((! dropRequest) S ((! dropRequest) & (unwantedManualModeRequested & ((Y (! unwantedManualModeRequested)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! unwantedManualModeRequested)) | (! ((! dropRequest) S ((! dropRequest) & (unwantedManualModeRequested & ((Y (! unwantedManualModeRequested)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! unwantedManualModeRequested)) | (! ((! dropRequest) S ((! dropRequest) & (unwantedManualModeRequested & ((Y (! unwantedManualModeRequested)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! unwantedManualModeRequested) & ((! LAST) & (X unwantedManualModeRequested))) -> (X ((! LAST) U dropRequest)))) & (unwantedManualModeRequested -> ((! LAST) U dropRequest)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! unwantedManualModeRequested) & (X unwantedManualModeRequested)) -> (X (F dropRequest)))) & (unwantedManualModeRequested -> (F dropRequest)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! unwantedManualModeRequested) & (X unwantedManualModeRequested)) -> (X (F dropRequest)))) & (unwantedManualModeRequested -> (F dropRequest)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! unwantedManualModeRequested) & ((! LAST) & (X unwantedManualModeRequested))) -> (X ((! LAST) U dropRequest)))) & (unwantedManualModeRequested -> ((! LAST) U dropRequest)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not unwantedManualModeRequested)) or ( not (SI( (unwantedManualModeRequested and ((YtoPre( not unwantedManualModeRequested)) or FTP)), ( not dropRequest) ))))",
            "component": "System"
        },
        "_id": "009e3fa0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_9",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The vehicle shall detect disconnection from the remote control",
        "comments": "",
        "fulltext": "if rcDisconnectDetected Vehicle shall satisfy rcDisconnectedWarning",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "rcDisconnectDetected",
                "rcDisconnectedWarning"
            ],
            "qualifier_word": "if",
            "pre_condition": "(rcDisconnectDetected)",
            "regular_condition": "(rcDisconnectDetected)",
            "conditionTextRange": [
                0,
                22
            ],
            "component_name": "Vehicle",
            "componentTextRange": [
                24,
                30
            ],
            "post_condition": "(rcDisconnectedWarning)",
            "responseTextRange": [
                38,
                66
            ],
            "diagramVariables": "TC = <b><i>(rcDisconnectDetected)</i></b>, Response = <b><i>(rcDisconnectedWarning)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(rcDisconnectDetected)</i></b> is true and any point in the interval where <b><i>(rcDisconnectDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "rcDisconnectDetected",
            "regular_condition_unexp_ft": "rcDisconnectDetected",
            "regular_condition_SMV_pt": "rcDisconnectDetected",
            "regular_condition_SMV_ft": "rcDisconnectDetected",
            "regular_condition_coco_smv": "rcDisconnectDetected",
            "regular_condition_coco": "rcDisconnectDetected",
            "post_condition_unexp_pt": "rcDisconnectedWarning",
            "post_condition_unexp_ft": "rcDisconnectedWarning",
            "post_condition_SMV_pt": "rcDisconnectedWarning",
            "post_condition_SMV_ft": "rcDisconnectedWarning",
            "post_condition_coco_smv": "rcDisconnectedWarning",
            "post_condition_coco": "rcDisconnectedWarning",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! rcDisconnectDetected) & ((! LAST) & (X rcDisconnectDetected))) -> (X ((! LAST) U rcDisconnectedWarning)))) & (rcDisconnectDetected -> ((! LAST) U rcDisconnectedWarning)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! rcDisconnectDetected)) | (! ((! rcDisconnectedWarning) S ((! rcDisconnectedWarning) & (rcDisconnectDetected & ((Y (! rcDisconnectDetected)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! rcDisconnectDetected)) | (! ((! rcDisconnectedWarning) S ((! rcDisconnectedWarning) & (rcDisconnectDetected & ((Y (! rcDisconnectDetected)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! rcDisconnectDetected)) | (! ((! rcDisconnectedWarning) S ((! rcDisconnectedWarning) & (rcDisconnectDetected & ((Y (! rcDisconnectDetected)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! rcDisconnectDetected) & ((! LAST) & (X rcDisconnectDetected))) -> (X ((! LAST) U rcDisconnectedWarning)))) & (rcDisconnectDetected -> ((! LAST) U rcDisconnectedWarning)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! rcDisconnectDetected) & (X rcDisconnectDetected)) -> (X (F rcDisconnectedWarning)))) & (rcDisconnectDetected -> (F rcDisconnectedWarning)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! rcDisconnectDetected) & (X rcDisconnectDetected)) -> (X (F rcDisconnectedWarning)))) & (rcDisconnectDetected -> (F rcDisconnectedWarning)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! rcDisconnectDetected) & ((! LAST) & (X rcDisconnectDetected))) -> (X ((! LAST) U rcDisconnectedWarning)))) & (rcDisconnectDetected -> ((! LAST) U rcDisconnectedWarning)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not rcDisconnectDetected)) or ( not (SI( (rcDisconnectDetected and ((YtoPre( not rcDisconnectDetected)) or FTP)), ( not rcDisconnectedWarning) ))))",
            "component": "Vehicle"
        },
        "_id": "009e66b0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_10",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The communication shall be protected with EndToEnd CRC",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "009e8dc0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_3",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Vehicle shall stop in case of any not recoverable error",
        "comments": "",
        "fulltext": "if unrecoverablError Vehicle shall satisfy stop",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "unrecoverablError",
                "stop"
            ],
            "qualifier_word": "if",
            "pre_condition": "(unrecoverablError)",
            "regular_condition": "(unrecoverablError)",
            "conditionTextRange": [
                0,
                19
            ],
            "component_name": "Vehicle",
            "componentTextRange": [
                21,
                27
            ],
            "post_condition": "(stop)",
            "responseTextRange": [
                35,
                46
            ],
            "diagramVariables": "TC = <b><i>(unrecoverablError)</i></b>, Response = <b><i>(stop)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(unrecoverablError)</i></b> is true and any point in the interval where <b><i>(unrecoverablError)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "unrecoverablError",
            "regular_condition_unexp_ft": "unrecoverablError",
            "regular_condition_SMV_pt": "unrecoverablError",
            "regular_condition_SMV_ft": "unrecoverablError",
            "regular_condition_coco_smv": "unrecoverablError",
            "regular_condition_coco": "unrecoverablError",
            "post_condition_unexp_pt": "stop",
            "post_condition_unexp_ft": "stop",
            "post_condition_SMV_pt": "stop",
            "post_condition_SMV_ft": "stop",
            "post_condition_coco_smv": "stop",
            "post_condition_coco": "stop",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! unrecoverablError) & ((! LAST) & (X unrecoverablError))) -> (X ((! LAST) U stop)))) & (unrecoverablError -> ((! LAST) U stop)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! unrecoverablError)) | (! ((! stop) S ((! stop) & (unrecoverablError & ((Y (! unrecoverablError)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! unrecoverablError)) | (! ((! stop) S ((! stop) & (unrecoverablError & ((Y (! unrecoverablError)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! unrecoverablError)) | (! ((! stop) S ((! stop) & (unrecoverablError & ((Y (! unrecoverablError)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! unrecoverablError) & ((! LAST) & (X unrecoverablError))) -> (X ((! LAST) U stop)))) & (unrecoverablError -> ((! LAST) U stop)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! unrecoverablError) & (X unrecoverablError)) -> (X (F stop)))) & (unrecoverablError -> (F stop)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! unrecoverablError) & (X unrecoverablError)) -> (X (F stop)))) & (unrecoverablError -> (F stop)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! unrecoverablError) & ((! LAST) & (X unrecoverablError))) -> (X ((! LAST) U stop)))) & (unrecoverablError -> ((! LAST) U stop)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not unrecoverablError)) or ( not (SI( (unrecoverablError and ((YtoPre( not unrecoverablError)) or FTP)), ( not stop) ))))",
            "component": "Vehicle"
        },
        "_id": "009edbe0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_6",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "System shall detect and drop unwanted requests to switch to parallel guidance",
        "comments": "",
        "fulltext": "if unwantedParallelGuidanceRequest System shall satisfy dropRequest",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "unwantedParallelGuidanceRequest",
                "dropRequest"
            ],
            "qualifier_word": "if",
            "pre_condition": "(unwantedParallelGuidanceRequest)",
            "regular_condition": "(unwantedParallelGuidanceRequest)",
            "conditionTextRange": [
                0,
                33
            ],
            "component_name": "System",
            "componentTextRange": [
                35,
                40
            ],
            "post_condition": "(dropRequest)",
            "responseTextRange": [
                48,
                66
            ],
            "diagramVariables": "TC = <b><i>(unwantedParallelGuidanceRequest)</i></b>, Response = <b><i>(dropRequest)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(unwantedParallelGuidanceRequest)</i></b> is true and any point in the interval where <b><i>(unwantedParallelGuidanceRequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "unwantedParallelGuidanceRequest",
            "regular_condition_unexp_ft": "unwantedParallelGuidanceRequest",
            "regular_condition_SMV_pt": "unwantedParallelGuidanceRequest",
            "regular_condition_SMV_ft": "unwantedParallelGuidanceRequest",
            "regular_condition_coco_smv": "unwantedParallelGuidanceRequest",
            "regular_condition_coco": "unwantedParallelGuidanceRequest",
            "post_condition_unexp_pt": "dropRequest",
            "post_condition_unexp_ft": "dropRequest",
            "post_condition_SMV_pt": "dropRequest",
            "post_condition_SMV_ft": "dropRequest",
            "post_condition_coco_smv": "dropRequest",
            "post_condition_coco": "dropRequest",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! unwantedParallelGuidanceRequest) & ((! LAST) & (X unwantedParallelGuidanceRequest))) -> (X ((! LAST) U dropRequest)))) & (unwantedParallelGuidanceRequest -> ((! LAST) U dropRequest)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! unwantedParallelGuidanceRequest)) | (! ((! dropRequest) S ((! dropRequest) & (unwantedParallelGuidanceRequest & ((Y (! unwantedParallelGuidanceRequest)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! unwantedParallelGuidanceRequest)) | (! ((! dropRequest) S ((! dropRequest) & (unwantedParallelGuidanceRequest & ((Y (! unwantedParallelGuidanceRequest)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! unwantedParallelGuidanceRequest)) | (! ((! dropRequest) S ((! dropRequest) & (unwantedParallelGuidanceRequest & ((Y (! unwantedParallelGuidanceRequest)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! unwantedParallelGuidanceRequest) & ((! LAST) & (X unwantedParallelGuidanceRequest))) -> (X ((! LAST) U dropRequest)))) & (unwantedParallelGuidanceRequest -> ((! LAST) U dropRequest)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! unwantedParallelGuidanceRequest) & (X unwantedParallelGuidanceRequest)) -> (X (F dropRequest)))) & (unwantedParallelGuidanceRequest -> (F dropRequest)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! unwantedParallelGuidanceRequest) & (X unwantedParallelGuidanceRequest)) -> (X (F dropRequest)))) & (unwantedParallelGuidanceRequest -> (F dropRequest)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! unwantedParallelGuidanceRequest) & ((! LAST) & (X unwantedParallelGuidanceRequest))) -> (X ((! LAST) U dropRequest)))) & (unwantedParallelGuidanceRequest -> ((! LAST) U dropRequest)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not unwantedParallelGuidanceRequest)) or ( not (SI( (unwantedParallelGuidanceRequest and ((YtoPre( not unwantedParallelGuidanceRequest)) or FTP)), ( not dropRequest) ))))",
            "component": "System"
        },
        "_id": "009f02f0-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_12",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Only one remote control shall be supported at the same time",
        "comments": "",
        "fulltext": "System shall always satisfy rcConnected | !rcConnected & rcConnectRequest -> rcConnected",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "rcConnected",
                "rcConnectRequest"
            ],
            "component_name": "System",
            "componentTextRange": [
                0,
                5
            ],
            "timingTextRange": [
                13,
                18
            ],
            "post_condition": "(rcConnected | ! rcConnected & rcConnectRequest -> rcConnected)",
            "responseTextRange": [
                20,
                87
            ],
            "diagramVariables": "Response = <b><i>(rcConnected | ! rcConnected & rcConnectRequest -> rcConnected)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected)",
            "post_condition_unexp_ft": "((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected)",
            "post_condition_SMV_pt": "((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected)",
            "post_condition_SMV_ft": "((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected)",
            "post_condition_coco_smv": "((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected)",
            "post_condition_coco": "((rcConnected or (( not rcConnected) and rcConnectRequest)) => rcConnected)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H ((rcConnected | rcConnectRequest) -> rcConnected))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V ((rcConnected | ((! rcConnected) & rcConnectRequest)) -> rcConnected))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(((rcConnected or (( not rcConnected) and rcConnectRequest)) => rcConnected)))",
            "component": "System"
        },
        "_id": "009f2a00-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_13",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Assessment of the risk level of this threat should be performed",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "009f7820-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_7",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Assessment of the risk level of this operation should be performed",
        "comments": "Unformalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "009fc640-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_17",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Assessment of the risk level of this operation should be performed",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "009fed50-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_18",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The communication shall be protected with EndToEnd CRC",
        "comments": "Not formalisable",
        "fulltext": "",
        "semantics": {},
        "_id": "00a01460-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_11",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "Authentication procedure shall be performed before starting the communication",
        "comments": "",
        "fulltext": "when commRequest System shall satisfy authentication -> communication",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "commRequest",
                "authentication",
                "communication"
            ],
            "qualifier_word": "when",
            "pre_condition": "(commRequest)",
            "regular_condition": "(commRequest)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "System",
            "componentTextRange": [
                17,
                22
            ],
            "post_condition": "(authentication -> communication)",
            "responseTextRange": [
                30,
                68
            ],
            "diagramVariables": "TC = <b><i>(commRequest)</i></b>, Response = <b><i>(authentication -> communication)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(commRequest)</i></b> is true and any point in the interval where <b><i>(commRequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "commRequest",
            "regular_condition_unexp_ft": "commRequest",
            "regular_condition_SMV_pt": "commRequest",
            "regular_condition_SMV_ft": "commRequest",
            "regular_condition_coco_smv": "commRequest",
            "regular_condition_coco": "commRequest",
            "post_condition_unexp_pt": "(authentication -> communication)",
            "post_condition_unexp_ft": "(authentication -> communication)",
            "post_condition_SMV_pt": "(authentication -> communication)",
            "post_condition_SMV_ft": "(authentication -> communication)",
            "post_condition_coco_smv": "(authentication -> communication)",
            "post_condition_coco": "(authentication => communication)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! commRequest) & ((! LAST) & (X commRequest))) -> (X ((! LAST) U (authentication -> communication))))) & (commRequest -> ((! LAST) U (authentication -> communication))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! commRequest)) | (! ((! (authentication -> communication)) S ((! (authentication -> communication)) & (commRequest & ((Y (! commRequest)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! commRequest)) | (! ((! (authentication -> communication)) S ((! (authentication -> communication)) & (commRequest & ((Y (! commRequest)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! commRequest)) | (! ((! (authentication -> communication)) S ((! (authentication -> communication)) & (commRequest & ((Y (! commRequest)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! commRequest) & ((! LAST) & (X commRequest))) -> (X ((! LAST) U (authentication -> communication))))) & (commRequest -> ((! LAST) U (authentication -> communication))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! commRequest) & (X commRequest)) -> (X (F (authentication -> communication))))) & (commRequest -> (F (authentication -> communication))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! commRequest) & (X commRequest)) -> (X (F (authentication -> communication))))) & (commRequest -> (F (authentication -> communication))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! commRequest) & ((! LAST) & (X commRequest))) -> (X ((! LAST) U (authentication -> communication))))) & (commRequest -> ((! LAST) U (authentication -> communication))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not commRequest)) or ( not (SI( (commRequest and ((YtoPre( not commRequest)) or FTP)), ( not (authentication => communication)) ))))",
            "component": "System"
        },
        "_id": "00a06280-4754-11ee-8177-dd92d6055006"
    },
    {
        "reqid": "UC6_R_1\t",
        "parent_reqid": "",
        "project": "VALU3S Use Case 6",
        "rationale": "The system shall check GPS connection before switching to parallel guidance",
        "comments": "",
        "fulltext": "when parallelGuidanceRequested System shall satisfy checkGPS -> parallelGuidanceMode",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "parallelGuidanceRequested",
                "checkGPS",
                "parallelGuidanceMode"
            ],
            "qualifier_word": "when",
            "pre_condition": "(parallelGuidanceRequested)",
            "regular_condition": "(parallelGuidanceRequested)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "System",
            "componentTextRange": [
                31,
                36
            ],
            "post_condition": "(checkGPS -> parallelGuidanceMode)",
            "responseTextRange": [
                44,
                83
            ],
            "diagramVariables": "TC = <b><i>(parallelGuidanceRequested)</i></b>, Response = <b><i>(checkGPS -> parallelGuidanceMode)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(parallelGuidanceRequested)</i></b> is true and any point in the interval where <b><i>(parallelGuidanceRequested)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "parallelGuidanceRequested",
            "regular_condition_unexp_ft": "parallelGuidanceRequested",
            "regular_condition_SMV_pt": "parallelGuidanceRequested",
            "regular_condition_SMV_ft": "parallelGuidanceRequested",
            "regular_condition_coco_smv": "parallelGuidanceRequested",
            "regular_condition_coco": "parallelGuidanceRequested",
            "post_condition_unexp_pt": "(checkGPS -> parallelGuidanceMode)",
            "post_condition_unexp_ft": "(checkGPS -> parallelGuidanceMode)",
            "post_condition_SMV_pt": "(checkGPS -> parallelGuidanceMode)",
            "post_condition_SMV_ft": "(checkGPS -> parallelGuidanceMode)",
            "post_condition_coco_smv": "(checkGPS -> parallelGuidanceMode)",
            "post_condition_coco": "(checkGPS => parallelGuidanceMode)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! parallelGuidanceRequested) & ((! LAST) & (X parallelGuidanceRequested))) -> (X ((! LAST) U (checkGPS -> parallelGuidanceMode))))) & (parallelGuidanceRequested -> ((! LAST) U (checkGPS -> parallelGuidanceMode))))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! parallelGuidanceRequested)) | (! ((! (checkGPS -> parallelGuidanceMode)) S ((! (checkGPS -> parallelGuidanceMode)) & (parallelGuidanceRequested & ((Y (! parallelGuidanceRequested)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! parallelGuidanceRequested)) | (! ((! (checkGPS -> parallelGuidanceMode)) S ((! (checkGPS -> parallelGuidanceMode)) & (parallelGuidanceRequested & ((Y (! parallelGuidanceRequested)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! parallelGuidanceRequested)) | (! ((! (checkGPS -> parallelGuidanceMode)) S ((! (checkGPS -> parallelGuidanceMode)) & (parallelGuidanceRequested & ((Y (! parallelGuidanceRequested)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! parallelGuidanceRequested) & ((! LAST) & (X parallelGuidanceRequested))) -> (X ((! LAST) U (checkGPS -> parallelGuidanceMode))))) & (parallelGuidanceRequested -> ((! LAST) U (checkGPS -> parallelGuidanceMode))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! parallelGuidanceRequested) & (X parallelGuidanceRequested)) -> (X (F (checkGPS -> parallelGuidanceMode))))) & (parallelGuidanceRequested -> (F (checkGPS -> parallelGuidanceMode))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! parallelGuidanceRequested) & (X parallelGuidanceRequested)) -> (X (F (checkGPS -> parallelGuidanceMode))))) & (parallelGuidanceRequested -> (F (checkGPS -> parallelGuidanceMode))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! parallelGuidanceRequested) & ((! LAST) & (X parallelGuidanceRequested))) -> (X ((! LAST) U (checkGPS -> parallelGuidanceMode))))) & (parallelGuidanceRequested -> ((! LAST) U (checkGPS -> parallelGuidanceMode))))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not parallelGuidanceRequested)) or ( not (SI( (parallelGuidanceRequested and ((YtoPre( not parallelGuidanceRequested)) or FTP)), ( not (checkGPS => parallelGuidanceMode)) ))))",
            "component": "System"
        },
        "_id": "00a0b0a0-4754-11ee-8177-dd92d6055006"
    }
]